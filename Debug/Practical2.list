
Practical2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005508  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080056a8  080056a8  000156a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ac4  08005ac4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005acc  08005acc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  200001e0  08005cb4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08005cb4  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008414  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018fe  00000000  00000000  00028624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a0  00000000  00000000  00029f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004b8  00000000  00000000  0002a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016af1  00000000  00000000  0002a980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000070e7  00000000  00000000  00041471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c75  00000000  00000000  00048558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf1cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002534  00000000  00000000  000cf220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  000d1754  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  000d1790  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005690 	.word	0x08005690

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08005690 	.word	0x08005690

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <adcSetChannelSequence>:
    adc->SMPR[1] |= samplingTime << (3 * channel);
  else
    adc->SMPR[0] |= samplingTime << (3 * (channel - 10));
}

void  adcSetChannelSequence(Adc *adc, int channels[], int  length){
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  adc->SQR[0] |= length << 20;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	051b      	lsls	r3, r3, #20
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  for(int i = 0; i < length; i++){
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e040      	b.n	8001032 <adcSetChannelSequence+0xa2>
    if(i < 6)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	2b05      	cmp	r3, #5
 8000fb4:	dc11      	bgt.n	8000fda <adcSetChannelSequence+0x4a>
      adc->SQR[2] |= channels[i] << (i * 5);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	6818      	ldr	r0, [r3, #0]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	fa00 f303 	lsl.w	r3, r0, r3
 8000fd0:	ea41 0203 	orr.w	r2, r1, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34
 8000fd8:	e028      	b.n	800102c <adcSetChannelSequence+0x9c>
    else if(i < 13)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2b0c      	cmp	r3, #12
 8000fde:	dc12      	bgt.n	8001006 <adcSetChannelSequence+0x76>
      adc->SQR[1] |= channels[i] << ((i - 6) * 5);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	4413      	add	r3, r2
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	1f9a      	subs	r2, r3, #6
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	fa00 f303 	lsl.w	r3, r0, r3
 8000ffc:	ea41 0203 	orr.w	r2, r1, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
 8001004:	e012      	b.n	800102c <adcSetChannelSequence+0x9c>
    else
      adc->SQR[0] |= channels[i] << ((i - 13) * 5);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	4413      	add	r3, r2
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f1a3 020d 	sub.w	r2, r3, #13
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	fa00 f303 	lsl.w	r3, r0, r3
 8001024:	ea41 0203 	orr.w	r2, r1, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  for(int i = 0; i < length; i++){
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	dbba      	blt.n	8000fb0 <adcSetChannelSequence+0x20>
  }
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <adcConfiguration>:

void  adcConfiguration(Adc  *adc, adcConfig config){
 8001048:	b490      	push	{r4, r7}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	e9c7 2300 	strd	r2, r3, [r7]
  adc->CR[0] &= ~(0xFFFFFFFF);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2200      	movs	r2, #0
 800105c:	605a      	str	r2, [r3, #4]
  adc->CR[0] |= (config & 0xFFFFFFFF);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	461a      	mov	r2, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	4313      	orrs	r3, r2
 8001068:	461a      	mov	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	605a      	str	r2, [r3, #4]

  adc->CR[1] &= ~(0xFFFFFFFF);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  adc->CR[1] |= (config >> 32);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	461c      	mov	r4, r3
 800107e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	000a      	movs	r2, r1
 800108c:	2300      	movs	r3, #0
 800108e:	4613      	mov	r3, r2
 8001090:	4323      	orrs	r3, r4
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	609a      	str	r2, [r3, #8]
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bc90      	pop	{r4, r7}
 80010a0:	4770      	bx	lr

080010a2 <gpioConfigurePin>:

int	gpioReadPin(Gpio  *gpio, int  pin){
	return	(gpio->IDR >> pin) & 1;
}

void  gpioConfigurePin(Gpio *gpio, int  pin, GpioConfig config){
 80010a2:	b480      	push	{r7}
 80010a4:	b085      	sub	sp, #20
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
  gpio->MODER &= GPIO_MODE_MASK(pin);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2103      	movs	r1, #3
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	401a      	ands	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	601a      	str	r2, [r3, #0]
  gpio->MODER |= (config & 0xF)  << (2 * pin);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f003 020f 	and.w	r2, r3, #15
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	430b      	orrs	r3, r1
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	601a      	str	r2, [r3, #0]

  gpio->OTYPER &= GPIO_TYPE_MASK(pin);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	2101      	movs	r1, #1
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	605a      	str	r2, [r3, #4]
  gpio->OTYPER |= ((config & 0xFF) >> 0x4) << pin;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4619      	mov	r1, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 020f 	and.w	r2, r3, #15
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	430b      	orrs	r3, r1
 800110a:	461a      	mov	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	605a      	str	r2, [r3, #4]

  gpio->OSPEEDR &= GPIO_SPEED_MASK(pin);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2103      	movs	r1, #3
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	401a      	ands	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	609a      	str	r2, [r3, #8]
  gpio->OSPEEDR |= ((config & 0xFFF) >> 0x8) << (2 * pin);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	4619      	mov	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	f003 020f 	and.w	r2, r3, #15
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	430b      	orrs	r3, r1
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	609a      	str	r2, [r3, #8]

  gpio->PUPDR &= GPIO_PULL_MASK(pin);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2103      	movs	r1, #3
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	401a      	ands	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	60da      	str	r2, [r3, #12]
  gpio->PUPDR |= ((config & 0xFFFF) >> 0xC) << (2 * pin);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	4619      	mov	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	0b1b      	lsrs	r3, r3, #12
 8001164:	f003 020f 	and.w	r2, r3, #15
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	430b      	orrs	r3, r1
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	60da      	str	r2, [r3, #12]

  if(pin > 7){
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b07      	cmp	r3, #7
 800117c:	dd1c      	ble.n	80011b8 <gpioConfigurePin+0x116>
    gpio->AFR[1] &= GPIO_AFR_MASK(pin - 8);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	3b08      	subs	r3, #8
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	210f      	movs	r1, #15
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	401a      	ands	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
    gpio->AFR[1] |= ((config & 0xFFFFF) >> 0x10) << (4 * (pin - 8));
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	0c1b      	lsrs	r3, r3, #16
 80011a0:	f003 020f 	and.w	r2, r3, #15
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	3b08      	subs	r3, #8
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	430b      	orrs	r3, r1
 80011b0:	461a      	mov	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  }else{
    gpio->AFR[0] &= GPIO_AFR_MASK(pin);
    gpio->AFR[0] |= ((config & 0xFFFFF) >> 0x10) << (4 * pin);
  }
}
 80011b6:	e019      	b.n	80011ec <gpioConfigurePin+0x14a>
    gpio->AFR[0] &= GPIO_AFR_MASK(pin);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6a1a      	ldr	r2, [r3, #32]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	210f      	movs	r1, #15
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	401a      	ands	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	621a      	str	r2, [r3, #32]
    gpio->AFR[0] |= ((config & 0xFFFFF) >> 0x10) << (4 * pin);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4619      	mov	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	0c1b      	lsrs	r3, r3, #16
 80011d8:	f003 020f 	and.w	r2, r3, #15
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	430b      	orrs	r3, r1
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	621a      	str	r2, [r3, #32]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <rccResetUnresetDevice>:
 *      Author: Yip Sai Wei
 */
#include	"Rcc.h"


void	rccResetUnresetDevice(_IO_ uint32_t *io, int bitNum){
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  *io |= RCC_RESET_DEVICE(bitNum);			//Reset
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2101      	movs	r1, #1
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	fa01 f202 	lsl.w	r2, r1, r2
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	601a      	str	r2, [r3, #0]
  *io &= RCC_SET_DEVICE(bitNum);			//Unreset
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	fa01 f202 	lsl.w	r2, r1, r2
 8001220:	43d2      	mvns	r2, r2
 8001222:	401a      	ands	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <rccUnresetAndEnableGpio>:


void	rccUnresetAndEnableGpio(RccGpio	rccGpio){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  rccResetUnresetDevice(ahb1ResetReg, rccGpio);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4619      	mov	r1, r3
 8001242:	4808      	ldr	r0, [pc, #32]	; (8001264 <rccUnresetAndEnableGpio+0x30>)
 8001244:	f7ff ffd8 	bl	80011f8 <rccResetUnresetDevice>
  rcc->AHB1ENR |= (1 << rccGpio);
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <rccUnresetAndEnableGpio+0x34>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	79fa      	ldrb	r2, [r7, #7]
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	4611      	mov	r1, r2
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <rccUnresetAndEnableGpio+0x34>)
 8001258:	430b      	orrs	r3, r1
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
  /*
	rcc->AHB1RSTR = RCC_RESET_DEVICE(rccGpio);		//Reset
	rcc->AHB1RSTR = RCC_SET_DEVICE(rcc);		//Unreset
	rcc->AHB1ENR = ;		//Enable clock gating
   */
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023810 	.word	0x40023810
 8001268:	40023800 	.word	0x40023800

0800126c <rccUnresetAndEnableUsart>:

void	rccUnresetAndEnableUsart(RccUsart	rccUsart){
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if(rccUsart == 17){
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b11      	cmp	r3, #17
 800127a:	d10f      	bne.n	800129c <rccUnresetAndEnableUsart+0x30>
    rccResetUnresetDevice(apb1ResetReg, rccUsart);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4619      	mov	r1, r3
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <rccUnresetAndEnableUsart+0x58>)
 8001282:	f7ff ffb9 	bl	80011f8 <rccResetUnresetDevice>
    rcc->APB1ENR |= (1 << rccUsart);
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <rccUnresetAndEnableUsart+0x5c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f202 	lsl.w	r2, r1, r2
 8001292:	4611      	mov	r1, r2
 8001294:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <rccUnresetAndEnableUsart+0x5c>)
 8001296:	430b      	orrs	r3, r1
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
  }
  else{
    rccResetUnresetDevice(apb2ResetReg, rccUsart);
    rcc->APB2ENR |= (1 << rccUsart);
  }
}
 800129a:	e00e      	b.n	80012ba <rccUnresetAndEnableUsart+0x4e>
    rccResetUnresetDevice(apb2ResetReg, rccUsart);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	4619      	mov	r1, r3
 80012a0:	480a      	ldr	r0, [pc, #40]	; (80012cc <rccUnresetAndEnableUsart+0x60>)
 80012a2:	f7ff ffa9 	bl	80011f8 <rccResetUnresetDevice>
    rcc->APB2ENR |= (1 << rccUsart);
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <rccUnresetAndEnableUsart+0x5c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	2101      	movs	r1, #1
 80012ae:	fa01 f202 	lsl.w	r2, r1, r2
 80012b2:	4611      	mov	r1, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <rccUnresetAndEnableUsart+0x5c>)
 80012b6:	430b      	orrs	r3, r1
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023820 	.word	0x40023820
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40023824 	.word	0x40023824

080012d0 <rccUnresetAndEnableTimer>:

void  rccUnresetAndEnableTimer(RccTimer rccTimer){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  }else{
    rccResetUnresetDevice(apb1ResetReg, (rccTimer >> 16));
    rcc->APB1ENR |= (1 << (rccTimer >> 16));
  }
  */
  rccResetUnresetDevice((uint32_t *)(RccBaseAddress + (rccTimer >> 16)), (rccTimer & 0xF));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	0c1b      	lsrs	r3, r3, #16
 80012dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012e0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f003 030f 	and.w	r3, r3, #15
 80012ec:	4619      	mov	r1, r3
 80012ee:	4610      	mov	r0, r2
 80012f0:	f7ff ff82 	bl	80011f8 <rccResetUnresetDevice>
  if((rccTimer >> 16) == RCC_APB1){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	0c1b      	lsrs	r3, r3, #16
 80012f8:	2b20      	cmp	r3, #32
 80012fa:	d10c      	bne.n	8001316 <rccUnresetAndEnableTimer+0x46>
    rcc->APB1ENR |= (1 << (rccTimer & 0xF));
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <rccUnresetAndEnableTimer+0x68>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	f002 020f 	and.w	r2, r2, #15
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f202 	lsl.w	r2, r1, r2
 800130c:	4611      	mov	r1, r2
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <rccUnresetAndEnableTimer+0x68>)
 8001310:	430b      	orrs	r3, r1
 8001312:	6413      	str	r3, [r2, #64]	; 0x40
  }else{
    rcc->APB2ENR |= (1 << (rccTimer & 0xF));
  }
}
 8001314:	e00b      	b.n	800132e <rccUnresetAndEnableTimer+0x5e>
    rcc->APB2ENR |= (1 << (rccTimer & 0xF));
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <rccUnresetAndEnableTimer+0x68>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	f002 020f 	and.w	r2, r2, #15
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	4611      	mov	r1, r2
 8001328:	4a03      	ldr	r2, [pc, #12]	; (8001338 <rccUnresetAndEnableTimer+0x68>)
 800132a:	430b      	orrs	r3, r1
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <rccUnresetAndEnableAdc>:
void  rccUnresetAndEnableI2c(RccI2c rccI2c){
  rccResetUnresetDevice((uint32_t *)(RccBaseAddress + (rccI2c >> 16)), (rccI2c & 0xFF));
  rcc->APB1ENR |= (1 << (rccI2c & 0xFF));
}

void  rccUnresetAndEnableAdc(RccAdc rccAdc){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  rccResetUnresetDevice((uint32_t *)(RccBaseAddress +(rccAdc >> 16)), (rccAdc & 0xFF));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	0c1b      	lsrs	r3, r3, #16
 8001348:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800134c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001350:	461a      	mov	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4619      	mov	r1, r3
 8001358:	4610      	mov	r0, r2
 800135a:	f7ff ff4d 	bl	80011f8 <rccResetUnresetDevice>
  rcc->APB2ENR |= (1 << (rccAdc & 0xFF));
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <rccUnresetAndEnableAdc+0x40>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	2101      	movs	r1, #1
 8001368:	fa01 f202 	lsl.w	r2, r1, r2
 800136c:	4611      	mov	r1, r2
 800136e:	4a03      	ldr	r2, [pc, #12]	; (800137c <rccUnresetAndEnableAdc+0x40>)
 8001370:	430b      	orrs	r3, r1
 8001372:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800

08001380 <timerBasicConfig>:
 *      Author: Yip Sai Wei
 */

#include  "Tim.h"

void  timerBasicConfig(TimReg *timer, BasicTimConfig  config){
 8001380:	b490      	push	{r4, r7}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	e9c7 2300 	strd	r2, r3, [r7]
  timer->CR1 &= TIM_16_BIT_MASK;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	601a      	str	r2, [r3, #0]
  timer->CR1 |= (config & 0x1FF);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013a2:	431a      	orrs	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	601a      	str	r2, [r3, #0]

  timer->CR2 &= TIM_16_BIT_MASK;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	605a      	str	r2, [r3, #4]
  timer->CR2 |= (config >> 16) & 0x7FFF;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685c      	ldr	r4, [r3, #4]
 80013b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	0c02      	lsrs	r2, r0, #16
 80013c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013ca:	0c0b      	lsrs	r3, r1, #16
 80013cc:	4613      	mov	r3, r2
 80013ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013d2:	ea44 0203 	orr.w	r2, r4, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	605a      	str	r2, [r3, #4]

  timer->SMCR &= TIM_16_BIT_MASK;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	609a      	str	r2, [r3, #8]
  timer->SMCR |= (config >> 32) & 0xFFFF;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	689c      	ldr	r4, [r3, #8]
 80013ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	000a      	movs	r2, r1
 80013f8:	2300      	movs	r3, #0
 80013fa:	4613      	mov	r3, r2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	ea44 0203 	orr.w	r2, r4, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	609a      	str	r2, [r3, #8]

  timer->DIER &= TIM_16_BIT_MASK;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	60da      	str	r2, [r3, #12]
  timer->DIER |= (config >> 48) &0x7FFF;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	68dc      	ldr	r4, [r3, #12]
 8001416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	0c0a      	lsrs	r2, r1, #16
 8001424:	2300      	movs	r3, #0
 8001426:	4613      	mov	r3, r2
 8001428:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800142c:	ea44 0203 	orr.w	r2, r4, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	60da      	str	r2, [r3, #12]
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bc90      	pop	{r4, r7}
 800143c:	4770      	bx	lr

0800143e <timerEventGenerationConfig>:

void  timerEventGenerationConfig(TimReg *timer, SpecificTimConfig1 config){
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	70fb      	strb	r3, [r7, #3]
  timer->EGR &= TIM_8_bit_MASK;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	f023 020f 	bic.w	r2, r3, #15
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	615a      	str	r2, [r3, #20]
  timer->EGR |= (config & 0xF);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	615a      	str	r2, [r3, #20]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <timerCaptureCompareConfig>:

void  timerCaptureCompareConfig(TimReg *timer, int  channel, SpecificTim1Config2  config){
 8001472:	b490      	push	{r4, r7}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	e9c7 2300 	strd	r2, r3, [r7]
  timer->CCMR1 |= (config & 0xFFFF);

  timer->CCMR2 &= TIM_16_BIT_MASK;
  timer->CCMR2 |= (config >> 16) & 0xFFFF;
  */
  if(channel == 1 || channel == 2){
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d002      	beq.n	800148c <timerCaptureCompareConfig+0x1a>
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d11f      	bne.n	80014cc <timerCaptureCompareConfig+0x5a>
    if(channel == 1){
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10d      	bne.n	80014ae <timerCaptureCompareConfig+0x3c>
      timer->CCMR1 &= TIM_CHANNEL_MASK_LOWER_8;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	619a      	str	r2, [r3, #24]
      timer->CCMR1 |= (config & 0xFF);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	699a      	ldr	r2, [r3, #24]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	431a      	orrs	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	619a      	str	r2, [r3, #24]
    if(channel == 1){
 80014ac:	e02d      	b.n	800150a <timerCaptureCompareConfig+0x98>
    }else{
      timer->CCMR1 &= TIM_CHANNEL_MASK_HIGHER_8;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	619a      	str	r2, [r3, #24]
      timer->CCMR1 |= (config & 0xFF) << 8;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	699a      	ldr	r2, [r3, #24]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	431a      	orrs	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	619a      	str	r2, [r3, #24]
    if(channel == 1){
 80014ca:	e01e      	b.n	800150a <timerCaptureCompareConfig+0x98>
    }
  }else{
    if(channel == 3){
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d10d      	bne.n	80014ee <timerCaptureCompareConfig+0x7c>
      timer->CCMR2 &= TIM_CHANNEL_MASK_LOWER_8;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	61da      	str	r2, [r3, #28]
      timer->CCMR2 |= (config & 0xFF);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	431a      	orrs	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	61da      	str	r2, [r3, #28]
 80014ec:	e00d      	b.n	800150a <timerCaptureCompareConfig+0x98>
    }else{
      timer->CCMR2 &= TIM_CHANNEL_MASK_HIGHER_8;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	61da      	str	r2, [r3, #28]
      timer->CCMR2 |= (config & 0xFF) << 8;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	69da      	ldr	r2, [r3, #28]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b29b      	uxth	r3, r3
 8001504:	431a      	orrs	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	61da      	str	r2, [r3, #28]
    }
  }
  timer->CCER &= TIM_16_BIT_MASK;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	621a      	str	r2, [r3, #32]
  timer->CCER |= (config >> 32) & 0x3FFF;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a1c      	ldr	r4, [r3, #32]
 800151a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	000a      	movs	r2, r1
 8001528:	2300      	movs	r3, #0
 800152a:	4613      	mov	r3, r2
 800152c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001530:	ea44 0203 	orr.w	r2, r4, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	621a      	str	r2, [r3, #32]
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bc90      	pop	{r4, r7}
 8001540:	4770      	bx	lr

08001542 <timSetPrescalerReg>:

void  timSetPrescalerReg(TimReg *timer, uint32_t  value){
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  timer->PSC = value;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <timSetARRReg>:

void  timSetARRReg(TimReg *timer, uint32_t  value){
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
  timer->ARR = value;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <setFrequency>:

void  setFrequency(TimReg *timer, long double  desiredFrequency, uint32_t  arrValue){
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	ed87 0b00 	vstr	d0, [r7]
 8001588:	60b9      	str	r1, [r7, #8]
  uint32_t timerFrequency = HAL_RCC_GetHCLKFreq();
 800158a:	f001 fa5d 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 800158e:	6178      	str	r0, [r7, #20]
  timSetARRReg(timer, arrValue);
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff ffe3 	bl	800155e <timSetARRReg>
  timSetPrescalerReg(timer, ((long double)timerFrequency / (arrValue * desiredFrequency)) - 1);
 8001598:	6978      	ldr	r0, [r7, #20]
 800159a:	f7fe ffbb 	bl	8000514 <__aeabi_ui2d>
 800159e:	4604      	mov	r4, r0
 80015a0:	460d      	mov	r5, r1
 80015a2:	68b8      	ldr	r0, [r7, #8]
 80015a4:	f7fe ffb6 	bl	8000514 <__aeabi_ui2d>
 80015a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ac:	f7ff f82c 	bl	8000608 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7ff f950 	bl	800085c <__aeabi_ddiv>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <setFrequency+0x70>)
 80015ca:	f7fe fe65 	bl	8000298 <__aeabi_dsub>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff faef 	bl	8000bb8 <__aeabi_d2uiz>
 80015da:	4603      	mov	r3, r0
 80015dc:	4619      	mov	r1, r3
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f7ff ffaf 	bl	8001542 <timSetPrescalerReg>
}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bdb0      	pop	{r4, r5, r7, pc}
 80015ec:	3ff00000 	.word	0x3ff00000

080015f0 <usartSetBaudRate>:
 */

#include  "Usart.h"


void  usartSetBaudRate(UsartReg *usart, int baudrate){
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b08c      	sub	sp, #48	; 0x30
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t  apbFreq = returnUsartFrequency(usart);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f8f4 	bl	80017e8 <returnUsartFrequency>
 8001600:	62b8      	str	r0, [r7, #40]	; 0x28
  int OVER8 = (usart->CR1 >> 15) & 1;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	0bdb      	lsrs	r3, r3, #15
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  double USARTDIV = (double) apbFreq / (baudrate * (8 * (2-OVER8)));
 800160e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001610:	f7fe ff80 	bl	8000514 <__aeabi_ui2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	f1c3 0302 	rsb	r3, r3, #2
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff84 	bl	8000534 <__aeabi_i2d>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7ff f912 	bl	800085c <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int mantissa = USARTDIV;
 8001640:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001644:	f7ff fa90 	bl	8000b68 <__aeabi_d2iz>
 8001648:	4603      	mov	r3, r0
 800164a:	617b      	str	r3, [r7, #20]
  double decimalPoint = USARTDIV - mantissa;
 800164c:	6978      	ldr	r0, [r7, #20]
 800164e:	f7fe ff71 	bl	8000534 <__aeabi_i2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800165a:	f7fe fe1d 	bl	8000298 <__aeabi_dsub>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	e9c7 2302 	strd	r2, r3, [r7, #8]
  int fraction;
  if(OVER8)
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00f      	beq.n	800168c <usartSetBaudRate+0x9c>
    fraction = decimalPoint * 8;
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <usartSetBaudRate+0xd0>)
 8001672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001676:	f7fe ffc7 	bl	8000608 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff fa71 	bl	8000b68 <__aeabi_d2iz>
 8001686:	4603      	mov	r3, r0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800168a:	e00e      	b.n	80016aa <usartSetBaudRate+0xba>
  else
    fraction = decimalPoint * 16;
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <usartSetBaudRate+0xd4>)
 8001692:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001696:	f7fe ffb7 	bl	8000608 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff fa61 	bl	8000b68 <__aeabi_d2iz>
 80016a6:	4603      	mov	r3, r0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  usart->BRR = (mantissa << 4) | fraction;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	011a      	lsls	r2, r3, #4
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	4313      	orrs	r3, r2
 80016b2:	461a      	mov	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	609a      	str	r2, [r3, #8]
}
 80016b8:	bf00      	nop
 80016ba:	3730      	adds	r7, #48	; 0x30
 80016bc:	46bd      	mov	sp, r7
 80016be:	bdb0      	pop	{r4, r5, r7, pc}
 80016c0:	40200000 	.word	0x40200000
 80016c4:	40300000 	.word	0x40300000

080016c8 <usartConfigure>:
void  usartConfigureCR3(UsartReg *usart, int config){
  usart->CR3 = config;
}
*/

void  usartConfigure(UsartReg *usart, UsartConfig config){
 80016c8:	b490      	push	{r4, r7}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	e9c7 2300 	strd	r2, r3, [r7]
 usart->CR1 &= USART_CR_MASK;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0c1b      	lsrs	r3, r3, #16
 80016da:	041b      	lsls	r3, r3, #16
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	60d3      	str	r3, [r2, #12]
 usart->CR1 |= (config & 0xFFFF);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	431a      	orrs	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	60da      	str	r2, [r3, #12]

 usart->CR2 &= USART_CR_MASK;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	0c1b      	lsrs	r3, r3, #16
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	6113      	str	r3, [r2, #16]
 usart->CR2 |= (config & 0xFFFFFFFF) >> 16;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	691c      	ldr	r4, [r3, #16]
 80016fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	0c02      	lsrs	r2, r0, #16
 800170c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001710:	0c0b      	lsrs	r3, r1, #16
 8001712:	4613      	mov	r3, r2
 8001714:	b29b      	uxth	r3, r3
 8001716:	ea44 0203 	orr.w	r2, r4, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	611a      	str	r2, [r3, #16]

 usart->CR3 &= USART_CR_MASK;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	6153      	str	r3, [r2, #20]
 usart->CR3 |= config >> 32;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	695c      	ldr	r4, [r3, #20]
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	000a      	movs	r2, r1
 800173c:	2300      	movs	r3, #0
 800173e:	4613      	mov	r3, r2
 8001740:	ea44 0203 	orr.w	r2, r4, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	615a      	str	r2, [r3, #20]
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bc90      	pop	{r4, r7}
 8001750:	4770      	bx	lr

08001752 <writeToDataRegister>:

void  writeToDataRegister(UsartReg *usart, uint8_t  data){
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	70fb      	strb	r3, [r7, #3]
 usart->DR &= USART_DR_MASK;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	605a      	str	r2, [r3, #4]
 usart->DR = data;
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <isTransmissionComplete>:

int isTransmissionComplete(UsartReg *usart){
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 return (usart->SR & (1 << 6));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <isTDREmpty>:

int isTDREmpty(UsartReg *usart){
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 return (usart->SR & (1 << 7));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <isRDRAvailableForRead>:

int isRDRAvailableForRead(UsartReg *usart){
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return  (usart->SR & (1 <<5));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0320 	and.w	r3, r3, #32
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <returnRDRValue>:

int returnRDRValue(UsartReg *usart){
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return  usart->DR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <returnUsartFrequency>:

uint32_t returnUsartFrequency(UsartReg *usart){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(usart == usart1 || usart == usart6)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <returnUsartFrequency+0x30>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d003      	beq.n	8001800 <returnUsartFrequency+0x18>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <returnUsartFrequency+0x34>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d103      	bne.n	8001808 <returnUsartFrequency+0x20>
    return  HAL_RCC_GetPCLK2Freq();
 8001800:	f001 f942 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 8001804:	4603      	mov	r3, r0
 8001806:	e002      	b.n	800180e <returnUsartFrequency+0x26>
  else
    return  HAL_RCC_GetPCLK1Freq();
 8001808:	f001 f92a 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40011000 	.word	0x40011000
 800181c:	40011400 	.word	0x40011400

08001820 <usartTransmit>:

Status  usartTransmit(UsartReg  *usart, char  *msg){
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  for(int  i = 0; msg[i] != '\0'; i++){
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	e018      	b.n	8001862 <usartTransmit+0x42>
    while(!isTDREmpty(usart));
 8001830:	bf00      	nop
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffb0 	bl	8001798 <isTDREmpty>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f9      	beq.n	8001832 <usartTransmit+0x12>
    writeToDataRegister(usart, msg[i]);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4619      	mov	r1, r3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff82 	bl	8001752 <writeToDataRegister>
    while(!isTransmissionComplete(usart));
 800184e:	bf00      	nop
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff93 	bl	800177c <isTransmissionComplete>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f9      	beq.n	8001850 <usartTransmit+0x30>
  for(int  i = 0; msg[i] != '\0'; i++){
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	4413      	add	r3, r2
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1e0      	bne.n	8001830 <usartTransmit+0x10>
    }
  return  OK;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <readFromUsart>:

Status readFromUsart(UsartReg  *usart, char  *msg){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  char  *charptr = msg;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  do{
    while(!isRDRAvailableForRead(usart));
 8001886:	bf00      	nop
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff93 	bl	80017b4 <isRDRAvailableForRead>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f9      	beq.n	8001888 <readFromUsart+0x10>
    charptr = (char *)returnRDRValue(usart);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff9b 	bl	80017d0 <returnRDRValue>
 800189a:	4603      	mov	r3, r0
 800189c:	60fb      	str	r3, [r7, #12]
    charptr++;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
  }while(*msg != '\0');
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1ec      	bne.n	8001886 <readFromUsart+0xe>
  return  OK;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018bc:	f000 fb58 	bl	8001f70 <HAL_Init>

  /* USER CODE BEGIN Init */
  RetargetInit(usart2);
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <main+0x1c>)
 80018c2:	f000 f9d1 	bl	8001c68 <RetargetInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c6:	f000 f807 	bl	80018d8 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  //timerConfigureExp2ForceInactiveActive(tim4);
  timerExp4TriggerAdcWithTimer();
 80018ca:	f000 f8d1 	bl	8001a70 <timerExp4TriggerAdcWithTimer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    readAndPrintAdc();
 80018ce:	f000 f97b 	bl	8001bc8 <readAndPrintAdc>
 80018d2:	e7fc      	b.n	80018ce <main+0x16>
 80018d4:	40004400 	.word	0x40004400

080018d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b094      	sub	sp, #80	; 0x50
 80018dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018de:	f107 0320 	add.w	r3, r7, #32
 80018e2:	2230      	movs	r2, #48	; 0x30
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 f914 	bl	8002b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <SystemClock_Config+0xc8>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <SystemClock_Config+0xc8>)
 8001906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190a:	6413      	str	r3, [r2, #64]	; 0x40
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <SystemClock_Config+0xc8>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <SystemClock_Config+0xcc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <SystemClock_Config+0xcc>)
 8001922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <SystemClock_Config+0xcc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001934:	2302      	movs	r3, #2
 8001936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001938:	2301      	movs	r3, #1
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800193c:	2310      	movs	r3, #16
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001940:	2302      	movs	r3, #2
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001944:	2300      	movs	r3, #0
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001948:	2308      	movs	r3, #8
 800194a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800194c:	2332      	movs	r3, #50	; 0x32
 800194e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001950:	2302      	movs	r3, #2
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001954:	2304      	movs	r3, #4
 8001956:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001958:	f107 0320 	add.w	r3, r7, #32
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fc5f 	bl	8002220 <HAL_RCC_OscConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001968:	f000 f979 	bl	8001c5e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196c:	230f      	movs	r3, #15
 800196e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001970:	2302      	movs	r3, #2
 8001972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2101      	movs	r1, #1
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fec2 	bl	8002710 <HAL_RCC_ClockConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001992:	f000 f964 	bl	8001c5e <Error_Handler>
  }
}
 8001996:	bf00      	nop
 8001998:	3750      	adds	r7, #80	; 0x50
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40007000 	.word	0x40007000

080019a8 <TIM4_IRQHandler>:
                          |COUNTER_EN);

}


void  TIM4_IRQHandler(void){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  volatile  static  int i = 1;
  if(tim4->SR & TIM_UIF)
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <TIM4_IRQHandler+0xb8>)
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <TIM4_IRQHandler+0x1c>
    tim4->SR &= ~TIM_UIF;
 80019b8:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <TIM4_IRQHandler+0xb8>)
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <TIM4_IRQHandler+0xb8>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6113      	str	r3, [r2, #16]
  tim4->SR = 0;
 80019c4:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <TIM4_IRQHandler+0xb8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  timSetOutCompareReg(tim4, 3, 65000);
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <TIM4_IRQHandler+0xbc>)
 80019cc:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80019d0:	601a      	str	r2, [r3, #0]
  if(i == 56){
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <TIM4_IRQHandler+0xc0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b38      	cmp	r3, #56	; 0x38
 80019d8:	d10e      	bne.n	80019f8 <TIM4_IRQHandler+0x50>
    i = 0;
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <TIM4_IRQHandler+0xc0>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
    //To achieve 1Hz, toggle rate should be 2Hz (Toggle once every 0.5s)
    setFrequency(tim4, 2, 65000);
 80019e0:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 80019e4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001a48 <TIM4_IRQHandler+0xa0>
 80019e8:	481d      	ldr	r0, [pc, #116]	; (8001a60 <TIM4_IRQHandler+0xb8>)
 80019ea:	f7ff fdc7 	bl	800157c <setFrequency>
    timSetOutCompareReg(tim4, 3, 65000);
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <TIM4_IRQHandler+0xbc>)
 80019f0:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e01e      	b.n	8001a36 <TIM4_IRQHandler+0x8e>
  }else if(i == 8){
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <TIM4_IRQHandler+0xc0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d10b      	bne.n	8001a18 <TIM4_IRQHandler+0x70>
    //To achieve 2Hz, toggle rate should be 4Hz (Toggle once every 0.25s)
    setFrequency(tim4, 4, 65000);
 8001a00:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8001a04:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001a50 <TIM4_IRQHandler+0xa8>
 8001a08:	4815      	ldr	r0, [pc, #84]	; (8001a60 <TIM4_IRQHandler+0xb8>)
 8001a0a:	f7ff fdb7 	bl	800157c <setFrequency>
    timSetOutCompareReg(tim4, 3, 65000);
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <TIM4_IRQHandler+0xbc>)
 8001a10:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e00e      	b.n	8001a36 <TIM4_IRQHandler+0x8e>
  }else if(i == 24){
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <TIM4_IRQHandler+0xc0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b18      	cmp	r3, #24
 8001a1e:	d10a      	bne.n	8001a36 <TIM4_IRQHandler+0x8e>
    //To achieve 4Hz, toggle rate should be 8Hz (Toggle once every 0.125s)
    setFrequency(tim4, 8, 65000);
 8001a20:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8001a24:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001a58 <TIM4_IRQHandler+0xb0>
 8001a28:	480d      	ldr	r0, [pc, #52]	; (8001a60 <TIM4_IRQHandler+0xb8>)
 8001a2a:	f7ff fda7 	bl	800157c <setFrequency>
    timSetOutCompareReg(tim4, 3, 65000);
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <TIM4_IRQHandler+0xbc>)
 8001a30:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a34:	601a      	str	r2, [r3, #0]
  }
  i++;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <TIM4_IRQHandler+0xc0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <TIM4_IRQHandler+0xc0>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	f3af 8000 	nop.w
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	40000000 	.word	0x40000000
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40100000 	.word	0x40100000
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	40200000 	.word	0x40200000
 8001a60:	40000800 	.word	0x40000800
 8001a64:	4000083c 	.word	0x4000083c
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	00000000 	.word	0x00000000

08001a70 <timerExp4TriggerAdcWithTimer>:

void  timerExp4TriggerAdcWithTimer(){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af02      	add	r7, sp, #8
  int channel[] = {0};
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
  rccUnresetAndEnableAdc(RCC_ADC1);
 8001a7a:	482f      	ldr	r0, [pc, #188]	; (8001b38 <timerExp4TriggerAdcWithTimer+0xc8>)
 8001a7c:	f7ff fc5e 	bl	800133c <rccUnresetAndEnableAdc>
  rccUnresetAndEnableGpio(RCC_GPIOA);
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff fbd7 	bl	8001234 <rccUnresetAndEnableGpio>
  rccUnresetAndEnableUsart(RCC_USART2);
 8001a86:	2011      	movs	r0, #17
 8001a88:	f7ff fbf0 	bl	800126c <rccUnresetAndEnableUsart>
  rccUnresetAndEnableTimer(RCC_TIM4);
 8001a8c:	482b      	ldr	r0, [pc, #172]	; (8001b3c <timerExp4TriggerAdcWithTimer+0xcc>)
 8001a8e:	f7ff fc1f 	bl	80012d0 <rccUnresetAndEnableTimer>

  gpioConfigurePin(gpioA, 0, GPIO_ANALOG_IN | GPIO_PUSH_PULL );  //       (PA0)
 8001a92:	2203      	movs	r2, #3
 8001a94:	2100      	movs	r1, #0
 8001a96:	482a      	ldr	r0, [pc, #168]	; (8001b40 <timerExp4TriggerAdcWithTimer+0xd0>)
 8001a98:	f7ff fb03 	bl	80010a2 <gpioConfigurePin>

  gpioConfigurePin(gpioA, 2, GPIO_ALT_FUNC | GPIO_FAST_SPEED | AF_7);  //USART2 (Rx)
 8001a9c:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <timerExp4TriggerAdcWithTimer+0xd4>)
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4827      	ldr	r0, [pc, #156]	; (8001b40 <timerExp4TriggerAdcWithTimer+0xd0>)
 8001aa2:	f7ff fafe 	bl	80010a2 <gpioConfigurePin>
  gpioConfigurePin(gpioA, 3, GPIO_ALT_FUNC | GPIO_FAST_SPEED | AF_7);  //       (Tx)
 8001aa6:	4a27      	ldr	r2, [pc, #156]	; (8001b44 <timerExp4TriggerAdcWithTimer+0xd4>)
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	4825      	ldr	r0, [pc, #148]	; (8001b40 <timerExp4TriggerAdcWithTimer+0xd0>)
 8001aac:	f7ff faf9 	bl	80010a2 <gpioConfigurePin>


  usartConfiguration(usart2, USART_TX_EN | USART_RX_EN | USART_9_BIT | USART_ODD_PARITY
 8001ab0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	a31c      	add	r3, pc, #112	; (adr r3, 8001b28 <timerExp4TriggerAdcWithTimer+0xb8>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	4822      	ldr	r0, [pc, #136]	; (8001b48 <timerExp4TriggerAdcWithTimer+0xd8>)
 8001abe:	f000 f8bb 	bl	8001c38 <usartConfiguration>
                          | USART_2_STOPBIT
                          | USART_EN,
                          115200);

  timerEventGenerationConfig(tim4, UPDATE_GEN);
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	4821      	ldr	r0, [pc, #132]	; (8001b4c <timerExp4TriggerAdcWithTimer+0xdc>)
 8001ac6:	f7ff fcba 	bl	800143e <timerEventGenerationConfig>

  timerCaptureCompareConfig(tim4, 4, CC4_OUT_EN | PWN_MOD_1);
 8001aca:	f04f 0260 	mov.w	r2, #96	; 0x60
 8001ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	481d      	ldr	r0, [pc, #116]	; (8001b4c <timerExp4TriggerAdcWithTimer+0xdc>)
 8001ad6:	f7ff fccc 	bl	8001472 <timerCaptureCompareConfig>

  setFrequency(tim4, 2000, 500);
 8001ada:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ade:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001b30 <timerExp4TriggerAdcWithTimer+0xc0>
 8001ae2:	481a      	ldr	r0, [pc, #104]	; (8001b4c <timerExp4TriggerAdcWithTimer+0xdc>)
 8001ae4:	f7ff fd4a 	bl	800157c <setFrequency>

  timSetOutCompareReg(tim4, 4, 250);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <timerExp4TriggerAdcWithTimer+0xe0>)
 8001aea:	22fa      	movs	r2, #250	; 0xfa
 8001aec:	601a      	str	r2, [r3, #0]

  adcSetChannelSequence(adc1, channel, 1);
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2201      	movs	r2, #1
 8001af2:	4619      	mov	r1, r3
 8001af4:	4817      	ldr	r0, [pc, #92]	; (8001b54 <timerExp4TriggerAdcWithTimer+0xe4>)
 8001af6:	f7ff fa4b 	bl	8000f90 <adcSetChannelSequence>

  nvicEnableIrq(18);
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <timerExp4TriggerAdcWithTimer+0xe8>)
 8001afc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b00:	601a      	str	r2, [r3, #0]

  adcConfiguration(adc1, ADC_CONVERTER_ON | REGULAR_CHN_START_CONVERT
 8001b02:	f04f 0220 	mov.w	r2, #32
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <timerExp4TriggerAdcWithTimer+0xec>)
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <timerExp4TriggerAdcWithTimer+0xe4>)
 8001b0a:	f7ff fa9d 	bl	8001048 <adcConfiguration>
                        | REGULAR_EXT_EVENT_SEL_TIM_4_CC4 | REGULAR_TRIG_DETECTION_RISING_EDGE | EOC_INT_EN | SET_EOC_BIT_AFTER_REGULAR_CONVERSION_ENDED);
  timerBasicConfig(tim4,  COUNTER_EN );
 8001b0e:	f04f 0201 	mov.w	r2, #1
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <timerExp4TriggerAdcWithTimer+0xdc>)
 8001b18:	f7ff fc32 	bl	8001380 <timerBasicConfig>
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	f3af 8000 	nop.w
 8001b28:	2000360c 	.word	0x2000360c
	...
 8001b34:	409f4000 	.word	0x409f4000
 8001b38:	00240008 	.word	0x00240008
 8001b3c:	00200002 	.word	0x00200002
 8001b40:	40020000 	.word	0x40020000
 8001b44:	00070202 	.word	0x00070202
 8001b48:	40004400 	.word	0x40004400
 8001b4c:	40000800 	.word	0x40000800
 8001b50:	40000840 	.word	0x40000840
 8001b54:	40012000 	.word	0x40012000
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	59000401 	.word	0x59000401

08001b60 <ADC_IRQHandler>:

void  ADC_IRQHandler(void){
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  //static  int i = 0;
  static  int convertedValues = 0;
  //while(!(adc1->SR && 0x2));
  convertedValues += adc1->DR;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <ADC_IRQHandler+0x50>)
 8001b66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <ADC_IRQHandler+0x54>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <ADC_IRQHandler+0x54>)
 8001b70:	6013      	str	r3, [r2, #0]
  adcCounter++;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <ADC_IRQHandler+0x58>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <ADC_IRQHandler+0x58>)
 8001b7a:	6013      	str	r3, [r2, #0]
  if(adcCounter == 400){
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <ADC_IRQHandler+0x58>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001b84:	d10f      	bne.n	8001ba6 <ADC_IRQHandler+0x46>
    adcValue = convertedValues / 400;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <ADC_IRQHandler+0x54>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <ADC_IRQHandler+0x5c>)
 8001b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b90:	11d2      	asrs	r2, r2, #7
 8001b92:	17db      	asrs	r3, r3, #31
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <ADC_IRQHandler+0x60>)
 8001b98:	6013      	str	r3, [r2, #0]
    adcCounter = 0;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <ADC_IRQHandler+0x58>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
    convertedValues = 0;
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <ADC_IRQHandler+0x54>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
    //sendToUsart(usart2, convertIntToAscii(adcValue));
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40012000 	.word	0x40012000
 8001bb4:	20000204 	.word	0x20000204
 8001bb8:	20000200 	.word	0x20000200
 8001bbc:	51eb851f 	.word	0x51eb851f
 8001bc0:	200001fc 	.word	0x200001fc
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <readAndPrintAdc>:

void  readAndPrintAdc(void){
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
  static int previousValue = 0;
  float voltage;
  if(adcCounter == 0){
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <readAndPrintAdc+0x60>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d120      	bne.n	8001c18 <readAndPrintAdc+0x50>
    voltage = (3.3/4096.0) * adcValue;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <readAndPrintAdc+0x64>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcaa 	bl	8000534 <__aeabi_i2d>
 8001be0:	a30f      	add	r3, pc, #60	; (adr r3, 8001c20 <readAndPrintAdc+0x58>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fd0f 	bl	8000608 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7ff f801 	bl	8000bf8 <__aeabi_d2f>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	607b      	str	r3, [r7, #4]
    printf("ADC value : %d, voltage = %f\n\r", adcValue, voltage);
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <readAndPrintAdc+0x64>)
 8001bfc:	681c      	ldr	r4, [r3, #0]
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe fcaa 	bl	8000558 <__aeabi_f2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4621      	mov	r1, r4
 8001c0a:	4809      	ldr	r0, [pc, #36]	; (8001c30 <readAndPrintAdc+0x68>)
 8001c0c:	f001 fc9e 	bl	800354c <iprintf>
    adcValue = previousValue;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <readAndPrintAdc+0x6c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <readAndPrintAdc+0x64>)
 8001c16:	6013      	str	r3, [r2, #0]
  }
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}
 8001c20:	66666666 	.word	0x66666666
 8001c24:	3f4a6666 	.word	0x3f4a6666
 8001c28:	20000200 	.word	0x20000200
 8001c2c:	200001fc 	.word	0x200001fc
 8001c30:	080056a8 	.word	0x080056a8
 8001c34:	20000208 	.word	0x20000208

08001c38 <usartConfiguration>:
    while(!isTransmissionComplete(usart));
    }
  free(msg);
}

void  usartConfiguration(UsartReg *usart, UsartConfig config, int baudrate){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	e9c7 2300 	strd	r2, r3, [r7]
  usartSetBaudRate(usart, baudrate);
 8001c44:	69b9      	ldr	r1, [r7, #24]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f7ff fcd2 	bl	80015f0 <usartSetBaudRate>
  usartConfigure(usart,config);
 8001c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7ff fd39 	bl	80016c8 <usartConfigure>
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c62:	b672      	cpsid	i
}
 8001c64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <Error_Handler+0x8>

08001c68 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UsartReg *gHuart;

void RetargetInit(UsartReg *usart) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  gHuart = usart;
 8001c70:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <RetargetInit+0x28>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <RetargetInit+0x2c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6898      	ldr	r0, [r3, #8]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2202      	movs	r2, #2
 8001c80:	2100      	movs	r1, #0
 8001c82:	f001 fc8b 	bl	800359c <setvbuf>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000218 	.word	0x20000218
 8001c94:	20000010 	.word	0x20000010

08001c98 <_isatty>:

int _isatty(int fd) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db04      	blt.n	8001cb0 <_isatty+0x18>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	dc01      	bgt.n	8001cb0 <_isatty+0x18>
    return 1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e005      	b.n	8001cbc <_isatty+0x24>

  errno = EBADF;
 8001cb0:	f000 fefe 	bl	8002ab0 <__errno>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2209      	movs	r2, #9
 8001cb8:	601a      	str	r2, [r3, #0]
  return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_write>:

int _write(int fd, char* ptr, int len) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  Status status;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d002      	beq.n	8001cdc <_write+0x18>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d10e      	bne.n	8001cfa <_write+0x36>
    status = usartTransmit(gHuart, ptr);
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <_write+0x4c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fd9c 	bl	8001820 <usartTransmit>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	75fb      	strb	r3, [r7, #23]
    if (status == OK)
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <_write+0x32>
      return len;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	e008      	b.n	8001d08 <_write+0x44>
    else
      return EIO;
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	e006      	b.n	8001d08 <_write+0x44>
  }
  errno = EBADF;
 8001cfa:	f000 fed9 	bl	8002ab0 <__errno>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2209      	movs	r2, #9
 8001d02:	601a      	str	r2, [r3, #0]
  return -1;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000218 	.word	0x20000218

08001d14 <_close>:

int _close(int fd) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db04      	blt.n	8001d2c <_close+0x18>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	dc01      	bgt.n	8001d2c <_close+0x18>
    return 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e006      	b.n	8001d3a <_close+0x26>

  errno = EBADF;
 8001d2c:	f000 fec0 	bl	8002ab0 <__errno>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2209      	movs	r2, #9
 8001d34:	601a      	str	r2, [r3, #0]
  return -1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001d4e:	f000 feaf 	bl	8002ab0 <__errno>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2209      	movs	r2, #9
 8001d56:	601a      	str	r2, [r3, #0]
  return -1;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_read>:

int _read(int fd, char* ptr, int len) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  Status status;

  if (fd == STDIN_FILENO) {
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10e      	bne.n	8001d94 <_read+0x30>
    status = readFromUsart(gHuart, ptr);
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <_read+0x48>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fd7b 	bl	8001878 <readFromUsart>
 8001d82:	4603      	mov	r3, r0
 8001d84:	75fb      	strb	r3, [r7, #23]
    if (status == OK)
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <_read+0x2c>
      return 1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e008      	b.n	8001da2 <_read+0x3e>
    else
      return EIO;
 8001d90:	2305      	movs	r3, #5
 8001d92:	e006      	b.n	8001da2 <_read+0x3e>
  }
  errno = EBADF;
 8001d94:	f000 fe8c 	bl	8002ab0 <__errno>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2209      	movs	r2, #9
 8001d9c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000218 	.word	0x20000218

08001db0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	db08      	blt.n	8001dd2 <_fstat+0x22>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	dc05      	bgt.n	8001dd2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dcc:	605a      	str	r2, [r3, #4]
    return 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e005      	b.n	8001dde <_fstat+0x2e>
  }

  errno = EBADF;
 8001dd2:	f000 fe6d 	bl	8002ab0 <__errno>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2209      	movs	r2, #9
 8001dda:	601a      	str	r2, [r3, #0]
  return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_MspInit+0x4c>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <HAL_MspInit+0x4c>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_MspInit+0x4c>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_MspInit+0x4c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <HAL_MspInit+0x4c>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_MspInit+0x4c>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <NMI_Handler+0x4>

08001e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <BusFault_Handler+0x4>

08001e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <UsageFault_Handler+0x4>

08001e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e84:	f000 f8c6 	bl	8002014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f000 fdf8 	bl	8002ab0 <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20020000 	.word	0x20020000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	2000020c 	.word	0x2000020c
 8001ef4:	20000230 	.word	0x20000230

08001ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f22:	490e      	ldr	r1, [pc, #56]	; (8001f5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f38:	4c0b      	ldr	r4, [pc, #44]	; (8001f68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f46:	f7ff ffd7 	bl	8001ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f000 fdb7 	bl	8002abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4e:	f7ff fcb3 	bl	80018b8 <main>
  bx  lr    
 8001f52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f60:	08005ad4 	.word	0x08005ad4
  ldr r2, =_sbss
 8001f64:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f68:	20000230 	.word	0x20000230

08001f6c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <DMA1_Stream0_IRQHandler>
	...

08001f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <HAL_Init+0x40>)
 8001f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_Init+0x40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_Init+0x40>)
 8001f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_Init+0x40>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_Init+0x40>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f000 f90d 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 f808 	bl	8001fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa4:	f7ff ff20 	bl	8001de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023c00 	.word	0x40023c00

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_InitTick+0x54>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_InitTick+0x58>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f917 	bl	8002206 <HAL_SYSTICK_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00e      	b.n	8002000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d80a      	bhi.n	8001ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f000 f8ed 	bl	80021ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff4:	4a06      	ldr	r2, [pc, #24]	; (8002010 <HAL_InitTick+0x5c>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e000      	b.n	8002000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000004 	.word	0x20000004
 800200c:	2000000c 	.word	0x2000000c
 8002010:	20000008 	.word	0x20000008

08002014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_IncTick+0x20>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x24>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <HAL_IncTick+0x24>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	2000000c 	.word	0x2000000c
 8002038:	2000021c 	.word	0x2000021c

0800203c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return uwTick;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_GetTick+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	2000021c 	.word	0x2000021c

08002054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800207c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002086:	4a04      	ldr	r2, [pc, #16]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	60d3      	str	r3, [r2, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f7ff ff8e 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff47 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff5c 	bl	800209c <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff8e 	bl	800210c <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5d 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffb0 	bl	8002174 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e264      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d075      	beq.n	800232a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223e:	4ba3      	ldr	r3, [pc, #652]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b04      	cmp	r3, #4
 8002248:	d00c      	beq.n	8002264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224a:	4ba0      	ldr	r3, [pc, #640]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002252:	2b08      	cmp	r3, #8
 8002254:	d112      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4b9d      	ldr	r3, [pc, #628]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002262:	d10b      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	4b99      	ldr	r3, [pc, #612]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d05b      	beq.n	8002328 <HAL_RCC_OscConfig+0x108>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d157      	bne.n	8002328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e23f      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x74>
 8002286:	4b91      	ldr	r3, [pc, #580]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a90      	ldr	r2, [pc, #576]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e01d      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x98>
 800229e:	4b8b      	ldr	r3, [pc, #556]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a8a      	ldr	r2, [pc, #552]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b88      	ldr	r3, [pc, #544]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a87      	ldr	r2, [pc, #540]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 80022b8:	4b84      	ldr	r3, [pc, #528]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a83      	ldr	r2, [pc, #524]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b81      	ldr	r3, [pc, #516]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a80      	ldr	r2, [pc, #512]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff feb0 	bl	800203c <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e0:	f7ff feac 	bl	800203c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e204      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0xc0>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7ff fe9c 	bl	800203c <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7ff fe98 	bl	800203c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1f0      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	4b6c      	ldr	r3, [pc, #432]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0xe8>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d063      	beq.n	80023fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002336:	4b65      	ldr	r3, [pc, #404]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002342:	4b62      	ldr	r3, [pc, #392]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800234a:	2b08      	cmp	r3, #8
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234e:	4b5f      	ldr	r3, [pc, #380]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	4b5c      	ldr	r3, [pc, #368]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e1c4      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b56      	ldr	r3, [pc, #344]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4952      	ldr	r1, [pc, #328]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	e03a      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002390:	4b4f      	ldr	r3, [pc, #316]	; (80024d0 <HAL_RCC_OscConfig+0x2b0>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff fe51 	bl	800203c <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239e:	f7ff fe4d 	bl	800203c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1a5      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	4b46      	ldr	r3, [pc, #280]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b43      	ldr	r3, [pc, #268]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4940      	ldr	r1, [pc, #256]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <HAL_RCC_OscConfig+0x2b0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7ff fe30 	bl	800203c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e0:	f7ff fe2c 	bl	800203c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e184      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	4b36      	ldr	r3, [pc, #216]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d030      	beq.n	800246c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <HAL_RCC_OscConfig+0x2b4>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff fe10 	bl	800203c <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7ff fe0c 	bl	800203c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e164      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x200>
 800243e:	e015      	b.n	800246c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_RCC_OscConfig+0x2b4>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff fdf9 	bl	800203c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff fdf5 	bl	800203c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e14d      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80a0 	beq.w	80025ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10f      	bne.n	80024aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002498:	6413      	str	r3, [r2, #64]	; 0x40
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_RCC_OscConfig+0x2ac>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_OscConfig+0x2b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d121      	bne.n	80024fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RCC_OscConfig+0x2b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_RCC_OscConfig+0x2b8>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c2:	f7ff fdbb 	bl	800203c <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	e011      	b.n	80024ee <HAL_RCC_OscConfig+0x2ce>
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	42470000 	.word	0x42470000
 80024d4:	42470e80 	.word	0x42470e80
 80024d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024dc:	f7ff fdae 	bl	800203c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e106      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ee:	4b85      	ldr	r3, [pc, #532]	; (8002704 <HAL_RCC_OscConfig+0x4e4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x2f0>
 8002502:	4b81      	ldr	r3, [pc, #516]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	4a80      	ldr	r2, [pc, #512]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6713      	str	r3, [r2, #112]	; 0x70
 800250e:	e01c      	b.n	800254a <HAL_RCC_OscConfig+0x32a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b05      	cmp	r3, #5
 8002516:	d10c      	bne.n	8002532 <HAL_RCC_OscConfig+0x312>
 8002518:	4b7b      	ldr	r3, [pc, #492]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a7a      	ldr	r2, [pc, #488]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
 8002524:	4b78      	ldr	r3, [pc, #480]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4a77      	ldr	r2, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6713      	str	r3, [r2, #112]	; 0x70
 8002530:	e00b      	b.n	800254a <HAL_RCC_OscConfig+0x32a>
 8002532:	4b75      	ldr	r3, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	4a74      	ldr	r2, [pc, #464]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	6713      	str	r3, [r2, #112]	; 0x70
 800253e:	4b72      	ldr	r3, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	4a71      	ldr	r2, [pc, #452]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002544:	f023 0304 	bic.w	r3, r3, #4
 8002548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d015      	beq.n	800257e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7ff fd73 	bl	800203c <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7ff fd6f 	bl	800203c <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	; 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0c5      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	4b65      	ldr	r3, [pc, #404]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ee      	beq.n	800255a <HAL_RCC_OscConfig+0x33a>
 800257c:	e014      	b.n	80025a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257e:	f7ff fd5d 	bl	800203c <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7ff fd59 	bl	800203c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e0af      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259c:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1ee      	bne.n	8002586 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d105      	bne.n	80025ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ae:	4b56      	ldr	r3, [pc, #344]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	4a55      	ldr	r2, [pc, #340]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 80025b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 809b 	beq.w	80026fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d05c      	beq.n	800268a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d141      	bne.n	800265c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d8:	4b4c      	ldr	r3, [pc, #304]	; (800270c <HAL_RCC_OscConfig+0x4ec>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7ff fd2d 	bl	800203c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e6:	f7ff fd29 	bl	800203c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e081      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f8:	4b43      	ldr	r3, [pc, #268]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	019b      	lsls	r3, r3, #6
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	3b01      	subs	r3, #1
 800261e:	041b      	lsls	r3, r3, #16
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	4937      	ldr	r1, [pc, #220]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_RCC_OscConfig+0x4ec>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff fd02 	bl	800203c <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263c:	f7ff fcfe 	bl	800203c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e056      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264e:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x41c>
 800265a:	e04e      	b.n	80026fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <HAL_RCC_OscConfig+0x4ec>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002662:	f7ff fceb 	bl	800203c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7ff fce7 	bl	800203c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e03f      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x44a>
 8002688:	e037      	b.n	80026fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e032      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <HAL_RCC_OscConfig+0x4e8>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d028      	beq.n	80026f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d121      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d11a      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c6:	4013      	ands	r3, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d111      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	3b01      	subs	r3, #1
 80026e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40007000 	.word	0x40007000
 8002708:	40023800 	.word	0x40023800
 800270c:	42470060 	.word	0x42470060

08002710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0cc      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d90c      	bls.n	800274c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d044      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e067      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b37      	ldr	r3, [pc, #220]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4934      	ldr	r1, [pc, #208]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7ff fc1c 	bl	800203c <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7ff fc18 	bl	800203c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e04f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d20c      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fb7c 	bl	8001fb4 <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	080056c8 	.word	0x080056c8
 80028d4:	20000004 	.word	0x20000004
 80028d8:	20000008 	.word	0x20000008

080028dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028e2:	2100      	movs	r1, #0
 80028e4:	6079      	str	r1, [r7, #4]
 80028e6:	2100      	movs	r1, #0
 80028e8:	60f9      	str	r1, [r7, #12]
 80028ea:	2100      	movs	r1, #0
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028ee:	2100      	movs	r1, #0
 80028f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f2:	4952      	ldr	r1, [pc, #328]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x160>)
 80028f4:	6889      	ldr	r1, [r1, #8]
 80028f6:	f001 010c 	and.w	r1, r1, #12
 80028fa:	2908      	cmp	r1, #8
 80028fc:	d00d      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x3e>
 80028fe:	2908      	cmp	r1, #8
 8002900:	f200 8094 	bhi.w	8002a2c <HAL_RCC_GetSysClockFreq+0x150>
 8002904:	2900      	cmp	r1, #0
 8002906:	d002      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0x32>
 8002908:	2904      	cmp	r1, #4
 800290a:	d003      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x38>
 800290c:	e08e      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800290e:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x164>)
 8002910:	60bb      	str	r3, [r7, #8]
       break;
 8002912:	e08e      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002914:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x168>)
 8002916:	60bb      	str	r3, [r7, #8]
      break;
 8002918:	e08b      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800291a:	4948      	ldr	r1, [pc, #288]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x160>)
 800291c:	6849      	ldr	r1, [r1, #4]
 800291e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002922:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002924:	4945      	ldr	r1, [pc, #276]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002926:	6849      	ldr	r1, [r1, #4]
 8002928:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800292c:	2900      	cmp	r1, #0
 800292e:	d024      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002930:	4942      	ldr	r1, [pc, #264]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002932:	6849      	ldr	r1, [r1, #4]
 8002934:	0989      	lsrs	r1, r1, #6
 8002936:	4608      	mov	r0, r1
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002940:	f04f 0500 	mov.w	r5, #0
 8002944:	ea00 0204 	and.w	r2, r0, r4
 8002948:	ea01 0305 	and.w	r3, r1, r5
 800294c:	493d      	ldr	r1, [pc, #244]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x168>)
 800294e:	fb01 f003 	mul.w	r0, r1, r3
 8002952:	2100      	movs	r1, #0
 8002954:	fb01 f102 	mul.w	r1, r1, r2
 8002958:	1844      	adds	r4, r0, r1
 800295a:	493a      	ldr	r1, [pc, #232]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x168>)
 800295c:	fba2 0101 	umull	r0, r1, r2, r1
 8002960:	1863      	adds	r3, r4, r1
 8002962:	4619      	mov	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	461a      	mov	r2, r3
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	f7fe f994 	bl	8000c98 <__aeabi_uldivmod>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4613      	mov	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e04a      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297a:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x160>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	099b      	lsrs	r3, r3, #6
 8002980:	461a      	mov	r2, r3
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	f240 10ff 	movw	r0, #511	; 0x1ff
 800298a:	f04f 0100 	mov.w	r1, #0
 800298e:	ea02 0400 	and.w	r4, r2, r0
 8002992:	ea03 0501 	and.w	r5, r3, r1
 8002996:	4620      	mov	r0, r4
 8002998:	4629      	mov	r1, r5
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	014b      	lsls	r3, r1, #5
 80029a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029a8:	0142      	lsls	r2, r0, #5
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	1b00      	subs	r0, r0, r4
 80029b0:	eb61 0105 	sbc.w	r1, r1, r5
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	018b      	lsls	r3, r1, #6
 80029be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029c2:	0182      	lsls	r2, r0, #6
 80029c4:	1a12      	subs	r2, r2, r0
 80029c6:	eb63 0301 	sbc.w	r3, r3, r1
 80029ca:	f04f 0000 	mov.w	r0, #0
 80029ce:	f04f 0100 	mov.w	r1, #0
 80029d2:	00d9      	lsls	r1, r3, #3
 80029d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029d8:	00d0      	lsls	r0, r2, #3
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	1912      	adds	r2, r2, r4
 80029e0:	eb45 0303 	adc.w	r3, r5, r3
 80029e4:	f04f 0000 	mov.w	r0, #0
 80029e8:	f04f 0100 	mov.w	r1, #0
 80029ec:	0299      	lsls	r1, r3, #10
 80029ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029f2:	0290      	lsls	r0, r2, #10
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	461a      	mov	r2, r3
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	f7fe f948 	bl	8000c98 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	60bb      	str	r3, [r7, #8]
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a2e:	60bb      	str	r3, [r7, #8]
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	68bb      	ldr	r3, [r7, #8]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	017d7840 	.word	0x017d7840

08002a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a64:	f7ff fff0 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	0a9b      	lsrs	r3, r3, #10
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4903      	ldr	r1, [pc, #12]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	080056d8 	.word	0x080056d8

08002a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a8c:	f7ff ffdc 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	0b5b      	lsrs	r3, r3, #13
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	4903      	ldr	r1, [pc, #12]	; (8002aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	080056d8 	.word	0x080056d8

08002ab0 <__errno>:
 8002ab0:	4b01      	ldr	r3, [pc, #4]	; (8002ab8 <__errno+0x8>)
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000010 	.word	0x20000010

08002abc <__libc_init_array>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	4d0d      	ldr	r5, [pc, #52]	; (8002af4 <__libc_init_array+0x38>)
 8002ac0:	4c0d      	ldr	r4, [pc, #52]	; (8002af8 <__libc_init_array+0x3c>)
 8002ac2:	1b64      	subs	r4, r4, r5
 8002ac4:	10a4      	asrs	r4, r4, #2
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	42a6      	cmp	r6, r4
 8002aca:	d109      	bne.n	8002ae0 <__libc_init_array+0x24>
 8002acc:	4d0b      	ldr	r5, [pc, #44]	; (8002afc <__libc_init_array+0x40>)
 8002ace:	4c0c      	ldr	r4, [pc, #48]	; (8002b00 <__libc_init_array+0x44>)
 8002ad0:	f002 fdde 	bl	8005690 <_init>
 8002ad4:	1b64      	subs	r4, r4, r5
 8002ad6:	10a4      	asrs	r4, r4, #2
 8002ad8:	2600      	movs	r6, #0
 8002ada:	42a6      	cmp	r6, r4
 8002adc:	d105      	bne.n	8002aea <__libc_init_array+0x2e>
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
 8002ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae4:	4798      	blx	r3
 8002ae6:	3601      	adds	r6, #1
 8002ae8:	e7ee      	b.n	8002ac8 <__libc_init_array+0xc>
 8002aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aee:	4798      	blx	r3
 8002af0:	3601      	adds	r6, #1
 8002af2:	e7f2      	b.n	8002ada <__libc_init_array+0x1e>
 8002af4:	08005acc 	.word	0x08005acc
 8002af8:	08005acc 	.word	0x08005acc
 8002afc:	08005acc 	.word	0x08005acc
 8002b00:	08005ad0 	.word	0x08005ad0

08002b04 <malloc>:
 8002b04:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <malloc+0xc>)
 8002b06:	4601      	mov	r1, r0
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	f000 b85b 	b.w	8002bc4 <_malloc_r>
 8002b0e:	bf00      	nop
 8002b10:	20000010 	.word	0x20000010

08002b14 <memset>:
 8002b14:	4402      	add	r2, r0
 8002b16:	4603      	mov	r3, r0
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memset+0xa>
 8002b1c:	4770      	bx	lr
 8002b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b22:	e7f9      	b.n	8002b18 <memset+0x4>

08002b24 <_free_r>:
 8002b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b26:	2900      	cmp	r1, #0
 8002b28:	d048      	beq.n	8002bbc <_free_r+0x98>
 8002b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b2e:	9001      	str	r0, [sp, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f1a1 0404 	sub.w	r4, r1, #4
 8002b36:	bfb8      	it	lt
 8002b38:	18e4      	addlt	r4, r4, r3
 8002b3a:	f001 fe9f 	bl	800487c <__malloc_lock>
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <_free_r+0x9c>)
 8002b40:	9801      	ldr	r0, [sp, #4]
 8002b42:	6813      	ldr	r3, [r2, #0]
 8002b44:	4615      	mov	r5, r2
 8002b46:	b933      	cbnz	r3, 8002b56 <_free_r+0x32>
 8002b48:	6063      	str	r3, [r4, #4]
 8002b4a:	6014      	str	r4, [r2, #0]
 8002b4c:	b003      	add	sp, #12
 8002b4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b52:	f001 be99 	b.w	8004888 <__malloc_unlock>
 8002b56:	42a3      	cmp	r3, r4
 8002b58:	d90b      	bls.n	8002b72 <_free_r+0x4e>
 8002b5a:	6821      	ldr	r1, [r4, #0]
 8002b5c:	1862      	adds	r2, r4, r1
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	bf04      	itt	eq
 8002b62:	681a      	ldreq	r2, [r3, #0]
 8002b64:	685b      	ldreq	r3, [r3, #4]
 8002b66:	6063      	str	r3, [r4, #4]
 8002b68:	bf04      	itt	eq
 8002b6a:	1852      	addeq	r2, r2, r1
 8002b6c:	6022      	streq	r2, [r4, #0]
 8002b6e:	602c      	str	r4, [r5, #0]
 8002b70:	e7ec      	b.n	8002b4c <_free_r+0x28>
 8002b72:	461a      	mov	r2, r3
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	b10b      	cbz	r3, 8002b7c <_free_r+0x58>
 8002b78:	42a3      	cmp	r3, r4
 8002b7a:	d9fa      	bls.n	8002b72 <_free_r+0x4e>
 8002b7c:	6811      	ldr	r1, [r2, #0]
 8002b7e:	1855      	adds	r5, r2, r1
 8002b80:	42a5      	cmp	r5, r4
 8002b82:	d10b      	bne.n	8002b9c <_free_r+0x78>
 8002b84:	6824      	ldr	r4, [r4, #0]
 8002b86:	4421      	add	r1, r4
 8002b88:	1854      	adds	r4, r2, r1
 8002b8a:	42a3      	cmp	r3, r4
 8002b8c:	6011      	str	r1, [r2, #0]
 8002b8e:	d1dd      	bne.n	8002b4c <_free_r+0x28>
 8002b90:	681c      	ldr	r4, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	6053      	str	r3, [r2, #4]
 8002b96:	4421      	add	r1, r4
 8002b98:	6011      	str	r1, [r2, #0]
 8002b9a:	e7d7      	b.n	8002b4c <_free_r+0x28>
 8002b9c:	d902      	bls.n	8002ba4 <_free_r+0x80>
 8002b9e:	230c      	movs	r3, #12
 8002ba0:	6003      	str	r3, [r0, #0]
 8002ba2:	e7d3      	b.n	8002b4c <_free_r+0x28>
 8002ba4:	6825      	ldr	r5, [r4, #0]
 8002ba6:	1961      	adds	r1, r4, r5
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	bf04      	itt	eq
 8002bac:	6819      	ldreq	r1, [r3, #0]
 8002bae:	685b      	ldreq	r3, [r3, #4]
 8002bb0:	6063      	str	r3, [r4, #4]
 8002bb2:	bf04      	itt	eq
 8002bb4:	1949      	addeq	r1, r1, r5
 8002bb6:	6021      	streq	r1, [r4, #0]
 8002bb8:	6054      	str	r4, [r2, #4]
 8002bba:	e7c7      	b.n	8002b4c <_free_r+0x28>
 8002bbc:	b003      	add	sp, #12
 8002bbe:	bd30      	pop	{r4, r5, pc}
 8002bc0:	20000210 	.word	0x20000210

08002bc4 <_malloc_r>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	1ccd      	adds	r5, r1, #3
 8002bc8:	f025 0503 	bic.w	r5, r5, #3
 8002bcc:	3508      	adds	r5, #8
 8002bce:	2d0c      	cmp	r5, #12
 8002bd0:	bf38      	it	cc
 8002bd2:	250c      	movcc	r5, #12
 8002bd4:	2d00      	cmp	r5, #0
 8002bd6:	4606      	mov	r6, r0
 8002bd8:	db01      	blt.n	8002bde <_malloc_r+0x1a>
 8002bda:	42a9      	cmp	r1, r5
 8002bdc:	d903      	bls.n	8002be6 <_malloc_r+0x22>
 8002bde:	230c      	movs	r3, #12
 8002be0:	6033      	str	r3, [r6, #0]
 8002be2:	2000      	movs	r0, #0
 8002be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002be6:	f001 fe49 	bl	800487c <__malloc_lock>
 8002bea:	4921      	ldr	r1, [pc, #132]	; (8002c70 <_malloc_r+0xac>)
 8002bec:	680a      	ldr	r2, [r1, #0]
 8002bee:	4614      	mov	r4, r2
 8002bf0:	b99c      	cbnz	r4, 8002c1a <_malloc_r+0x56>
 8002bf2:	4f20      	ldr	r7, [pc, #128]	; (8002c74 <_malloc_r+0xb0>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b923      	cbnz	r3, 8002c02 <_malloc_r+0x3e>
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f000 fcbe 	bl	800357c <_sbrk_r>
 8002c00:	6038      	str	r0, [r7, #0]
 8002c02:	4629      	mov	r1, r5
 8002c04:	4630      	mov	r0, r6
 8002c06:	f000 fcb9 	bl	800357c <_sbrk_r>
 8002c0a:	1c43      	adds	r3, r0, #1
 8002c0c:	d123      	bne.n	8002c56 <_malloc_r+0x92>
 8002c0e:	230c      	movs	r3, #12
 8002c10:	6033      	str	r3, [r6, #0]
 8002c12:	4630      	mov	r0, r6
 8002c14:	f001 fe38 	bl	8004888 <__malloc_unlock>
 8002c18:	e7e3      	b.n	8002be2 <_malloc_r+0x1e>
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	1b5b      	subs	r3, r3, r5
 8002c1e:	d417      	bmi.n	8002c50 <_malloc_r+0x8c>
 8002c20:	2b0b      	cmp	r3, #11
 8002c22:	d903      	bls.n	8002c2c <_malloc_r+0x68>
 8002c24:	6023      	str	r3, [r4, #0]
 8002c26:	441c      	add	r4, r3
 8002c28:	6025      	str	r5, [r4, #0]
 8002c2a:	e004      	b.n	8002c36 <_malloc_r+0x72>
 8002c2c:	6863      	ldr	r3, [r4, #4]
 8002c2e:	42a2      	cmp	r2, r4
 8002c30:	bf0c      	ite	eq
 8002c32:	600b      	streq	r3, [r1, #0]
 8002c34:	6053      	strne	r3, [r2, #4]
 8002c36:	4630      	mov	r0, r6
 8002c38:	f001 fe26 	bl	8004888 <__malloc_unlock>
 8002c3c:	f104 000b 	add.w	r0, r4, #11
 8002c40:	1d23      	adds	r3, r4, #4
 8002c42:	f020 0007 	bic.w	r0, r0, #7
 8002c46:	1ac2      	subs	r2, r0, r3
 8002c48:	d0cc      	beq.n	8002be4 <_malloc_r+0x20>
 8002c4a:	1a1b      	subs	r3, r3, r0
 8002c4c:	50a3      	str	r3, [r4, r2]
 8002c4e:	e7c9      	b.n	8002be4 <_malloc_r+0x20>
 8002c50:	4622      	mov	r2, r4
 8002c52:	6864      	ldr	r4, [r4, #4]
 8002c54:	e7cc      	b.n	8002bf0 <_malloc_r+0x2c>
 8002c56:	1cc4      	adds	r4, r0, #3
 8002c58:	f024 0403 	bic.w	r4, r4, #3
 8002c5c:	42a0      	cmp	r0, r4
 8002c5e:	d0e3      	beq.n	8002c28 <_malloc_r+0x64>
 8002c60:	1a21      	subs	r1, r4, r0
 8002c62:	4630      	mov	r0, r6
 8002c64:	f000 fc8a 	bl	800357c <_sbrk_r>
 8002c68:	3001      	adds	r0, #1
 8002c6a:	d1dd      	bne.n	8002c28 <_malloc_r+0x64>
 8002c6c:	e7cf      	b.n	8002c0e <_malloc_r+0x4a>
 8002c6e:	bf00      	nop
 8002c70:	20000210 	.word	0x20000210
 8002c74:	20000214 	.word	0x20000214

08002c78 <__cvt>:
 8002c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7c:	ec55 4b10 	vmov	r4, r5, d0
 8002c80:	2d00      	cmp	r5, #0
 8002c82:	460e      	mov	r6, r1
 8002c84:	4619      	mov	r1, r3
 8002c86:	462b      	mov	r3, r5
 8002c88:	bfbb      	ittet	lt
 8002c8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002c8e:	461d      	movlt	r5, r3
 8002c90:	2300      	movge	r3, #0
 8002c92:	232d      	movlt	r3, #45	; 0x2d
 8002c94:	700b      	strb	r3, [r1, #0]
 8002c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002c9c:	4691      	mov	r9, r2
 8002c9e:	f023 0820 	bic.w	r8, r3, #32
 8002ca2:	bfbc      	itt	lt
 8002ca4:	4622      	movlt	r2, r4
 8002ca6:	4614      	movlt	r4, r2
 8002ca8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002cac:	d005      	beq.n	8002cba <__cvt+0x42>
 8002cae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002cb2:	d100      	bne.n	8002cb6 <__cvt+0x3e>
 8002cb4:	3601      	adds	r6, #1
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	e000      	b.n	8002cbc <__cvt+0x44>
 8002cba:	2103      	movs	r1, #3
 8002cbc:	ab03      	add	r3, sp, #12
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	ab02      	add	r3, sp, #8
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	ec45 4b10 	vmov	d0, r4, r5
 8002cc8:	4653      	mov	r3, sl
 8002cca:	4632      	mov	r2, r6
 8002ccc:	f000 fdb8 	bl	8003840 <_dtoa_r>
 8002cd0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002cd4:	4607      	mov	r7, r0
 8002cd6:	d102      	bne.n	8002cde <__cvt+0x66>
 8002cd8:	f019 0f01 	tst.w	r9, #1
 8002cdc:	d022      	beq.n	8002d24 <__cvt+0xac>
 8002cde:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ce2:	eb07 0906 	add.w	r9, r7, r6
 8002ce6:	d110      	bne.n	8002d0a <__cvt+0x92>
 8002ce8:	783b      	ldrb	r3, [r7, #0]
 8002cea:	2b30      	cmp	r3, #48	; 0x30
 8002cec:	d10a      	bne.n	8002d04 <__cvt+0x8c>
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd feef 	bl	8000ad8 <__aeabi_dcmpeq>
 8002cfa:	b918      	cbnz	r0, 8002d04 <__cvt+0x8c>
 8002cfc:	f1c6 0601 	rsb	r6, r6, #1
 8002d00:	f8ca 6000 	str.w	r6, [sl]
 8002d04:	f8da 3000 	ldr.w	r3, [sl]
 8002d08:	4499      	add	r9, r3
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	4620      	mov	r0, r4
 8002d10:	4629      	mov	r1, r5
 8002d12:	f7fd fee1 	bl	8000ad8 <__aeabi_dcmpeq>
 8002d16:	b108      	cbz	r0, 8002d1c <__cvt+0xa4>
 8002d18:	f8cd 900c 	str.w	r9, [sp, #12]
 8002d1c:	2230      	movs	r2, #48	; 0x30
 8002d1e:	9b03      	ldr	r3, [sp, #12]
 8002d20:	454b      	cmp	r3, r9
 8002d22:	d307      	bcc.n	8002d34 <__cvt+0xbc>
 8002d24:	9b03      	ldr	r3, [sp, #12]
 8002d26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d28:	1bdb      	subs	r3, r3, r7
 8002d2a:	4638      	mov	r0, r7
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	b004      	add	sp, #16
 8002d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d34:	1c59      	adds	r1, r3, #1
 8002d36:	9103      	str	r1, [sp, #12]
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e7f0      	b.n	8002d1e <__cvt+0xa6>

08002d3c <__exponent>:
 8002d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2900      	cmp	r1, #0
 8002d42:	bfb8      	it	lt
 8002d44:	4249      	neglt	r1, r1
 8002d46:	f803 2b02 	strb.w	r2, [r3], #2
 8002d4a:	bfb4      	ite	lt
 8002d4c:	222d      	movlt	r2, #45	; 0x2d
 8002d4e:	222b      	movge	r2, #43	; 0x2b
 8002d50:	2909      	cmp	r1, #9
 8002d52:	7042      	strb	r2, [r0, #1]
 8002d54:	dd2a      	ble.n	8002dac <__exponent+0x70>
 8002d56:	f10d 0407 	add.w	r4, sp, #7
 8002d5a:	46a4      	mov	ip, r4
 8002d5c:	270a      	movs	r7, #10
 8002d5e:	46a6      	mov	lr, r4
 8002d60:	460a      	mov	r2, r1
 8002d62:	fb91 f6f7 	sdiv	r6, r1, r7
 8002d66:	fb07 1516 	mls	r5, r7, r6, r1
 8002d6a:	3530      	adds	r5, #48	; 0x30
 8002d6c:	2a63      	cmp	r2, #99	; 0x63
 8002d6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002d72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002d76:	4631      	mov	r1, r6
 8002d78:	dcf1      	bgt.n	8002d5e <__exponent+0x22>
 8002d7a:	3130      	adds	r1, #48	; 0x30
 8002d7c:	f1ae 0502 	sub.w	r5, lr, #2
 8002d80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002d84:	1c44      	adds	r4, r0, #1
 8002d86:	4629      	mov	r1, r5
 8002d88:	4561      	cmp	r1, ip
 8002d8a:	d30a      	bcc.n	8002da2 <__exponent+0x66>
 8002d8c:	f10d 0209 	add.w	r2, sp, #9
 8002d90:	eba2 020e 	sub.w	r2, r2, lr
 8002d94:	4565      	cmp	r5, ip
 8002d96:	bf88      	it	hi
 8002d98:	2200      	movhi	r2, #0
 8002d9a:	4413      	add	r3, r2
 8002d9c:	1a18      	subs	r0, r3, r0
 8002d9e:	b003      	add	sp, #12
 8002da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002da6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002daa:	e7ed      	b.n	8002d88 <__exponent+0x4c>
 8002dac:	2330      	movs	r3, #48	; 0x30
 8002dae:	3130      	adds	r1, #48	; 0x30
 8002db0:	7083      	strb	r3, [r0, #2]
 8002db2:	70c1      	strb	r1, [r0, #3]
 8002db4:	1d03      	adds	r3, r0, #4
 8002db6:	e7f1      	b.n	8002d9c <__exponent+0x60>

08002db8 <_printf_float>:
 8002db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dbc:	ed2d 8b02 	vpush	{d8}
 8002dc0:	b08d      	sub	sp, #52	; 0x34
 8002dc2:	460c      	mov	r4, r1
 8002dc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002dc8:	4616      	mov	r6, r2
 8002dca:	461f      	mov	r7, r3
 8002dcc:	4605      	mov	r5, r0
 8002dce:	f001 fcdb 	bl	8004788 <_localeconv_r>
 8002dd2:	f8d0 a000 	ldr.w	sl, [r0]
 8002dd6:	4650      	mov	r0, sl
 8002dd8:	f7fd fa02 	bl	80001e0 <strlen>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	930a      	str	r3, [sp, #40]	; 0x28
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	9305      	str	r3, [sp, #20]
 8002de4:	f8d8 3000 	ldr.w	r3, [r8]
 8002de8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002dec:	3307      	adds	r3, #7
 8002dee:	f023 0307 	bic.w	r3, r3, #7
 8002df2:	f103 0208 	add.w	r2, r3, #8
 8002df6:	f8c8 2000 	str.w	r2, [r8]
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002e02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002e06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002e0a:	9307      	str	r3, [sp, #28]
 8002e0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8002e10:	ee08 0a10 	vmov	s16, r0
 8002e14:	4b9f      	ldr	r3, [pc, #636]	; (8003094 <_printf_float+0x2dc>)
 8002e16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1e:	f7fd fe8d 	bl	8000b3c <__aeabi_dcmpun>
 8002e22:	bb88      	cbnz	r0, 8002e88 <_printf_float+0xd0>
 8002e24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e28:	4b9a      	ldr	r3, [pc, #616]	; (8003094 <_printf_float+0x2dc>)
 8002e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2e:	f7fd fe67 	bl	8000b00 <__aeabi_dcmple>
 8002e32:	bb48      	cbnz	r0, 8002e88 <_printf_float+0xd0>
 8002e34:	2200      	movs	r2, #0
 8002e36:	2300      	movs	r3, #0
 8002e38:	4640      	mov	r0, r8
 8002e3a:	4649      	mov	r1, r9
 8002e3c:	f7fd fe56 	bl	8000aec <__aeabi_dcmplt>
 8002e40:	b110      	cbz	r0, 8002e48 <_printf_float+0x90>
 8002e42:	232d      	movs	r3, #45	; 0x2d
 8002e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e48:	4b93      	ldr	r3, [pc, #588]	; (8003098 <_printf_float+0x2e0>)
 8002e4a:	4894      	ldr	r0, [pc, #592]	; (800309c <_printf_float+0x2e4>)
 8002e4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002e50:	bf94      	ite	ls
 8002e52:	4698      	movls	r8, r3
 8002e54:	4680      	movhi	r8, r0
 8002e56:	2303      	movs	r3, #3
 8002e58:	6123      	str	r3, [r4, #16]
 8002e5a:	9b05      	ldr	r3, [sp, #20]
 8002e5c:	f023 0204 	bic.w	r2, r3, #4
 8002e60:	6022      	str	r2, [r4, #0]
 8002e62:	f04f 0900 	mov.w	r9, #0
 8002e66:	9700      	str	r7, [sp, #0]
 8002e68:	4633      	mov	r3, r6
 8002e6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f000 f9d8 	bl	8003224 <_printf_common>
 8002e74:	3001      	adds	r0, #1
 8002e76:	f040 8090 	bne.w	8002f9a <_printf_float+0x1e2>
 8002e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7e:	b00d      	add	sp, #52	; 0x34
 8002e80:	ecbd 8b02 	vpop	{d8}
 8002e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e88:	4642      	mov	r2, r8
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	4640      	mov	r0, r8
 8002e8e:	4649      	mov	r1, r9
 8002e90:	f7fd fe54 	bl	8000b3c <__aeabi_dcmpun>
 8002e94:	b140      	cbz	r0, 8002ea8 <_printf_float+0xf0>
 8002e96:	464b      	mov	r3, r9
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bfbc      	itt	lt
 8002e9c:	232d      	movlt	r3, #45	; 0x2d
 8002e9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002ea2:	487f      	ldr	r0, [pc, #508]	; (80030a0 <_printf_float+0x2e8>)
 8002ea4:	4b7f      	ldr	r3, [pc, #508]	; (80030a4 <_printf_float+0x2ec>)
 8002ea6:	e7d1      	b.n	8002e4c <_printf_float+0x94>
 8002ea8:	6863      	ldr	r3, [r4, #4]
 8002eaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002eae:	9206      	str	r2, [sp, #24]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	d13f      	bne.n	8002f34 <_printf_float+0x17c>
 8002eb4:	2306      	movs	r3, #6
 8002eb6:	6063      	str	r3, [r4, #4]
 8002eb8:	9b05      	ldr	r3, [sp, #20]
 8002eba:	6861      	ldr	r1, [r4, #4]
 8002ebc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	9303      	str	r3, [sp, #12]
 8002ec4:	ab0a      	add	r3, sp, #40	; 0x28
 8002ec6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002eca:	ab09      	add	r3, sp, #36	; 0x24
 8002ecc:	ec49 8b10 	vmov	d0, r8, r9
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	6022      	str	r2, [r4, #0]
 8002ed4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f7ff fecd 	bl	8002c78 <__cvt>
 8002ede:	9b06      	ldr	r3, [sp, #24]
 8002ee0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ee2:	2b47      	cmp	r3, #71	; 0x47
 8002ee4:	4680      	mov	r8, r0
 8002ee6:	d108      	bne.n	8002efa <_printf_float+0x142>
 8002ee8:	1cc8      	adds	r0, r1, #3
 8002eea:	db02      	blt.n	8002ef2 <_printf_float+0x13a>
 8002eec:	6863      	ldr	r3, [r4, #4]
 8002eee:	4299      	cmp	r1, r3
 8002ef0:	dd41      	ble.n	8002f76 <_printf_float+0x1be>
 8002ef2:	f1ab 0b02 	sub.w	fp, fp, #2
 8002ef6:	fa5f fb8b 	uxtb.w	fp, fp
 8002efa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002efe:	d820      	bhi.n	8002f42 <_printf_float+0x18a>
 8002f00:	3901      	subs	r1, #1
 8002f02:	465a      	mov	r2, fp
 8002f04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f08:	9109      	str	r1, [sp, #36]	; 0x24
 8002f0a:	f7ff ff17 	bl	8002d3c <__exponent>
 8002f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f10:	1813      	adds	r3, r2, r0
 8002f12:	2a01      	cmp	r2, #1
 8002f14:	4681      	mov	r9, r0
 8002f16:	6123      	str	r3, [r4, #16]
 8002f18:	dc02      	bgt.n	8002f20 <_printf_float+0x168>
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	07d2      	lsls	r2, r2, #31
 8002f1e:	d501      	bpl.n	8002f24 <_printf_float+0x16c>
 8002f20:	3301      	adds	r3, #1
 8002f22:	6123      	str	r3, [r4, #16]
 8002f24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d09c      	beq.n	8002e66 <_printf_float+0xae>
 8002f2c:	232d      	movs	r3, #45	; 0x2d
 8002f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f32:	e798      	b.n	8002e66 <_printf_float+0xae>
 8002f34:	9a06      	ldr	r2, [sp, #24]
 8002f36:	2a47      	cmp	r2, #71	; 0x47
 8002f38:	d1be      	bne.n	8002eb8 <_printf_float+0x100>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1bc      	bne.n	8002eb8 <_printf_float+0x100>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e7b9      	b.n	8002eb6 <_printf_float+0xfe>
 8002f42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002f46:	d118      	bne.n	8002f7a <_printf_float+0x1c2>
 8002f48:	2900      	cmp	r1, #0
 8002f4a:	6863      	ldr	r3, [r4, #4]
 8002f4c:	dd0b      	ble.n	8002f66 <_printf_float+0x1ae>
 8002f4e:	6121      	str	r1, [r4, #16]
 8002f50:	b913      	cbnz	r3, 8002f58 <_printf_float+0x1a0>
 8002f52:	6822      	ldr	r2, [r4, #0]
 8002f54:	07d0      	lsls	r0, r2, #31
 8002f56:	d502      	bpl.n	8002f5e <_printf_float+0x1a6>
 8002f58:	3301      	adds	r3, #1
 8002f5a:	440b      	add	r3, r1
 8002f5c:	6123      	str	r3, [r4, #16]
 8002f5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002f60:	f04f 0900 	mov.w	r9, #0
 8002f64:	e7de      	b.n	8002f24 <_printf_float+0x16c>
 8002f66:	b913      	cbnz	r3, 8002f6e <_printf_float+0x1b6>
 8002f68:	6822      	ldr	r2, [r4, #0]
 8002f6a:	07d2      	lsls	r2, r2, #31
 8002f6c:	d501      	bpl.n	8002f72 <_printf_float+0x1ba>
 8002f6e:	3302      	adds	r3, #2
 8002f70:	e7f4      	b.n	8002f5c <_printf_float+0x1a4>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e7f2      	b.n	8002f5c <_printf_float+0x1a4>
 8002f76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f7c:	4299      	cmp	r1, r3
 8002f7e:	db05      	blt.n	8002f8c <_printf_float+0x1d4>
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	6121      	str	r1, [r4, #16]
 8002f84:	07d8      	lsls	r0, r3, #31
 8002f86:	d5ea      	bpl.n	8002f5e <_printf_float+0x1a6>
 8002f88:	1c4b      	adds	r3, r1, #1
 8002f8a:	e7e7      	b.n	8002f5c <_printf_float+0x1a4>
 8002f8c:	2900      	cmp	r1, #0
 8002f8e:	bfd4      	ite	le
 8002f90:	f1c1 0202 	rsble	r2, r1, #2
 8002f94:	2201      	movgt	r2, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	e7e0      	b.n	8002f5c <_printf_float+0x1a4>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	055a      	lsls	r2, r3, #21
 8002f9e:	d407      	bmi.n	8002fb0 <_printf_float+0x1f8>
 8002fa0:	6923      	ldr	r3, [r4, #16]
 8002fa2:	4642      	mov	r2, r8
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	47b8      	blx	r7
 8002faa:	3001      	adds	r0, #1
 8002fac:	d12c      	bne.n	8003008 <_printf_float+0x250>
 8002fae:	e764      	b.n	8002e7a <_printf_float+0xc2>
 8002fb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002fb4:	f240 80e0 	bls.w	8003178 <_printf_float+0x3c0>
 8002fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f7fd fd8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d034      	beq.n	8003032 <_printf_float+0x27a>
 8002fc8:	4a37      	ldr	r2, [pc, #220]	; (80030a8 <_printf_float+0x2f0>)
 8002fca:	2301      	movs	r3, #1
 8002fcc:	4631      	mov	r1, r6
 8002fce:	4628      	mov	r0, r5
 8002fd0:	47b8      	blx	r7
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	f43f af51 	beq.w	8002e7a <_printf_float+0xc2>
 8002fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	db02      	blt.n	8002fe6 <_printf_float+0x22e>
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	07d8      	lsls	r0, r3, #31
 8002fe4:	d510      	bpl.n	8003008 <_printf_float+0x250>
 8002fe6:	ee18 3a10 	vmov	r3, s16
 8002fea:	4652      	mov	r2, sl
 8002fec:	4631      	mov	r1, r6
 8002fee:	4628      	mov	r0, r5
 8002ff0:	47b8      	blx	r7
 8002ff2:	3001      	adds	r0, #1
 8002ff4:	f43f af41 	beq.w	8002e7a <_printf_float+0xc2>
 8002ff8:	f04f 0800 	mov.w	r8, #0
 8002ffc:	f104 091a 	add.w	r9, r4, #26
 8003000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003002:	3b01      	subs	r3, #1
 8003004:	4543      	cmp	r3, r8
 8003006:	dc09      	bgt.n	800301c <_printf_float+0x264>
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	079b      	lsls	r3, r3, #30
 800300c:	f100 8105 	bmi.w	800321a <_printf_float+0x462>
 8003010:	68e0      	ldr	r0, [r4, #12]
 8003012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003014:	4298      	cmp	r0, r3
 8003016:	bfb8      	it	lt
 8003018:	4618      	movlt	r0, r3
 800301a:	e730      	b.n	8002e7e <_printf_float+0xc6>
 800301c:	2301      	movs	r3, #1
 800301e:	464a      	mov	r2, r9
 8003020:	4631      	mov	r1, r6
 8003022:	4628      	mov	r0, r5
 8003024:	47b8      	blx	r7
 8003026:	3001      	adds	r0, #1
 8003028:	f43f af27 	beq.w	8002e7a <_printf_float+0xc2>
 800302c:	f108 0801 	add.w	r8, r8, #1
 8003030:	e7e6      	b.n	8003000 <_printf_float+0x248>
 8003032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003034:	2b00      	cmp	r3, #0
 8003036:	dc39      	bgt.n	80030ac <_printf_float+0x2f4>
 8003038:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <_printf_float+0x2f0>)
 800303a:	2301      	movs	r3, #1
 800303c:	4631      	mov	r1, r6
 800303e:	4628      	mov	r0, r5
 8003040:	47b8      	blx	r7
 8003042:	3001      	adds	r0, #1
 8003044:	f43f af19 	beq.w	8002e7a <_printf_float+0xc2>
 8003048:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800304c:	4313      	orrs	r3, r2
 800304e:	d102      	bne.n	8003056 <_printf_float+0x29e>
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	07d9      	lsls	r1, r3, #31
 8003054:	d5d8      	bpl.n	8003008 <_printf_float+0x250>
 8003056:	ee18 3a10 	vmov	r3, s16
 800305a:	4652      	mov	r2, sl
 800305c:	4631      	mov	r1, r6
 800305e:	4628      	mov	r0, r5
 8003060:	47b8      	blx	r7
 8003062:	3001      	adds	r0, #1
 8003064:	f43f af09 	beq.w	8002e7a <_printf_float+0xc2>
 8003068:	f04f 0900 	mov.w	r9, #0
 800306c:	f104 0a1a 	add.w	sl, r4, #26
 8003070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003072:	425b      	negs	r3, r3
 8003074:	454b      	cmp	r3, r9
 8003076:	dc01      	bgt.n	800307c <_printf_float+0x2c4>
 8003078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800307a:	e792      	b.n	8002fa2 <_printf_float+0x1ea>
 800307c:	2301      	movs	r3, #1
 800307e:	4652      	mov	r2, sl
 8003080:	4631      	mov	r1, r6
 8003082:	4628      	mov	r0, r5
 8003084:	47b8      	blx	r7
 8003086:	3001      	adds	r0, #1
 8003088:	f43f aef7 	beq.w	8002e7a <_printf_float+0xc2>
 800308c:	f109 0901 	add.w	r9, r9, #1
 8003090:	e7ee      	b.n	8003070 <_printf_float+0x2b8>
 8003092:	bf00      	nop
 8003094:	7fefffff 	.word	0x7fefffff
 8003098:	080056e4 	.word	0x080056e4
 800309c:	080056e8 	.word	0x080056e8
 80030a0:	080056f0 	.word	0x080056f0
 80030a4:	080056ec 	.word	0x080056ec
 80030a8:	080056f4 	.word	0x080056f4
 80030ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030b0:	429a      	cmp	r2, r3
 80030b2:	bfa8      	it	ge
 80030b4:	461a      	movge	r2, r3
 80030b6:	2a00      	cmp	r2, #0
 80030b8:	4691      	mov	r9, r2
 80030ba:	dc37      	bgt.n	800312c <_printf_float+0x374>
 80030bc:	f04f 0b00 	mov.w	fp, #0
 80030c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030c4:	f104 021a 	add.w	r2, r4, #26
 80030c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030ca:	9305      	str	r3, [sp, #20]
 80030cc:	eba3 0309 	sub.w	r3, r3, r9
 80030d0:	455b      	cmp	r3, fp
 80030d2:	dc33      	bgt.n	800313c <_printf_float+0x384>
 80030d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030d8:	429a      	cmp	r2, r3
 80030da:	db3b      	blt.n	8003154 <_printf_float+0x39c>
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	07da      	lsls	r2, r3, #31
 80030e0:	d438      	bmi.n	8003154 <_printf_float+0x39c>
 80030e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030e4:	9b05      	ldr	r3, [sp, #20]
 80030e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	eba2 0901 	sub.w	r9, r2, r1
 80030ee:	4599      	cmp	r9, r3
 80030f0:	bfa8      	it	ge
 80030f2:	4699      	movge	r9, r3
 80030f4:	f1b9 0f00 	cmp.w	r9, #0
 80030f8:	dc35      	bgt.n	8003166 <_printf_float+0x3ae>
 80030fa:	f04f 0800 	mov.w	r8, #0
 80030fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003102:	f104 0a1a 	add.w	sl, r4, #26
 8003106:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	eba3 0309 	sub.w	r3, r3, r9
 8003110:	4543      	cmp	r3, r8
 8003112:	f77f af79 	ble.w	8003008 <_printf_float+0x250>
 8003116:	2301      	movs	r3, #1
 8003118:	4652      	mov	r2, sl
 800311a:	4631      	mov	r1, r6
 800311c:	4628      	mov	r0, r5
 800311e:	47b8      	blx	r7
 8003120:	3001      	adds	r0, #1
 8003122:	f43f aeaa 	beq.w	8002e7a <_printf_float+0xc2>
 8003126:	f108 0801 	add.w	r8, r8, #1
 800312a:	e7ec      	b.n	8003106 <_printf_float+0x34e>
 800312c:	4613      	mov	r3, r2
 800312e:	4631      	mov	r1, r6
 8003130:	4642      	mov	r2, r8
 8003132:	4628      	mov	r0, r5
 8003134:	47b8      	blx	r7
 8003136:	3001      	adds	r0, #1
 8003138:	d1c0      	bne.n	80030bc <_printf_float+0x304>
 800313a:	e69e      	b.n	8002e7a <_printf_float+0xc2>
 800313c:	2301      	movs	r3, #1
 800313e:	4631      	mov	r1, r6
 8003140:	4628      	mov	r0, r5
 8003142:	9205      	str	r2, [sp, #20]
 8003144:	47b8      	blx	r7
 8003146:	3001      	adds	r0, #1
 8003148:	f43f ae97 	beq.w	8002e7a <_printf_float+0xc2>
 800314c:	9a05      	ldr	r2, [sp, #20]
 800314e:	f10b 0b01 	add.w	fp, fp, #1
 8003152:	e7b9      	b.n	80030c8 <_printf_float+0x310>
 8003154:	ee18 3a10 	vmov	r3, s16
 8003158:	4652      	mov	r2, sl
 800315a:	4631      	mov	r1, r6
 800315c:	4628      	mov	r0, r5
 800315e:	47b8      	blx	r7
 8003160:	3001      	adds	r0, #1
 8003162:	d1be      	bne.n	80030e2 <_printf_float+0x32a>
 8003164:	e689      	b.n	8002e7a <_printf_float+0xc2>
 8003166:	9a05      	ldr	r2, [sp, #20]
 8003168:	464b      	mov	r3, r9
 800316a:	4442      	add	r2, r8
 800316c:	4631      	mov	r1, r6
 800316e:	4628      	mov	r0, r5
 8003170:	47b8      	blx	r7
 8003172:	3001      	adds	r0, #1
 8003174:	d1c1      	bne.n	80030fa <_printf_float+0x342>
 8003176:	e680      	b.n	8002e7a <_printf_float+0xc2>
 8003178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800317a:	2a01      	cmp	r2, #1
 800317c:	dc01      	bgt.n	8003182 <_printf_float+0x3ca>
 800317e:	07db      	lsls	r3, r3, #31
 8003180:	d538      	bpl.n	80031f4 <_printf_float+0x43c>
 8003182:	2301      	movs	r3, #1
 8003184:	4642      	mov	r2, r8
 8003186:	4631      	mov	r1, r6
 8003188:	4628      	mov	r0, r5
 800318a:	47b8      	blx	r7
 800318c:	3001      	adds	r0, #1
 800318e:	f43f ae74 	beq.w	8002e7a <_printf_float+0xc2>
 8003192:	ee18 3a10 	vmov	r3, s16
 8003196:	4652      	mov	r2, sl
 8003198:	4631      	mov	r1, r6
 800319a:	4628      	mov	r0, r5
 800319c:	47b8      	blx	r7
 800319e:	3001      	adds	r0, #1
 80031a0:	f43f ae6b 	beq.w	8002e7a <_printf_float+0xc2>
 80031a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031a8:	2200      	movs	r2, #0
 80031aa:	2300      	movs	r3, #0
 80031ac:	f7fd fc94 	bl	8000ad8 <__aeabi_dcmpeq>
 80031b0:	b9d8      	cbnz	r0, 80031ea <_printf_float+0x432>
 80031b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031b4:	f108 0201 	add.w	r2, r8, #1
 80031b8:	3b01      	subs	r3, #1
 80031ba:	4631      	mov	r1, r6
 80031bc:	4628      	mov	r0, r5
 80031be:	47b8      	blx	r7
 80031c0:	3001      	adds	r0, #1
 80031c2:	d10e      	bne.n	80031e2 <_printf_float+0x42a>
 80031c4:	e659      	b.n	8002e7a <_printf_float+0xc2>
 80031c6:	2301      	movs	r3, #1
 80031c8:	4652      	mov	r2, sl
 80031ca:	4631      	mov	r1, r6
 80031cc:	4628      	mov	r0, r5
 80031ce:	47b8      	blx	r7
 80031d0:	3001      	adds	r0, #1
 80031d2:	f43f ae52 	beq.w	8002e7a <_printf_float+0xc2>
 80031d6:	f108 0801 	add.w	r8, r8, #1
 80031da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031dc:	3b01      	subs	r3, #1
 80031de:	4543      	cmp	r3, r8
 80031e0:	dcf1      	bgt.n	80031c6 <_printf_float+0x40e>
 80031e2:	464b      	mov	r3, r9
 80031e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80031e8:	e6dc      	b.n	8002fa4 <_printf_float+0x1ec>
 80031ea:	f04f 0800 	mov.w	r8, #0
 80031ee:	f104 0a1a 	add.w	sl, r4, #26
 80031f2:	e7f2      	b.n	80031da <_printf_float+0x422>
 80031f4:	2301      	movs	r3, #1
 80031f6:	4642      	mov	r2, r8
 80031f8:	e7df      	b.n	80031ba <_printf_float+0x402>
 80031fa:	2301      	movs	r3, #1
 80031fc:	464a      	mov	r2, r9
 80031fe:	4631      	mov	r1, r6
 8003200:	4628      	mov	r0, r5
 8003202:	47b8      	blx	r7
 8003204:	3001      	adds	r0, #1
 8003206:	f43f ae38 	beq.w	8002e7a <_printf_float+0xc2>
 800320a:	f108 0801 	add.w	r8, r8, #1
 800320e:	68e3      	ldr	r3, [r4, #12]
 8003210:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003212:	1a5b      	subs	r3, r3, r1
 8003214:	4543      	cmp	r3, r8
 8003216:	dcf0      	bgt.n	80031fa <_printf_float+0x442>
 8003218:	e6fa      	b.n	8003010 <_printf_float+0x258>
 800321a:	f04f 0800 	mov.w	r8, #0
 800321e:	f104 0919 	add.w	r9, r4, #25
 8003222:	e7f4      	b.n	800320e <_printf_float+0x456>

08003224 <_printf_common>:
 8003224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003228:	4616      	mov	r6, r2
 800322a:	4699      	mov	r9, r3
 800322c:	688a      	ldr	r2, [r1, #8]
 800322e:	690b      	ldr	r3, [r1, #16]
 8003230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003234:	4293      	cmp	r3, r2
 8003236:	bfb8      	it	lt
 8003238:	4613      	movlt	r3, r2
 800323a:	6033      	str	r3, [r6, #0]
 800323c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003240:	4607      	mov	r7, r0
 8003242:	460c      	mov	r4, r1
 8003244:	b10a      	cbz	r2, 800324a <_printf_common+0x26>
 8003246:	3301      	adds	r3, #1
 8003248:	6033      	str	r3, [r6, #0]
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	0699      	lsls	r1, r3, #26
 800324e:	bf42      	ittt	mi
 8003250:	6833      	ldrmi	r3, [r6, #0]
 8003252:	3302      	addmi	r3, #2
 8003254:	6033      	strmi	r3, [r6, #0]
 8003256:	6825      	ldr	r5, [r4, #0]
 8003258:	f015 0506 	ands.w	r5, r5, #6
 800325c:	d106      	bne.n	800326c <_printf_common+0x48>
 800325e:	f104 0a19 	add.w	sl, r4, #25
 8003262:	68e3      	ldr	r3, [r4, #12]
 8003264:	6832      	ldr	r2, [r6, #0]
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	42ab      	cmp	r3, r5
 800326a:	dc26      	bgt.n	80032ba <_printf_common+0x96>
 800326c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003270:	1e13      	subs	r3, r2, #0
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	bf18      	it	ne
 8003276:	2301      	movne	r3, #1
 8003278:	0692      	lsls	r2, r2, #26
 800327a:	d42b      	bmi.n	80032d4 <_printf_common+0xb0>
 800327c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003280:	4649      	mov	r1, r9
 8003282:	4638      	mov	r0, r7
 8003284:	47c0      	blx	r8
 8003286:	3001      	adds	r0, #1
 8003288:	d01e      	beq.n	80032c8 <_printf_common+0xa4>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	68e5      	ldr	r5, [r4, #12]
 800328e:	6832      	ldr	r2, [r6, #0]
 8003290:	f003 0306 	and.w	r3, r3, #6
 8003294:	2b04      	cmp	r3, #4
 8003296:	bf08      	it	eq
 8003298:	1aad      	subeq	r5, r5, r2
 800329a:	68a3      	ldr	r3, [r4, #8]
 800329c:	6922      	ldr	r2, [r4, #16]
 800329e:	bf0c      	ite	eq
 80032a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032a4:	2500      	movne	r5, #0
 80032a6:	4293      	cmp	r3, r2
 80032a8:	bfc4      	itt	gt
 80032aa:	1a9b      	subgt	r3, r3, r2
 80032ac:	18ed      	addgt	r5, r5, r3
 80032ae:	2600      	movs	r6, #0
 80032b0:	341a      	adds	r4, #26
 80032b2:	42b5      	cmp	r5, r6
 80032b4:	d11a      	bne.n	80032ec <_printf_common+0xc8>
 80032b6:	2000      	movs	r0, #0
 80032b8:	e008      	b.n	80032cc <_printf_common+0xa8>
 80032ba:	2301      	movs	r3, #1
 80032bc:	4652      	mov	r2, sl
 80032be:	4649      	mov	r1, r9
 80032c0:	4638      	mov	r0, r7
 80032c2:	47c0      	blx	r8
 80032c4:	3001      	adds	r0, #1
 80032c6:	d103      	bne.n	80032d0 <_printf_common+0xac>
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d0:	3501      	adds	r5, #1
 80032d2:	e7c6      	b.n	8003262 <_printf_common+0x3e>
 80032d4:	18e1      	adds	r1, r4, r3
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	2030      	movs	r0, #48	; 0x30
 80032da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032de:	4422      	add	r2, r4
 80032e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032e8:	3302      	adds	r3, #2
 80032ea:	e7c7      	b.n	800327c <_printf_common+0x58>
 80032ec:	2301      	movs	r3, #1
 80032ee:	4622      	mov	r2, r4
 80032f0:	4649      	mov	r1, r9
 80032f2:	4638      	mov	r0, r7
 80032f4:	47c0      	blx	r8
 80032f6:	3001      	adds	r0, #1
 80032f8:	d0e6      	beq.n	80032c8 <_printf_common+0xa4>
 80032fa:	3601      	adds	r6, #1
 80032fc:	e7d9      	b.n	80032b2 <_printf_common+0x8e>
	...

08003300 <_printf_i>:
 8003300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003304:	460c      	mov	r4, r1
 8003306:	4691      	mov	r9, r2
 8003308:	7e27      	ldrb	r7, [r4, #24]
 800330a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800330c:	2f78      	cmp	r7, #120	; 0x78
 800330e:	4680      	mov	r8, r0
 8003310:	469a      	mov	sl, r3
 8003312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003316:	d807      	bhi.n	8003328 <_printf_i+0x28>
 8003318:	2f62      	cmp	r7, #98	; 0x62
 800331a:	d80a      	bhi.n	8003332 <_printf_i+0x32>
 800331c:	2f00      	cmp	r7, #0
 800331e:	f000 80d8 	beq.w	80034d2 <_printf_i+0x1d2>
 8003322:	2f58      	cmp	r7, #88	; 0x58
 8003324:	f000 80a3 	beq.w	800346e <_printf_i+0x16e>
 8003328:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800332c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003330:	e03a      	b.n	80033a8 <_printf_i+0xa8>
 8003332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003336:	2b15      	cmp	r3, #21
 8003338:	d8f6      	bhi.n	8003328 <_printf_i+0x28>
 800333a:	a001      	add	r0, pc, #4	; (adr r0, 8003340 <_printf_i+0x40>)
 800333c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003340:	08003399 	.word	0x08003399
 8003344:	080033ad 	.word	0x080033ad
 8003348:	08003329 	.word	0x08003329
 800334c:	08003329 	.word	0x08003329
 8003350:	08003329 	.word	0x08003329
 8003354:	08003329 	.word	0x08003329
 8003358:	080033ad 	.word	0x080033ad
 800335c:	08003329 	.word	0x08003329
 8003360:	08003329 	.word	0x08003329
 8003364:	08003329 	.word	0x08003329
 8003368:	08003329 	.word	0x08003329
 800336c:	080034b9 	.word	0x080034b9
 8003370:	080033dd 	.word	0x080033dd
 8003374:	0800349b 	.word	0x0800349b
 8003378:	08003329 	.word	0x08003329
 800337c:	08003329 	.word	0x08003329
 8003380:	080034db 	.word	0x080034db
 8003384:	08003329 	.word	0x08003329
 8003388:	080033dd 	.word	0x080033dd
 800338c:	08003329 	.word	0x08003329
 8003390:	08003329 	.word	0x08003329
 8003394:	080034a3 	.word	0x080034a3
 8003398:	680b      	ldr	r3, [r1, #0]
 800339a:	1d1a      	adds	r2, r3, #4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	600a      	str	r2, [r1, #0]
 80033a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0a3      	b.n	80034f4 <_printf_i+0x1f4>
 80033ac:	6825      	ldr	r5, [r4, #0]
 80033ae:	6808      	ldr	r0, [r1, #0]
 80033b0:	062e      	lsls	r6, r5, #24
 80033b2:	f100 0304 	add.w	r3, r0, #4
 80033b6:	d50a      	bpl.n	80033ce <_printf_i+0xce>
 80033b8:	6805      	ldr	r5, [r0, #0]
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	2d00      	cmp	r5, #0
 80033be:	da03      	bge.n	80033c8 <_printf_i+0xc8>
 80033c0:	232d      	movs	r3, #45	; 0x2d
 80033c2:	426d      	negs	r5, r5
 80033c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033c8:	485e      	ldr	r0, [pc, #376]	; (8003544 <_printf_i+0x244>)
 80033ca:	230a      	movs	r3, #10
 80033cc:	e019      	b.n	8003402 <_printf_i+0x102>
 80033ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80033d2:	6805      	ldr	r5, [r0, #0]
 80033d4:	600b      	str	r3, [r1, #0]
 80033d6:	bf18      	it	ne
 80033d8:	b22d      	sxthne	r5, r5
 80033da:	e7ef      	b.n	80033bc <_printf_i+0xbc>
 80033dc:	680b      	ldr	r3, [r1, #0]
 80033de:	6825      	ldr	r5, [r4, #0]
 80033e0:	1d18      	adds	r0, r3, #4
 80033e2:	6008      	str	r0, [r1, #0]
 80033e4:	0628      	lsls	r0, r5, #24
 80033e6:	d501      	bpl.n	80033ec <_printf_i+0xec>
 80033e8:	681d      	ldr	r5, [r3, #0]
 80033ea:	e002      	b.n	80033f2 <_printf_i+0xf2>
 80033ec:	0669      	lsls	r1, r5, #25
 80033ee:	d5fb      	bpl.n	80033e8 <_printf_i+0xe8>
 80033f0:	881d      	ldrh	r5, [r3, #0]
 80033f2:	4854      	ldr	r0, [pc, #336]	; (8003544 <_printf_i+0x244>)
 80033f4:	2f6f      	cmp	r7, #111	; 0x6f
 80033f6:	bf0c      	ite	eq
 80033f8:	2308      	moveq	r3, #8
 80033fa:	230a      	movne	r3, #10
 80033fc:	2100      	movs	r1, #0
 80033fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003402:	6866      	ldr	r6, [r4, #4]
 8003404:	60a6      	str	r6, [r4, #8]
 8003406:	2e00      	cmp	r6, #0
 8003408:	bfa2      	ittt	ge
 800340a:	6821      	ldrge	r1, [r4, #0]
 800340c:	f021 0104 	bicge.w	r1, r1, #4
 8003410:	6021      	strge	r1, [r4, #0]
 8003412:	b90d      	cbnz	r5, 8003418 <_printf_i+0x118>
 8003414:	2e00      	cmp	r6, #0
 8003416:	d04d      	beq.n	80034b4 <_printf_i+0x1b4>
 8003418:	4616      	mov	r6, r2
 800341a:	fbb5 f1f3 	udiv	r1, r5, r3
 800341e:	fb03 5711 	mls	r7, r3, r1, r5
 8003422:	5dc7      	ldrb	r7, [r0, r7]
 8003424:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003428:	462f      	mov	r7, r5
 800342a:	42bb      	cmp	r3, r7
 800342c:	460d      	mov	r5, r1
 800342e:	d9f4      	bls.n	800341a <_printf_i+0x11a>
 8003430:	2b08      	cmp	r3, #8
 8003432:	d10b      	bne.n	800344c <_printf_i+0x14c>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	07df      	lsls	r7, r3, #31
 8003438:	d508      	bpl.n	800344c <_printf_i+0x14c>
 800343a:	6923      	ldr	r3, [r4, #16]
 800343c:	6861      	ldr	r1, [r4, #4]
 800343e:	4299      	cmp	r1, r3
 8003440:	bfde      	ittt	le
 8003442:	2330      	movle	r3, #48	; 0x30
 8003444:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003448:	f106 36ff 	addle.w	r6, r6, #4294967295
 800344c:	1b92      	subs	r2, r2, r6
 800344e:	6122      	str	r2, [r4, #16]
 8003450:	f8cd a000 	str.w	sl, [sp]
 8003454:	464b      	mov	r3, r9
 8003456:	aa03      	add	r2, sp, #12
 8003458:	4621      	mov	r1, r4
 800345a:	4640      	mov	r0, r8
 800345c:	f7ff fee2 	bl	8003224 <_printf_common>
 8003460:	3001      	adds	r0, #1
 8003462:	d14c      	bne.n	80034fe <_printf_i+0x1fe>
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	b004      	add	sp, #16
 800346a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800346e:	4835      	ldr	r0, [pc, #212]	; (8003544 <_printf_i+0x244>)
 8003470:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	680e      	ldr	r6, [r1, #0]
 8003478:	061f      	lsls	r7, r3, #24
 800347a:	f856 5b04 	ldr.w	r5, [r6], #4
 800347e:	600e      	str	r6, [r1, #0]
 8003480:	d514      	bpl.n	80034ac <_printf_i+0x1ac>
 8003482:	07d9      	lsls	r1, r3, #31
 8003484:	bf44      	itt	mi
 8003486:	f043 0320 	orrmi.w	r3, r3, #32
 800348a:	6023      	strmi	r3, [r4, #0]
 800348c:	b91d      	cbnz	r5, 8003496 <_printf_i+0x196>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	f023 0320 	bic.w	r3, r3, #32
 8003494:	6023      	str	r3, [r4, #0]
 8003496:	2310      	movs	r3, #16
 8003498:	e7b0      	b.n	80033fc <_printf_i+0xfc>
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	f043 0320 	orr.w	r3, r3, #32
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	2378      	movs	r3, #120	; 0x78
 80034a4:	4828      	ldr	r0, [pc, #160]	; (8003548 <_printf_i+0x248>)
 80034a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034aa:	e7e3      	b.n	8003474 <_printf_i+0x174>
 80034ac:	065e      	lsls	r6, r3, #25
 80034ae:	bf48      	it	mi
 80034b0:	b2ad      	uxthmi	r5, r5
 80034b2:	e7e6      	b.n	8003482 <_printf_i+0x182>
 80034b4:	4616      	mov	r6, r2
 80034b6:	e7bb      	b.n	8003430 <_printf_i+0x130>
 80034b8:	680b      	ldr	r3, [r1, #0]
 80034ba:	6826      	ldr	r6, [r4, #0]
 80034bc:	6960      	ldr	r0, [r4, #20]
 80034be:	1d1d      	adds	r5, r3, #4
 80034c0:	600d      	str	r5, [r1, #0]
 80034c2:	0635      	lsls	r5, r6, #24
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	d501      	bpl.n	80034cc <_printf_i+0x1cc>
 80034c8:	6018      	str	r0, [r3, #0]
 80034ca:	e002      	b.n	80034d2 <_printf_i+0x1d2>
 80034cc:	0671      	lsls	r1, r6, #25
 80034ce:	d5fb      	bpl.n	80034c8 <_printf_i+0x1c8>
 80034d0:	8018      	strh	r0, [r3, #0]
 80034d2:	2300      	movs	r3, #0
 80034d4:	6123      	str	r3, [r4, #16]
 80034d6:	4616      	mov	r6, r2
 80034d8:	e7ba      	b.n	8003450 <_printf_i+0x150>
 80034da:	680b      	ldr	r3, [r1, #0]
 80034dc:	1d1a      	adds	r2, r3, #4
 80034de:	600a      	str	r2, [r1, #0]
 80034e0:	681e      	ldr	r6, [r3, #0]
 80034e2:	6862      	ldr	r2, [r4, #4]
 80034e4:	2100      	movs	r1, #0
 80034e6:	4630      	mov	r0, r6
 80034e8:	f7fc fe82 	bl	80001f0 <memchr>
 80034ec:	b108      	cbz	r0, 80034f2 <_printf_i+0x1f2>
 80034ee:	1b80      	subs	r0, r0, r6
 80034f0:	6060      	str	r0, [r4, #4]
 80034f2:	6863      	ldr	r3, [r4, #4]
 80034f4:	6123      	str	r3, [r4, #16]
 80034f6:	2300      	movs	r3, #0
 80034f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034fc:	e7a8      	b.n	8003450 <_printf_i+0x150>
 80034fe:	6923      	ldr	r3, [r4, #16]
 8003500:	4632      	mov	r2, r6
 8003502:	4649      	mov	r1, r9
 8003504:	4640      	mov	r0, r8
 8003506:	47d0      	blx	sl
 8003508:	3001      	adds	r0, #1
 800350a:	d0ab      	beq.n	8003464 <_printf_i+0x164>
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	079b      	lsls	r3, r3, #30
 8003510:	d413      	bmi.n	800353a <_printf_i+0x23a>
 8003512:	68e0      	ldr	r0, [r4, #12]
 8003514:	9b03      	ldr	r3, [sp, #12]
 8003516:	4298      	cmp	r0, r3
 8003518:	bfb8      	it	lt
 800351a:	4618      	movlt	r0, r3
 800351c:	e7a4      	b.n	8003468 <_printf_i+0x168>
 800351e:	2301      	movs	r3, #1
 8003520:	4632      	mov	r2, r6
 8003522:	4649      	mov	r1, r9
 8003524:	4640      	mov	r0, r8
 8003526:	47d0      	blx	sl
 8003528:	3001      	adds	r0, #1
 800352a:	d09b      	beq.n	8003464 <_printf_i+0x164>
 800352c:	3501      	adds	r5, #1
 800352e:	68e3      	ldr	r3, [r4, #12]
 8003530:	9903      	ldr	r1, [sp, #12]
 8003532:	1a5b      	subs	r3, r3, r1
 8003534:	42ab      	cmp	r3, r5
 8003536:	dcf2      	bgt.n	800351e <_printf_i+0x21e>
 8003538:	e7eb      	b.n	8003512 <_printf_i+0x212>
 800353a:	2500      	movs	r5, #0
 800353c:	f104 0619 	add.w	r6, r4, #25
 8003540:	e7f5      	b.n	800352e <_printf_i+0x22e>
 8003542:	bf00      	nop
 8003544:	080056f6 	.word	0x080056f6
 8003548:	08005707 	.word	0x08005707

0800354c <iprintf>:
 800354c:	b40f      	push	{r0, r1, r2, r3}
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <iprintf+0x2c>)
 8003550:	b513      	push	{r0, r1, r4, lr}
 8003552:	681c      	ldr	r4, [r3, #0]
 8003554:	b124      	cbz	r4, 8003560 <iprintf+0x14>
 8003556:	69a3      	ldr	r3, [r4, #24]
 8003558:	b913      	cbnz	r3, 8003560 <iprintf+0x14>
 800355a:	4620      	mov	r0, r4
 800355c:	f001 f876 	bl	800464c <__sinit>
 8003560:	ab05      	add	r3, sp, #20
 8003562:	9a04      	ldr	r2, [sp, #16]
 8003564:	68a1      	ldr	r1, [r4, #8]
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	4620      	mov	r0, r4
 800356a:	f001 fd49 	bl	8005000 <_vfiprintf_r>
 800356e:	b002      	add	sp, #8
 8003570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003574:	b004      	add	sp, #16
 8003576:	4770      	bx	lr
 8003578:	20000010 	.word	0x20000010

0800357c <_sbrk_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	4d06      	ldr	r5, [pc, #24]	; (8003598 <_sbrk_r+0x1c>)
 8003580:	2300      	movs	r3, #0
 8003582:	4604      	mov	r4, r0
 8003584:	4608      	mov	r0, r1
 8003586:	602b      	str	r3, [r5, #0]
 8003588:	f7fe fc80 	bl	8001e8c <_sbrk>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_sbrk_r+0x1a>
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	b103      	cbz	r3, 8003596 <_sbrk_r+0x1a>
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	2000022c 	.word	0x2000022c

0800359c <setvbuf>:
 800359c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80035a0:	461d      	mov	r5, r3
 80035a2:	4b5d      	ldr	r3, [pc, #372]	; (8003718 <setvbuf+0x17c>)
 80035a4:	681f      	ldr	r7, [r3, #0]
 80035a6:	4604      	mov	r4, r0
 80035a8:	460e      	mov	r6, r1
 80035aa:	4690      	mov	r8, r2
 80035ac:	b127      	cbz	r7, 80035b8 <setvbuf+0x1c>
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	b913      	cbnz	r3, 80035b8 <setvbuf+0x1c>
 80035b2:	4638      	mov	r0, r7
 80035b4:	f001 f84a 	bl	800464c <__sinit>
 80035b8:	4b58      	ldr	r3, [pc, #352]	; (800371c <setvbuf+0x180>)
 80035ba:	429c      	cmp	r4, r3
 80035bc:	d167      	bne.n	800368e <setvbuf+0xf2>
 80035be:	687c      	ldr	r4, [r7, #4]
 80035c0:	f1b8 0f02 	cmp.w	r8, #2
 80035c4:	d006      	beq.n	80035d4 <setvbuf+0x38>
 80035c6:	f1b8 0f01 	cmp.w	r8, #1
 80035ca:	f200 809f 	bhi.w	800370c <setvbuf+0x170>
 80035ce:	2d00      	cmp	r5, #0
 80035d0:	f2c0 809c 	blt.w	800370c <setvbuf+0x170>
 80035d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035d6:	07db      	lsls	r3, r3, #31
 80035d8:	d405      	bmi.n	80035e6 <setvbuf+0x4a>
 80035da:	89a3      	ldrh	r3, [r4, #12]
 80035dc:	0598      	lsls	r0, r3, #22
 80035de:	d402      	bmi.n	80035e6 <setvbuf+0x4a>
 80035e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035e2:	f001 f8d6 	bl	8004792 <__retarget_lock_acquire_recursive>
 80035e6:	4621      	mov	r1, r4
 80035e8:	4638      	mov	r0, r7
 80035ea:	f000 ff9b 	bl	8004524 <_fflush_r>
 80035ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035f0:	b141      	cbz	r1, 8003604 <setvbuf+0x68>
 80035f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035f6:	4299      	cmp	r1, r3
 80035f8:	d002      	beq.n	8003600 <setvbuf+0x64>
 80035fa:	4638      	mov	r0, r7
 80035fc:	f7ff fa92 	bl	8002b24 <_free_r>
 8003600:	2300      	movs	r3, #0
 8003602:	6363      	str	r3, [r4, #52]	; 0x34
 8003604:	2300      	movs	r3, #0
 8003606:	61a3      	str	r3, [r4, #24]
 8003608:	6063      	str	r3, [r4, #4]
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	0619      	lsls	r1, r3, #24
 800360e:	d503      	bpl.n	8003618 <setvbuf+0x7c>
 8003610:	6921      	ldr	r1, [r4, #16]
 8003612:	4638      	mov	r0, r7
 8003614:	f7ff fa86 	bl	8002b24 <_free_r>
 8003618:	89a3      	ldrh	r3, [r4, #12]
 800361a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	f1b8 0f02 	cmp.w	r8, #2
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	d06c      	beq.n	8003704 <setvbuf+0x168>
 800362a:	ab01      	add	r3, sp, #4
 800362c:	466a      	mov	r2, sp
 800362e:	4621      	mov	r1, r4
 8003630:	4638      	mov	r0, r7
 8003632:	f001 f8b0 	bl	8004796 <__swhatbuf_r>
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	4318      	orrs	r0, r3
 800363a:	81a0      	strh	r0, [r4, #12]
 800363c:	2d00      	cmp	r5, #0
 800363e:	d130      	bne.n	80036a2 <setvbuf+0x106>
 8003640:	9d00      	ldr	r5, [sp, #0]
 8003642:	4628      	mov	r0, r5
 8003644:	f7ff fa5e 	bl	8002b04 <malloc>
 8003648:	4606      	mov	r6, r0
 800364a:	2800      	cmp	r0, #0
 800364c:	d155      	bne.n	80036fa <setvbuf+0x15e>
 800364e:	f8dd 9000 	ldr.w	r9, [sp]
 8003652:	45a9      	cmp	r9, r5
 8003654:	d14a      	bne.n	80036ec <setvbuf+0x150>
 8003656:	f04f 35ff 	mov.w	r5, #4294967295
 800365a:	2200      	movs	r2, #0
 800365c:	60a2      	str	r2, [r4, #8]
 800365e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003662:	6022      	str	r2, [r4, #0]
 8003664:	6122      	str	r2, [r4, #16]
 8003666:	2201      	movs	r2, #1
 8003668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800366c:	6162      	str	r2, [r4, #20]
 800366e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	07d2      	lsls	r2, r2, #31
 8003676:	81a3      	strh	r3, [r4, #12]
 8003678:	d405      	bmi.n	8003686 <setvbuf+0xea>
 800367a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800367e:	d102      	bne.n	8003686 <setvbuf+0xea>
 8003680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003682:	f001 f887 	bl	8004794 <__retarget_lock_release_recursive>
 8003686:	4628      	mov	r0, r5
 8003688:	b003      	add	sp, #12
 800368a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <setvbuf+0x184>)
 8003690:	429c      	cmp	r4, r3
 8003692:	d101      	bne.n	8003698 <setvbuf+0xfc>
 8003694:	68bc      	ldr	r4, [r7, #8]
 8003696:	e793      	b.n	80035c0 <setvbuf+0x24>
 8003698:	4b22      	ldr	r3, [pc, #136]	; (8003724 <setvbuf+0x188>)
 800369a:	429c      	cmp	r4, r3
 800369c:	bf08      	it	eq
 800369e:	68fc      	ldreq	r4, [r7, #12]
 80036a0:	e78e      	b.n	80035c0 <setvbuf+0x24>
 80036a2:	2e00      	cmp	r6, #0
 80036a4:	d0cd      	beq.n	8003642 <setvbuf+0xa6>
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	b913      	cbnz	r3, 80036b0 <setvbuf+0x114>
 80036aa:	4638      	mov	r0, r7
 80036ac:	f000 ffce 	bl	800464c <__sinit>
 80036b0:	f1b8 0f01 	cmp.w	r8, #1
 80036b4:	bf08      	it	eq
 80036b6:	89a3      	ldrheq	r3, [r4, #12]
 80036b8:	6026      	str	r6, [r4, #0]
 80036ba:	bf04      	itt	eq
 80036bc:	f043 0301 	orreq.w	r3, r3, #1
 80036c0:	81a3      	strheq	r3, [r4, #12]
 80036c2:	89a2      	ldrh	r2, [r4, #12]
 80036c4:	f012 0308 	ands.w	r3, r2, #8
 80036c8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80036cc:	d01c      	beq.n	8003708 <setvbuf+0x16c>
 80036ce:	07d3      	lsls	r3, r2, #31
 80036d0:	bf41      	itttt	mi
 80036d2:	2300      	movmi	r3, #0
 80036d4:	426d      	negmi	r5, r5
 80036d6:	60a3      	strmi	r3, [r4, #8]
 80036d8:	61a5      	strmi	r5, [r4, #24]
 80036da:	bf58      	it	pl
 80036dc:	60a5      	strpl	r5, [r4, #8]
 80036de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80036e0:	f015 0501 	ands.w	r5, r5, #1
 80036e4:	d115      	bne.n	8003712 <setvbuf+0x176>
 80036e6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80036ea:	e7c8      	b.n	800367e <setvbuf+0xe2>
 80036ec:	4648      	mov	r0, r9
 80036ee:	f7ff fa09 	bl	8002b04 <malloc>
 80036f2:	4606      	mov	r6, r0
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d0ae      	beq.n	8003656 <setvbuf+0xba>
 80036f8:	464d      	mov	r5, r9
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003700:	81a3      	strh	r3, [r4, #12]
 8003702:	e7d0      	b.n	80036a6 <setvbuf+0x10a>
 8003704:	2500      	movs	r5, #0
 8003706:	e7a8      	b.n	800365a <setvbuf+0xbe>
 8003708:	60a3      	str	r3, [r4, #8]
 800370a:	e7e8      	b.n	80036de <setvbuf+0x142>
 800370c:	f04f 35ff 	mov.w	r5, #4294967295
 8003710:	e7b9      	b.n	8003686 <setvbuf+0xea>
 8003712:	2500      	movs	r5, #0
 8003714:	e7b7      	b.n	8003686 <setvbuf+0xea>
 8003716:	bf00      	nop
 8003718:	20000010 	.word	0x20000010
 800371c:	080057cc 	.word	0x080057cc
 8003720:	080057ec 	.word	0x080057ec
 8003724:	080057ac 	.word	0x080057ac

08003728 <quorem>:
 8003728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372c:	6903      	ldr	r3, [r0, #16]
 800372e:	690c      	ldr	r4, [r1, #16]
 8003730:	42a3      	cmp	r3, r4
 8003732:	4607      	mov	r7, r0
 8003734:	f2c0 8081 	blt.w	800383a <quorem+0x112>
 8003738:	3c01      	subs	r4, #1
 800373a:	f101 0814 	add.w	r8, r1, #20
 800373e:	f100 0514 	add.w	r5, r0, #20
 8003742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800374c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003750:	3301      	adds	r3, #1
 8003752:	429a      	cmp	r2, r3
 8003754:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003758:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800375c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003760:	d331      	bcc.n	80037c6 <quorem+0x9e>
 8003762:	f04f 0e00 	mov.w	lr, #0
 8003766:	4640      	mov	r0, r8
 8003768:	46ac      	mov	ip, r5
 800376a:	46f2      	mov	sl, lr
 800376c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003770:	b293      	uxth	r3, r2
 8003772:	fb06 e303 	mla	r3, r6, r3, lr
 8003776:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800377a:	b29b      	uxth	r3, r3
 800377c:	ebaa 0303 	sub.w	r3, sl, r3
 8003780:	0c12      	lsrs	r2, r2, #16
 8003782:	f8dc a000 	ldr.w	sl, [ip]
 8003786:	fb06 e202 	mla	r2, r6, r2, lr
 800378a:	fa13 f38a 	uxtah	r3, r3, sl
 800378e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003792:	fa1f fa82 	uxth.w	sl, r2
 8003796:	f8dc 2000 	ldr.w	r2, [ip]
 800379a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800379e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037a8:	4581      	cmp	r9, r0
 80037aa:	f84c 3b04 	str.w	r3, [ip], #4
 80037ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80037b2:	d2db      	bcs.n	800376c <quorem+0x44>
 80037b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80037b8:	b92b      	cbnz	r3, 80037c6 <quorem+0x9e>
 80037ba:	9b01      	ldr	r3, [sp, #4]
 80037bc:	3b04      	subs	r3, #4
 80037be:	429d      	cmp	r5, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	d32e      	bcc.n	8003822 <quorem+0xfa>
 80037c4:	613c      	str	r4, [r7, #16]
 80037c6:	4638      	mov	r0, r7
 80037c8:	f001 fae2 	bl	8004d90 <__mcmp>
 80037cc:	2800      	cmp	r0, #0
 80037ce:	db24      	blt.n	800381a <quorem+0xf2>
 80037d0:	3601      	adds	r6, #1
 80037d2:	4628      	mov	r0, r5
 80037d4:	f04f 0c00 	mov.w	ip, #0
 80037d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80037dc:	f8d0 e000 	ldr.w	lr, [r0]
 80037e0:	b293      	uxth	r3, r2
 80037e2:	ebac 0303 	sub.w	r3, ip, r3
 80037e6:	0c12      	lsrs	r2, r2, #16
 80037e8:	fa13 f38e 	uxtah	r3, r3, lr
 80037ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80037f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80037fa:	45c1      	cmp	r9, r8
 80037fc:	f840 3b04 	str.w	r3, [r0], #4
 8003800:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003804:	d2e8      	bcs.n	80037d8 <quorem+0xb0>
 8003806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800380a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800380e:	b922      	cbnz	r2, 800381a <quorem+0xf2>
 8003810:	3b04      	subs	r3, #4
 8003812:	429d      	cmp	r5, r3
 8003814:	461a      	mov	r2, r3
 8003816:	d30a      	bcc.n	800382e <quorem+0x106>
 8003818:	613c      	str	r4, [r7, #16]
 800381a:	4630      	mov	r0, r6
 800381c:	b003      	add	sp, #12
 800381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	3b04      	subs	r3, #4
 8003826:	2a00      	cmp	r2, #0
 8003828:	d1cc      	bne.n	80037c4 <quorem+0x9c>
 800382a:	3c01      	subs	r4, #1
 800382c:	e7c7      	b.n	80037be <quorem+0x96>
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	3b04      	subs	r3, #4
 8003832:	2a00      	cmp	r2, #0
 8003834:	d1f0      	bne.n	8003818 <quorem+0xf0>
 8003836:	3c01      	subs	r4, #1
 8003838:	e7eb      	b.n	8003812 <quorem+0xea>
 800383a:	2000      	movs	r0, #0
 800383c:	e7ee      	b.n	800381c <quorem+0xf4>
	...

08003840 <_dtoa_r>:
 8003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003844:	ed2d 8b02 	vpush	{d8}
 8003848:	ec57 6b10 	vmov	r6, r7, d0
 800384c:	b095      	sub	sp, #84	; 0x54
 800384e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003850:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003854:	9105      	str	r1, [sp, #20]
 8003856:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800385a:	4604      	mov	r4, r0
 800385c:	9209      	str	r2, [sp, #36]	; 0x24
 800385e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003860:	b975      	cbnz	r5, 8003880 <_dtoa_r+0x40>
 8003862:	2010      	movs	r0, #16
 8003864:	f7ff f94e 	bl	8002b04 <malloc>
 8003868:	4602      	mov	r2, r0
 800386a:	6260      	str	r0, [r4, #36]	; 0x24
 800386c:	b920      	cbnz	r0, 8003878 <_dtoa_r+0x38>
 800386e:	4bb2      	ldr	r3, [pc, #712]	; (8003b38 <_dtoa_r+0x2f8>)
 8003870:	21ea      	movs	r1, #234	; 0xea
 8003872:	48b2      	ldr	r0, [pc, #712]	; (8003b3c <_dtoa_r+0x2fc>)
 8003874:	f001 fe0a 	bl	800548c <__assert_func>
 8003878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800387c:	6005      	str	r5, [r0, #0]
 800387e:	60c5      	str	r5, [r0, #12]
 8003880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003882:	6819      	ldr	r1, [r3, #0]
 8003884:	b151      	cbz	r1, 800389c <_dtoa_r+0x5c>
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	604a      	str	r2, [r1, #4]
 800388a:	2301      	movs	r3, #1
 800388c:	4093      	lsls	r3, r2
 800388e:	608b      	str	r3, [r1, #8]
 8003890:	4620      	mov	r0, r4
 8003892:	f001 f83f 	bl	8004914 <_Bfree>
 8003896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	1e3b      	subs	r3, r7, #0
 800389e:	bfb9      	ittee	lt
 80038a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80038a4:	9303      	strlt	r3, [sp, #12]
 80038a6:	2300      	movge	r3, #0
 80038a8:	f8c8 3000 	strge.w	r3, [r8]
 80038ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80038b0:	4ba3      	ldr	r3, [pc, #652]	; (8003b40 <_dtoa_r+0x300>)
 80038b2:	bfbc      	itt	lt
 80038b4:	2201      	movlt	r2, #1
 80038b6:	f8c8 2000 	strlt.w	r2, [r8]
 80038ba:	ea33 0309 	bics.w	r3, r3, r9
 80038be:	d11b      	bne.n	80038f8 <_dtoa_r+0xb8>
 80038c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80038c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80038cc:	4333      	orrs	r3, r6
 80038ce:	f000 857a 	beq.w	80043c6 <_dtoa_r+0xb86>
 80038d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038d4:	b963      	cbnz	r3, 80038f0 <_dtoa_r+0xb0>
 80038d6:	4b9b      	ldr	r3, [pc, #620]	; (8003b44 <_dtoa_r+0x304>)
 80038d8:	e024      	b.n	8003924 <_dtoa_r+0xe4>
 80038da:	4b9b      	ldr	r3, [pc, #620]	; (8003b48 <_dtoa_r+0x308>)
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	3308      	adds	r3, #8
 80038e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	9800      	ldr	r0, [sp, #0]
 80038e6:	b015      	add	sp, #84	; 0x54
 80038e8:	ecbd 8b02 	vpop	{d8}
 80038ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038f0:	4b94      	ldr	r3, [pc, #592]	; (8003b44 <_dtoa_r+0x304>)
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	3303      	adds	r3, #3
 80038f6:	e7f3      	b.n	80038e0 <_dtoa_r+0xa0>
 80038f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80038fc:	2200      	movs	r2, #0
 80038fe:	ec51 0b17 	vmov	r0, r1, d7
 8003902:	2300      	movs	r3, #0
 8003904:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003908:	f7fd f8e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800390c:	4680      	mov	r8, r0
 800390e:	b158      	cbz	r0, 8003928 <_dtoa_r+0xe8>
 8003910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003912:	2301      	movs	r3, #1
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8551 	beq.w	80043c0 <_dtoa_r+0xb80>
 800391e:	488b      	ldr	r0, [pc, #556]	; (8003b4c <_dtoa_r+0x30c>)
 8003920:	6018      	str	r0, [r3, #0]
 8003922:	1e43      	subs	r3, r0, #1
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	e7dd      	b.n	80038e4 <_dtoa_r+0xa4>
 8003928:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800392c:	aa12      	add	r2, sp, #72	; 0x48
 800392e:	a913      	add	r1, sp, #76	; 0x4c
 8003930:	4620      	mov	r0, r4
 8003932:	f001 fad1 	bl	8004ed8 <__d2b>
 8003936:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800393a:	4683      	mov	fp, r0
 800393c:	2d00      	cmp	r5, #0
 800393e:	d07c      	beq.n	8003a3a <_dtoa_r+0x1fa>
 8003940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003942:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003946:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800394a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800394e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003952:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003956:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800395a:	4b7d      	ldr	r3, [pc, #500]	; (8003b50 <_dtoa_r+0x310>)
 800395c:	2200      	movs	r2, #0
 800395e:	4630      	mov	r0, r6
 8003960:	4639      	mov	r1, r7
 8003962:	f7fc fc99 	bl	8000298 <__aeabi_dsub>
 8003966:	a36e      	add	r3, pc, #440	; (adr r3, 8003b20 <_dtoa_r+0x2e0>)
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f7fc fe4c 	bl	8000608 <__aeabi_dmul>
 8003970:	a36d      	add	r3, pc, #436	; (adr r3, 8003b28 <_dtoa_r+0x2e8>)
 8003972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003976:	f7fc fc91 	bl	800029c <__adddf3>
 800397a:	4606      	mov	r6, r0
 800397c:	4628      	mov	r0, r5
 800397e:	460f      	mov	r7, r1
 8003980:	f7fc fdd8 	bl	8000534 <__aeabi_i2d>
 8003984:	a36a      	add	r3, pc, #424	; (adr r3, 8003b30 <_dtoa_r+0x2f0>)
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f7fc fe3d 	bl	8000608 <__aeabi_dmul>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4630      	mov	r0, r6
 8003994:	4639      	mov	r1, r7
 8003996:	f7fc fc81 	bl	800029c <__adddf3>
 800399a:	4606      	mov	r6, r0
 800399c:	460f      	mov	r7, r1
 800399e:	f7fd f8e3 	bl	8000b68 <__aeabi_d2iz>
 80039a2:	2200      	movs	r2, #0
 80039a4:	4682      	mov	sl, r0
 80039a6:	2300      	movs	r3, #0
 80039a8:	4630      	mov	r0, r6
 80039aa:	4639      	mov	r1, r7
 80039ac:	f7fd f89e 	bl	8000aec <__aeabi_dcmplt>
 80039b0:	b148      	cbz	r0, 80039c6 <_dtoa_r+0x186>
 80039b2:	4650      	mov	r0, sl
 80039b4:	f7fc fdbe 	bl	8000534 <__aeabi_i2d>
 80039b8:	4632      	mov	r2, r6
 80039ba:	463b      	mov	r3, r7
 80039bc:	f7fd f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 80039c0:	b908      	cbnz	r0, 80039c6 <_dtoa_r+0x186>
 80039c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80039c6:	f1ba 0f16 	cmp.w	sl, #22
 80039ca:	d854      	bhi.n	8003a76 <_dtoa_r+0x236>
 80039cc:	4b61      	ldr	r3, [pc, #388]	; (8003b54 <_dtoa_r+0x314>)
 80039ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80039da:	f7fd f887 	bl	8000aec <__aeabi_dcmplt>
 80039de:	2800      	cmp	r0, #0
 80039e0:	d04b      	beq.n	8003a7a <_dtoa_r+0x23a>
 80039e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80039e6:	2300      	movs	r3, #0
 80039e8:	930e      	str	r3, [sp, #56]	; 0x38
 80039ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80039ec:	1b5d      	subs	r5, r3, r5
 80039ee:	1e6b      	subs	r3, r5, #1
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	bf43      	ittte	mi
 80039f4:	2300      	movmi	r3, #0
 80039f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80039fa:	9304      	strmi	r3, [sp, #16]
 80039fc:	f04f 0800 	movpl.w	r8, #0
 8003a00:	f1ba 0f00 	cmp.w	sl, #0
 8003a04:	db3b      	blt.n	8003a7e <_dtoa_r+0x23e>
 8003a06:	9b04      	ldr	r3, [sp, #16]
 8003a08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003a0c:	4453      	add	r3, sl
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9306      	str	r3, [sp, #24]
 8003a14:	9b05      	ldr	r3, [sp, #20]
 8003a16:	2b09      	cmp	r3, #9
 8003a18:	d869      	bhi.n	8003aee <_dtoa_r+0x2ae>
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	bfc4      	itt	gt
 8003a1e:	3b04      	subgt	r3, #4
 8003a20:	9305      	strgt	r3, [sp, #20]
 8003a22:	9b05      	ldr	r3, [sp, #20]
 8003a24:	f1a3 0302 	sub.w	r3, r3, #2
 8003a28:	bfcc      	ite	gt
 8003a2a:	2500      	movgt	r5, #0
 8003a2c:	2501      	movle	r5, #1
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d869      	bhi.n	8003b06 <_dtoa_r+0x2c6>
 8003a32:	e8df f003 	tbb	[pc, r3]
 8003a36:	4e2c      	.short	0x4e2c
 8003a38:	5a4c      	.short	0x5a4c
 8003a3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003a3e:	441d      	add	r5, r3
 8003a40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	bfc1      	itttt	gt
 8003a48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003a4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003a50:	fa09 f303 	lslgt.w	r3, r9, r3
 8003a54:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003a58:	bfda      	itte	le
 8003a5a:	f1c3 0320 	rsble	r3, r3, #32
 8003a5e:	fa06 f003 	lslle.w	r0, r6, r3
 8003a62:	4318      	orrgt	r0, r3
 8003a64:	f7fc fd56 	bl	8000514 <__aeabi_ui2d>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	4606      	mov	r6, r0
 8003a6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003a70:	3d01      	subs	r5, #1
 8003a72:	9310      	str	r3, [sp, #64]	; 0x40
 8003a74:	e771      	b.n	800395a <_dtoa_r+0x11a>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e7b6      	b.n	80039e8 <_dtoa_r+0x1a8>
 8003a7a:	900e      	str	r0, [sp, #56]	; 0x38
 8003a7c:	e7b5      	b.n	80039ea <_dtoa_r+0x1aa>
 8003a7e:	f1ca 0300 	rsb	r3, sl, #0
 8003a82:	9306      	str	r3, [sp, #24]
 8003a84:	2300      	movs	r3, #0
 8003a86:	eba8 080a 	sub.w	r8, r8, sl
 8003a8a:	930d      	str	r3, [sp, #52]	; 0x34
 8003a8c:	e7c2      	b.n	8003a14 <_dtoa_r+0x1d4>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	9308      	str	r3, [sp, #32]
 8003a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	dc39      	bgt.n	8003b0c <_dtoa_r+0x2cc>
 8003a98:	f04f 0901 	mov.w	r9, #1
 8003a9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003aa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	6042      	str	r2, [r0, #4]
 8003aac:	2204      	movs	r2, #4
 8003aae:	f102 0614 	add.w	r6, r2, #20
 8003ab2:	429e      	cmp	r6, r3
 8003ab4:	6841      	ldr	r1, [r0, #4]
 8003ab6:	d92f      	bls.n	8003b18 <_dtoa_r+0x2d8>
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f000 feeb 	bl	8004894 <_Balloc>
 8003abe:	9000      	str	r0, [sp, #0]
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d14b      	bne.n	8003b5c <_dtoa_r+0x31c>
 8003ac4:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <_dtoa_r+0x318>)
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003acc:	e6d1      	b.n	8003872 <_dtoa_r+0x32>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e7de      	b.n	8003a90 <_dtoa_r+0x250>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9308      	str	r3, [sp, #32]
 8003ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ad8:	eb0a 0903 	add.w	r9, sl, r3
 8003adc:	f109 0301 	add.w	r3, r9, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	bfb8      	it	lt
 8003ae6:	2301      	movlt	r3, #1
 8003ae8:	e7dd      	b.n	8003aa6 <_dtoa_r+0x266>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e7f2      	b.n	8003ad4 <_dtoa_r+0x294>
 8003aee:	2501      	movs	r5, #1
 8003af0:	2300      	movs	r3, #0
 8003af2:	9305      	str	r3, [sp, #20]
 8003af4:	9508      	str	r5, [sp, #32]
 8003af6:	f04f 39ff 	mov.w	r9, #4294967295
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b00:	2312      	movs	r3, #18
 8003b02:	9209      	str	r2, [sp, #36]	; 0x24
 8003b04:	e7cf      	b.n	8003aa6 <_dtoa_r+0x266>
 8003b06:	2301      	movs	r3, #1
 8003b08:	9308      	str	r3, [sp, #32]
 8003b0a:	e7f4      	b.n	8003af6 <_dtoa_r+0x2b6>
 8003b0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003b10:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b14:	464b      	mov	r3, r9
 8003b16:	e7c6      	b.n	8003aa6 <_dtoa_r+0x266>
 8003b18:	3101      	adds	r1, #1
 8003b1a:	6041      	str	r1, [r0, #4]
 8003b1c:	0052      	lsls	r2, r2, #1
 8003b1e:	e7c6      	b.n	8003aae <_dtoa_r+0x26e>
 8003b20:	636f4361 	.word	0x636f4361
 8003b24:	3fd287a7 	.word	0x3fd287a7
 8003b28:	8b60c8b3 	.word	0x8b60c8b3
 8003b2c:	3fc68a28 	.word	0x3fc68a28
 8003b30:	509f79fb 	.word	0x509f79fb
 8003b34:	3fd34413 	.word	0x3fd34413
 8003b38:	08005725 	.word	0x08005725
 8003b3c:	0800573c 	.word	0x0800573c
 8003b40:	7ff00000 	.word	0x7ff00000
 8003b44:	08005721 	.word	0x08005721
 8003b48:	08005718 	.word	0x08005718
 8003b4c:	080056f5 	.word	0x080056f5
 8003b50:	3ff80000 	.word	0x3ff80000
 8003b54:	08005898 	.word	0x08005898
 8003b58:	0800579b 	.word	0x0800579b
 8003b5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b5e:	9a00      	ldr	r2, [sp, #0]
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	9b01      	ldr	r3, [sp, #4]
 8003b64:	2b0e      	cmp	r3, #14
 8003b66:	f200 80ad 	bhi.w	8003cc4 <_dtoa_r+0x484>
 8003b6a:	2d00      	cmp	r5, #0
 8003b6c:	f000 80aa 	beq.w	8003cc4 <_dtoa_r+0x484>
 8003b70:	f1ba 0f00 	cmp.w	sl, #0
 8003b74:	dd36      	ble.n	8003be4 <_dtoa_r+0x3a4>
 8003b76:	4ac3      	ldr	r2, [pc, #780]	; (8003e84 <_dtoa_r+0x644>)
 8003b78:	f00a 030f 	and.w	r3, sl, #15
 8003b7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003b80:	ed93 7b00 	vldr	d7, [r3]
 8003b84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003b88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8003b8c:	eeb0 8a47 	vmov.f32	s16, s14
 8003b90:	eef0 8a67 	vmov.f32	s17, s15
 8003b94:	d016      	beq.n	8003bc4 <_dtoa_r+0x384>
 8003b96:	4bbc      	ldr	r3, [pc, #752]	; (8003e88 <_dtoa_r+0x648>)
 8003b98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ba0:	f7fc fe5c 	bl	800085c <__aeabi_ddiv>
 8003ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ba8:	f007 070f 	and.w	r7, r7, #15
 8003bac:	2503      	movs	r5, #3
 8003bae:	4eb6      	ldr	r6, [pc, #728]	; (8003e88 <_dtoa_r+0x648>)
 8003bb0:	b957      	cbnz	r7, 8003bc8 <_dtoa_r+0x388>
 8003bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bb6:	ec53 2b18 	vmov	r2, r3, d8
 8003bba:	f7fc fe4f 	bl	800085c <__aeabi_ddiv>
 8003bbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bc2:	e029      	b.n	8003c18 <_dtoa_r+0x3d8>
 8003bc4:	2502      	movs	r5, #2
 8003bc6:	e7f2      	b.n	8003bae <_dtoa_r+0x36e>
 8003bc8:	07f9      	lsls	r1, r7, #31
 8003bca:	d508      	bpl.n	8003bde <_dtoa_r+0x39e>
 8003bcc:	ec51 0b18 	vmov	r0, r1, d8
 8003bd0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003bd4:	f7fc fd18 	bl	8000608 <__aeabi_dmul>
 8003bd8:	ec41 0b18 	vmov	d8, r0, r1
 8003bdc:	3501      	adds	r5, #1
 8003bde:	107f      	asrs	r7, r7, #1
 8003be0:	3608      	adds	r6, #8
 8003be2:	e7e5      	b.n	8003bb0 <_dtoa_r+0x370>
 8003be4:	f000 80a6 	beq.w	8003d34 <_dtoa_r+0x4f4>
 8003be8:	f1ca 0600 	rsb	r6, sl, #0
 8003bec:	4ba5      	ldr	r3, [pc, #660]	; (8003e84 <_dtoa_r+0x644>)
 8003bee:	4fa6      	ldr	r7, [pc, #664]	; (8003e88 <_dtoa_r+0x648>)
 8003bf0:	f006 020f 	and.w	r2, r6, #15
 8003bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c00:	f7fc fd02 	bl	8000608 <__aeabi_dmul>
 8003c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c08:	1136      	asrs	r6, r6, #4
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2502      	movs	r5, #2
 8003c0e:	2e00      	cmp	r6, #0
 8003c10:	f040 8085 	bne.w	8003d1e <_dtoa_r+0x4de>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1d2      	bne.n	8003bbe <_dtoa_r+0x37e>
 8003c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 808c 	beq.w	8003d38 <_dtoa_r+0x4f8>
 8003c20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003c24:	4b99      	ldr	r3, [pc, #612]	; (8003e8c <_dtoa_r+0x64c>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	4630      	mov	r0, r6
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	f7fc ff5e 	bl	8000aec <__aeabi_dcmplt>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	f000 8081 	beq.w	8003d38 <_dtoa_r+0x4f8>
 8003c36:	9b01      	ldr	r3, [sp, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d07d      	beq.n	8003d38 <_dtoa_r+0x4f8>
 8003c3c:	f1b9 0f00 	cmp.w	r9, #0
 8003c40:	dd3c      	ble.n	8003cbc <_dtoa_r+0x47c>
 8003c42:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003c46:	9307      	str	r3, [sp, #28]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4b91      	ldr	r3, [pc, #580]	; (8003e90 <_dtoa_r+0x650>)
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	4639      	mov	r1, r7
 8003c50:	f7fc fcda 	bl	8000608 <__aeabi_dmul>
 8003c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c58:	3501      	adds	r5, #1
 8003c5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8003c5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003c62:	4628      	mov	r0, r5
 8003c64:	f7fc fc66 	bl	8000534 <__aeabi_i2d>
 8003c68:	4632      	mov	r2, r6
 8003c6a:	463b      	mov	r3, r7
 8003c6c:	f7fc fccc 	bl	8000608 <__aeabi_dmul>
 8003c70:	4b88      	ldr	r3, [pc, #544]	; (8003e94 <_dtoa_r+0x654>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	f7fc fb12 	bl	800029c <__adddf3>
 8003c78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c80:	9303      	str	r3, [sp, #12]
 8003c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d15c      	bne.n	8003d42 <_dtoa_r+0x502>
 8003c88:	4b83      	ldr	r3, [pc, #524]	; (8003e98 <_dtoa_r+0x658>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	4639      	mov	r1, r7
 8003c90:	f7fc fb02 	bl	8000298 <__aeabi_dsub>
 8003c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c98:	4606      	mov	r6, r0
 8003c9a:	460f      	mov	r7, r1
 8003c9c:	f7fc ff44 	bl	8000b28 <__aeabi_dcmpgt>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	f040 8296 	bne.w	80041d2 <_dtoa_r+0x992>
 8003ca6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003caa:	4630      	mov	r0, r6
 8003cac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003cb0:	4639      	mov	r1, r7
 8003cb2:	f7fc ff1b 	bl	8000aec <__aeabi_dcmplt>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	f040 8288 	bne.w	80041cc <_dtoa_r+0x98c>
 8003cbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003cc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f2c0 8158 	blt.w	8003f7c <_dtoa_r+0x73c>
 8003ccc:	f1ba 0f0e 	cmp.w	sl, #14
 8003cd0:	f300 8154 	bgt.w	8003f7c <_dtoa_r+0x73c>
 8003cd4:	4b6b      	ldr	r3, [pc, #428]	; (8003e84 <_dtoa_r+0x644>)
 8003cd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003cda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f280 80e3 	bge.w	8003eac <_dtoa_r+0x66c>
 8003ce6:	9b01      	ldr	r3, [sp, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f300 80df 	bgt.w	8003eac <_dtoa_r+0x66c>
 8003cee:	f040 826d 	bne.w	80041cc <_dtoa_r+0x98c>
 8003cf2:	4b69      	ldr	r3, [pc, #420]	; (8003e98 <_dtoa_r+0x658>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	4640      	mov	r0, r8
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	f7fc fc85 	bl	8000608 <__aeabi_dmul>
 8003cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d02:	f7fc ff07 	bl	8000b14 <__aeabi_dcmpge>
 8003d06:	9e01      	ldr	r6, [sp, #4]
 8003d08:	4637      	mov	r7, r6
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	f040 8243 	bne.w	8004196 <_dtoa_r+0x956>
 8003d10:	9d00      	ldr	r5, [sp, #0]
 8003d12:	2331      	movs	r3, #49	; 0x31
 8003d14:	f805 3b01 	strb.w	r3, [r5], #1
 8003d18:	f10a 0a01 	add.w	sl, sl, #1
 8003d1c:	e23f      	b.n	800419e <_dtoa_r+0x95e>
 8003d1e:	07f2      	lsls	r2, r6, #31
 8003d20:	d505      	bpl.n	8003d2e <_dtoa_r+0x4ee>
 8003d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d26:	f7fc fc6f 	bl	8000608 <__aeabi_dmul>
 8003d2a:	3501      	adds	r5, #1
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	1076      	asrs	r6, r6, #1
 8003d30:	3708      	adds	r7, #8
 8003d32:	e76c      	b.n	8003c0e <_dtoa_r+0x3ce>
 8003d34:	2502      	movs	r5, #2
 8003d36:	e76f      	b.n	8003c18 <_dtoa_r+0x3d8>
 8003d38:	9b01      	ldr	r3, [sp, #4]
 8003d3a:	f8cd a01c 	str.w	sl, [sp, #28]
 8003d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8003d40:	e78d      	b.n	8003c5e <_dtoa_r+0x41e>
 8003d42:	9900      	ldr	r1, [sp, #0]
 8003d44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d48:	4b4e      	ldr	r3, [pc, #312]	; (8003e84 <_dtoa_r+0x644>)
 8003d4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d4e:	4401      	add	r1, r0
 8003d50:	9102      	str	r1, [sp, #8]
 8003d52:	9908      	ldr	r1, [sp, #32]
 8003d54:	eeb0 8a47 	vmov.f32	s16, s14
 8003d58:	eef0 8a67 	vmov.f32	s17, s15
 8003d5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003d64:	2900      	cmp	r1, #0
 8003d66:	d045      	beq.n	8003df4 <_dtoa_r+0x5b4>
 8003d68:	494c      	ldr	r1, [pc, #304]	; (8003e9c <_dtoa_r+0x65c>)
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f7fc fd76 	bl	800085c <__aeabi_ddiv>
 8003d70:	ec53 2b18 	vmov	r2, r3, d8
 8003d74:	f7fc fa90 	bl	8000298 <__aeabi_dsub>
 8003d78:	9d00      	ldr	r5, [sp, #0]
 8003d7a:	ec41 0b18 	vmov	d8, r0, r1
 8003d7e:	4639      	mov	r1, r7
 8003d80:	4630      	mov	r0, r6
 8003d82:	f7fc fef1 	bl	8000b68 <__aeabi_d2iz>
 8003d86:	900c      	str	r0, [sp, #48]	; 0x30
 8003d88:	f7fc fbd4 	bl	8000534 <__aeabi_i2d>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4630      	mov	r0, r6
 8003d92:	4639      	mov	r1, r7
 8003d94:	f7fc fa80 	bl	8000298 <__aeabi_dsub>
 8003d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d9a:	3330      	adds	r3, #48	; 0x30
 8003d9c:	f805 3b01 	strb.w	r3, [r5], #1
 8003da0:	ec53 2b18 	vmov	r2, r3, d8
 8003da4:	4606      	mov	r6, r0
 8003da6:	460f      	mov	r7, r1
 8003da8:	f7fc fea0 	bl	8000aec <__aeabi_dcmplt>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d165      	bne.n	8003e7c <_dtoa_r+0x63c>
 8003db0:	4632      	mov	r2, r6
 8003db2:	463b      	mov	r3, r7
 8003db4:	4935      	ldr	r1, [pc, #212]	; (8003e8c <_dtoa_r+0x64c>)
 8003db6:	2000      	movs	r0, #0
 8003db8:	f7fc fa6e 	bl	8000298 <__aeabi_dsub>
 8003dbc:	ec53 2b18 	vmov	r2, r3, d8
 8003dc0:	f7fc fe94 	bl	8000aec <__aeabi_dcmplt>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	f040 80b9 	bne.w	8003f3c <_dtoa_r+0x6fc>
 8003dca:	9b02      	ldr	r3, [sp, #8]
 8003dcc:	429d      	cmp	r5, r3
 8003dce:	f43f af75 	beq.w	8003cbc <_dtoa_r+0x47c>
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <_dtoa_r+0x650>)
 8003dd4:	ec51 0b18 	vmov	r0, r1, d8
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f7fc fc15 	bl	8000608 <__aeabi_dmul>
 8003dde:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <_dtoa_r+0x650>)
 8003de0:	ec41 0b18 	vmov	d8, r0, r1
 8003de4:	2200      	movs	r2, #0
 8003de6:	4630      	mov	r0, r6
 8003de8:	4639      	mov	r1, r7
 8003dea:	f7fc fc0d 	bl	8000608 <__aeabi_dmul>
 8003dee:	4606      	mov	r6, r0
 8003df0:	460f      	mov	r7, r1
 8003df2:	e7c4      	b.n	8003d7e <_dtoa_r+0x53e>
 8003df4:	ec51 0b17 	vmov	r0, r1, d7
 8003df8:	f7fc fc06 	bl	8000608 <__aeabi_dmul>
 8003dfc:	9b02      	ldr	r3, [sp, #8]
 8003dfe:	9d00      	ldr	r5, [sp, #0]
 8003e00:	930c      	str	r3, [sp, #48]	; 0x30
 8003e02:	ec41 0b18 	vmov	d8, r0, r1
 8003e06:	4639      	mov	r1, r7
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f7fc fead 	bl	8000b68 <__aeabi_d2iz>
 8003e0e:	9011      	str	r0, [sp, #68]	; 0x44
 8003e10:	f7fc fb90 	bl	8000534 <__aeabi_i2d>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4630      	mov	r0, r6
 8003e1a:	4639      	mov	r1, r7
 8003e1c:	f7fc fa3c 	bl	8000298 <__aeabi_dsub>
 8003e20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e22:	3330      	adds	r3, #48	; 0x30
 8003e24:	f805 3b01 	strb.w	r3, [r5], #1
 8003e28:	9b02      	ldr	r3, [sp, #8]
 8003e2a:	429d      	cmp	r5, r3
 8003e2c:	4606      	mov	r6, r0
 8003e2e:	460f      	mov	r7, r1
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	d134      	bne.n	8003ea0 <_dtoa_r+0x660>
 8003e36:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <_dtoa_r+0x65c>)
 8003e38:	ec51 0b18 	vmov	r0, r1, d8
 8003e3c:	f7fc fa2e 	bl	800029c <__adddf3>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4630      	mov	r0, r6
 8003e46:	4639      	mov	r1, r7
 8003e48:	f7fc fe6e 	bl	8000b28 <__aeabi_dcmpgt>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d175      	bne.n	8003f3c <_dtoa_r+0x6fc>
 8003e50:	ec53 2b18 	vmov	r2, r3, d8
 8003e54:	4911      	ldr	r1, [pc, #68]	; (8003e9c <_dtoa_r+0x65c>)
 8003e56:	2000      	movs	r0, #0
 8003e58:	f7fc fa1e 	bl	8000298 <__aeabi_dsub>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4630      	mov	r0, r6
 8003e62:	4639      	mov	r1, r7
 8003e64:	f7fc fe42 	bl	8000aec <__aeabi_dcmplt>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	f43f af27 	beq.w	8003cbc <_dtoa_r+0x47c>
 8003e6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e70:	1e6b      	subs	r3, r5, #1
 8003e72:	930c      	str	r3, [sp, #48]	; 0x30
 8003e74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003e78:	2b30      	cmp	r3, #48	; 0x30
 8003e7a:	d0f8      	beq.n	8003e6e <_dtoa_r+0x62e>
 8003e7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003e80:	e04a      	b.n	8003f18 <_dtoa_r+0x6d8>
 8003e82:	bf00      	nop
 8003e84:	08005898 	.word	0x08005898
 8003e88:	08005870 	.word	0x08005870
 8003e8c:	3ff00000 	.word	0x3ff00000
 8003e90:	40240000 	.word	0x40240000
 8003e94:	401c0000 	.word	0x401c0000
 8003e98:	40140000 	.word	0x40140000
 8003e9c:	3fe00000 	.word	0x3fe00000
 8003ea0:	4baf      	ldr	r3, [pc, #700]	; (8004160 <_dtoa_r+0x920>)
 8003ea2:	f7fc fbb1 	bl	8000608 <__aeabi_dmul>
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	460f      	mov	r7, r1
 8003eaa:	e7ac      	b.n	8003e06 <_dtoa_r+0x5c6>
 8003eac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003eb0:	9d00      	ldr	r5, [sp, #0]
 8003eb2:	4642      	mov	r2, r8
 8003eb4:	464b      	mov	r3, r9
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	4639      	mov	r1, r7
 8003eba:	f7fc fccf 	bl	800085c <__aeabi_ddiv>
 8003ebe:	f7fc fe53 	bl	8000b68 <__aeabi_d2iz>
 8003ec2:	9002      	str	r0, [sp, #8]
 8003ec4:	f7fc fb36 	bl	8000534 <__aeabi_i2d>
 8003ec8:	4642      	mov	r2, r8
 8003eca:	464b      	mov	r3, r9
 8003ecc:	f7fc fb9c 	bl	8000608 <__aeabi_dmul>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	4639      	mov	r1, r7
 8003ed8:	f7fc f9de 	bl	8000298 <__aeabi_dsub>
 8003edc:	9e02      	ldr	r6, [sp, #8]
 8003ede:	9f01      	ldr	r7, [sp, #4]
 8003ee0:	3630      	adds	r6, #48	; 0x30
 8003ee2:	f805 6b01 	strb.w	r6, [r5], #1
 8003ee6:	9e00      	ldr	r6, [sp, #0]
 8003ee8:	1bae      	subs	r6, r5, r6
 8003eea:	42b7      	cmp	r7, r6
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	d137      	bne.n	8003f62 <_dtoa_r+0x722>
 8003ef2:	f7fc f9d3 	bl	800029c <__adddf3>
 8003ef6:	4642      	mov	r2, r8
 8003ef8:	464b      	mov	r3, r9
 8003efa:	4606      	mov	r6, r0
 8003efc:	460f      	mov	r7, r1
 8003efe:	f7fc fe13 	bl	8000b28 <__aeabi_dcmpgt>
 8003f02:	b9c8      	cbnz	r0, 8003f38 <_dtoa_r+0x6f8>
 8003f04:	4642      	mov	r2, r8
 8003f06:	464b      	mov	r3, r9
 8003f08:	4630      	mov	r0, r6
 8003f0a:	4639      	mov	r1, r7
 8003f0c:	f7fc fde4 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f10:	b110      	cbz	r0, 8003f18 <_dtoa_r+0x6d8>
 8003f12:	9b02      	ldr	r3, [sp, #8]
 8003f14:	07d9      	lsls	r1, r3, #31
 8003f16:	d40f      	bmi.n	8003f38 <_dtoa_r+0x6f8>
 8003f18:	4620      	mov	r0, r4
 8003f1a:	4659      	mov	r1, fp
 8003f1c:	f000 fcfa 	bl	8004914 <_Bfree>
 8003f20:	2300      	movs	r3, #0
 8003f22:	702b      	strb	r3, [r5, #0]
 8003f24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f26:	f10a 0001 	add.w	r0, sl, #1
 8003f2a:	6018      	str	r0, [r3, #0]
 8003f2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f43f acd8 	beq.w	80038e4 <_dtoa_r+0xa4>
 8003f34:	601d      	str	r5, [r3, #0]
 8003f36:	e4d5      	b.n	80038e4 <_dtoa_r+0xa4>
 8003f38:	f8cd a01c 	str.w	sl, [sp, #28]
 8003f3c:	462b      	mov	r3, r5
 8003f3e:	461d      	mov	r5, r3
 8003f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003f44:	2a39      	cmp	r2, #57	; 0x39
 8003f46:	d108      	bne.n	8003f5a <_dtoa_r+0x71a>
 8003f48:	9a00      	ldr	r2, [sp, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d1f7      	bne.n	8003f3e <_dtoa_r+0x6fe>
 8003f4e:	9a07      	ldr	r2, [sp, #28]
 8003f50:	9900      	ldr	r1, [sp, #0]
 8003f52:	3201      	adds	r2, #1
 8003f54:	9207      	str	r2, [sp, #28]
 8003f56:	2230      	movs	r2, #48	; 0x30
 8003f58:	700a      	strb	r2, [r1, #0]
 8003f5a:	781a      	ldrb	r2, [r3, #0]
 8003f5c:	3201      	adds	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	e78c      	b.n	8003e7c <_dtoa_r+0x63c>
 8003f62:	4b7f      	ldr	r3, [pc, #508]	; (8004160 <_dtoa_r+0x920>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	f7fc fb4f 	bl	8000608 <__aeabi_dmul>
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	4606      	mov	r6, r0
 8003f70:	460f      	mov	r7, r1
 8003f72:	f7fc fdb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d09b      	beq.n	8003eb2 <_dtoa_r+0x672>
 8003f7a:	e7cd      	b.n	8003f18 <_dtoa_r+0x6d8>
 8003f7c:	9a08      	ldr	r2, [sp, #32]
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	f000 80c4 	beq.w	800410c <_dtoa_r+0x8cc>
 8003f84:	9a05      	ldr	r2, [sp, #20]
 8003f86:	2a01      	cmp	r2, #1
 8003f88:	f300 80a8 	bgt.w	80040dc <_dtoa_r+0x89c>
 8003f8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	f000 80a0 	beq.w	80040d4 <_dtoa_r+0x894>
 8003f94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003f98:	9e06      	ldr	r6, [sp, #24]
 8003f9a:	4645      	mov	r5, r8
 8003f9c:	9a04      	ldr	r2, [sp, #16]
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	441a      	add	r2, r3
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	4498      	add	r8, r3
 8003fa6:	9204      	str	r2, [sp, #16]
 8003fa8:	f000 fd70 	bl	8004a8c <__i2b>
 8003fac:	4607      	mov	r7, r0
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	dd0b      	ble.n	8003fca <_dtoa_r+0x78a>
 8003fb2:	9b04      	ldr	r3, [sp, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	dd08      	ble.n	8003fca <_dtoa_r+0x78a>
 8003fb8:	42ab      	cmp	r3, r5
 8003fba:	9a04      	ldr	r2, [sp, #16]
 8003fbc:	bfa8      	it	ge
 8003fbe:	462b      	movge	r3, r5
 8003fc0:	eba8 0803 	sub.w	r8, r8, r3
 8003fc4:	1aed      	subs	r5, r5, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	9304      	str	r3, [sp, #16]
 8003fca:	9b06      	ldr	r3, [sp, #24]
 8003fcc:	b1fb      	cbz	r3, 800400e <_dtoa_r+0x7ce>
 8003fce:	9b08      	ldr	r3, [sp, #32]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 809f 	beq.w	8004114 <_dtoa_r+0x8d4>
 8003fd6:	2e00      	cmp	r6, #0
 8003fd8:	dd11      	ble.n	8003ffe <_dtoa_r+0x7be>
 8003fda:	4639      	mov	r1, r7
 8003fdc:	4632      	mov	r2, r6
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f000 fe10 	bl	8004c04 <__pow5mult>
 8003fe4:	465a      	mov	r2, fp
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	4607      	mov	r7, r0
 8003fea:	4620      	mov	r0, r4
 8003fec:	f000 fd64 	bl	8004ab8 <__multiply>
 8003ff0:	4659      	mov	r1, fp
 8003ff2:	9007      	str	r0, [sp, #28]
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f000 fc8d 	bl	8004914 <_Bfree>
 8003ffa:	9b07      	ldr	r3, [sp, #28]
 8003ffc:	469b      	mov	fp, r3
 8003ffe:	9b06      	ldr	r3, [sp, #24]
 8004000:	1b9a      	subs	r2, r3, r6
 8004002:	d004      	beq.n	800400e <_dtoa_r+0x7ce>
 8004004:	4659      	mov	r1, fp
 8004006:	4620      	mov	r0, r4
 8004008:	f000 fdfc 	bl	8004c04 <__pow5mult>
 800400c:	4683      	mov	fp, r0
 800400e:	2101      	movs	r1, #1
 8004010:	4620      	mov	r0, r4
 8004012:	f000 fd3b 	bl	8004a8c <__i2b>
 8004016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004018:	2b00      	cmp	r3, #0
 800401a:	4606      	mov	r6, r0
 800401c:	dd7c      	ble.n	8004118 <_dtoa_r+0x8d8>
 800401e:	461a      	mov	r2, r3
 8004020:	4601      	mov	r1, r0
 8004022:	4620      	mov	r0, r4
 8004024:	f000 fdee 	bl	8004c04 <__pow5mult>
 8004028:	9b05      	ldr	r3, [sp, #20]
 800402a:	2b01      	cmp	r3, #1
 800402c:	4606      	mov	r6, r0
 800402e:	dd76      	ble.n	800411e <_dtoa_r+0x8de>
 8004030:	2300      	movs	r3, #0
 8004032:	9306      	str	r3, [sp, #24]
 8004034:	6933      	ldr	r3, [r6, #16]
 8004036:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800403a:	6918      	ldr	r0, [r3, #16]
 800403c:	f000 fcd6 	bl	80049ec <__hi0bits>
 8004040:	f1c0 0020 	rsb	r0, r0, #32
 8004044:	9b04      	ldr	r3, [sp, #16]
 8004046:	4418      	add	r0, r3
 8004048:	f010 001f 	ands.w	r0, r0, #31
 800404c:	f000 8086 	beq.w	800415c <_dtoa_r+0x91c>
 8004050:	f1c0 0320 	rsb	r3, r0, #32
 8004054:	2b04      	cmp	r3, #4
 8004056:	dd7f      	ble.n	8004158 <_dtoa_r+0x918>
 8004058:	f1c0 001c 	rsb	r0, r0, #28
 800405c:	9b04      	ldr	r3, [sp, #16]
 800405e:	4403      	add	r3, r0
 8004060:	4480      	add	r8, r0
 8004062:	4405      	add	r5, r0
 8004064:	9304      	str	r3, [sp, #16]
 8004066:	f1b8 0f00 	cmp.w	r8, #0
 800406a:	dd05      	ble.n	8004078 <_dtoa_r+0x838>
 800406c:	4659      	mov	r1, fp
 800406e:	4642      	mov	r2, r8
 8004070:	4620      	mov	r0, r4
 8004072:	f000 fe21 	bl	8004cb8 <__lshift>
 8004076:	4683      	mov	fp, r0
 8004078:	9b04      	ldr	r3, [sp, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	dd05      	ble.n	800408a <_dtoa_r+0x84a>
 800407e:	4631      	mov	r1, r6
 8004080:	461a      	mov	r2, r3
 8004082:	4620      	mov	r0, r4
 8004084:	f000 fe18 	bl	8004cb8 <__lshift>
 8004088:	4606      	mov	r6, r0
 800408a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800408c:	2b00      	cmp	r3, #0
 800408e:	d069      	beq.n	8004164 <_dtoa_r+0x924>
 8004090:	4631      	mov	r1, r6
 8004092:	4658      	mov	r0, fp
 8004094:	f000 fe7c 	bl	8004d90 <__mcmp>
 8004098:	2800      	cmp	r0, #0
 800409a:	da63      	bge.n	8004164 <_dtoa_r+0x924>
 800409c:	2300      	movs	r3, #0
 800409e:	4659      	mov	r1, fp
 80040a0:	220a      	movs	r2, #10
 80040a2:	4620      	mov	r0, r4
 80040a4:	f000 fc58 	bl	8004958 <__multadd>
 80040a8:	9b08      	ldr	r3, [sp, #32]
 80040aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80040ae:	4683      	mov	fp, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 818f 	beq.w	80043d4 <_dtoa_r+0xb94>
 80040b6:	4639      	mov	r1, r7
 80040b8:	2300      	movs	r3, #0
 80040ba:	220a      	movs	r2, #10
 80040bc:	4620      	mov	r0, r4
 80040be:	f000 fc4b 	bl	8004958 <__multadd>
 80040c2:	f1b9 0f00 	cmp.w	r9, #0
 80040c6:	4607      	mov	r7, r0
 80040c8:	f300 808e 	bgt.w	80041e8 <_dtoa_r+0x9a8>
 80040cc:	9b05      	ldr	r3, [sp, #20]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	dc50      	bgt.n	8004174 <_dtoa_r+0x934>
 80040d2:	e089      	b.n	80041e8 <_dtoa_r+0x9a8>
 80040d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80040da:	e75d      	b.n	8003f98 <_dtoa_r+0x758>
 80040dc:	9b01      	ldr	r3, [sp, #4]
 80040de:	1e5e      	subs	r6, r3, #1
 80040e0:	9b06      	ldr	r3, [sp, #24]
 80040e2:	42b3      	cmp	r3, r6
 80040e4:	bfbf      	itttt	lt
 80040e6:	9b06      	ldrlt	r3, [sp, #24]
 80040e8:	9606      	strlt	r6, [sp, #24]
 80040ea:	1af2      	sublt	r2, r6, r3
 80040ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80040ee:	bfb6      	itet	lt
 80040f0:	189b      	addlt	r3, r3, r2
 80040f2:	1b9e      	subge	r6, r3, r6
 80040f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80040f6:	9b01      	ldr	r3, [sp, #4]
 80040f8:	bfb8      	it	lt
 80040fa:	2600      	movlt	r6, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bfb5      	itete	lt
 8004100:	eba8 0503 	sublt.w	r5, r8, r3
 8004104:	9b01      	ldrge	r3, [sp, #4]
 8004106:	2300      	movlt	r3, #0
 8004108:	4645      	movge	r5, r8
 800410a:	e747      	b.n	8003f9c <_dtoa_r+0x75c>
 800410c:	9e06      	ldr	r6, [sp, #24]
 800410e:	9f08      	ldr	r7, [sp, #32]
 8004110:	4645      	mov	r5, r8
 8004112:	e74c      	b.n	8003fae <_dtoa_r+0x76e>
 8004114:	9a06      	ldr	r2, [sp, #24]
 8004116:	e775      	b.n	8004004 <_dtoa_r+0x7c4>
 8004118:	9b05      	ldr	r3, [sp, #20]
 800411a:	2b01      	cmp	r3, #1
 800411c:	dc18      	bgt.n	8004150 <_dtoa_r+0x910>
 800411e:	9b02      	ldr	r3, [sp, #8]
 8004120:	b9b3      	cbnz	r3, 8004150 <_dtoa_r+0x910>
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004128:	b9a3      	cbnz	r3, 8004154 <_dtoa_r+0x914>
 800412a:	9b03      	ldr	r3, [sp, #12]
 800412c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004130:	0d1b      	lsrs	r3, r3, #20
 8004132:	051b      	lsls	r3, r3, #20
 8004134:	b12b      	cbz	r3, 8004142 <_dtoa_r+0x902>
 8004136:	9b04      	ldr	r3, [sp, #16]
 8004138:	3301      	adds	r3, #1
 800413a:	9304      	str	r3, [sp, #16]
 800413c:	f108 0801 	add.w	r8, r8, #1
 8004140:	2301      	movs	r3, #1
 8004142:	9306      	str	r3, [sp, #24]
 8004144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004146:	2b00      	cmp	r3, #0
 8004148:	f47f af74 	bne.w	8004034 <_dtoa_r+0x7f4>
 800414c:	2001      	movs	r0, #1
 800414e:	e779      	b.n	8004044 <_dtoa_r+0x804>
 8004150:	2300      	movs	r3, #0
 8004152:	e7f6      	b.n	8004142 <_dtoa_r+0x902>
 8004154:	9b02      	ldr	r3, [sp, #8]
 8004156:	e7f4      	b.n	8004142 <_dtoa_r+0x902>
 8004158:	d085      	beq.n	8004066 <_dtoa_r+0x826>
 800415a:	4618      	mov	r0, r3
 800415c:	301c      	adds	r0, #28
 800415e:	e77d      	b.n	800405c <_dtoa_r+0x81c>
 8004160:	40240000 	.word	0x40240000
 8004164:	9b01      	ldr	r3, [sp, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	dc38      	bgt.n	80041dc <_dtoa_r+0x99c>
 800416a:	9b05      	ldr	r3, [sp, #20]
 800416c:	2b02      	cmp	r3, #2
 800416e:	dd35      	ble.n	80041dc <_dtoa_r+0x99c>
 8004170:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004174:	f1b9 0f00 	cmp.w	r9, #0
 8004178:	d10d      	bne.n	8004196 <_dtoa_r+0x956>
 800417a:	4631      	mov	r1, r6
 800417c:	464b      	mov	r3, r9
 800417e:	2205      	movs	r2, #5
 8004180:	4620      	mov	r0, r4
 8004182:	f000 fbe9 	bl	8004958 <__multadd>
 8004186:	4601      	mov	r1, r0
 8004188:	4606      	mov	r6, r0
 800418a:	4658      	mov	r0, fp
 800418c:	f000 fe00 	bl	8004d90 <__mcmp>
 8004190:	2800      	cmp	r0, #0
 8004192:	f73f adbd 	bgt.w	8003d10 <_dtoa_r+0x4d0>
 8004196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004198:	9d00      	ldr	r5, [sp, #0]
 800419a:	ea6f 0a03 	mvn.w	sl, r3
 800419e:	f04f 0800 	mov.w	r8, #0
 80041a2:	4631      	mov	r1, r6
 80041a4:	4620      	mov	r0, r4
 80041a6:	f000 fbb5 	bl	8004914 <_Bfree>
 80041aa:	2f00      	cmp	r7, #0
 80041ac:	f43f aeb4 	beq.w	8003f18 <_dtoa_r+0x6d8>
 80041b0:	f1b8 0f00 	cmp.w	r8, #0
 80041b4:	d005      	beq.n	80041c2 <_dtoa_r+0x982>
 80041b6:	45b8      	cmp	r8, r7
 80041b8:	d003      	beq.n	80041c2 <_dtoa_r+0x982>
 80041ba:	4641      	mov	r1, r8
 80041bc:	4620      	mov	r0, r4
 80041be:	f000 fba9 	bl	8004914 <_Bfree>
 80041c2:	4639      	mov	r1, r7
 80041c4:	4620      	mov	r0, r4
 80041c6:	f000 fba5 	bl	8004914 <_Bfree>
 80041ca:	e6a5      	b.n	8003f18 <_dtoa_r+0x6d8>
 80041cc:	2600      	movs	r6, #0
 80041ce:	4637      	mov	r7, r6
 80041d0:	e7e1      	b.n	8004196 <_dtoa_r+0x956>
 80041d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80041d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80041d8:	4637      	mov	r7, r6
 80041da:	e599      	b.n	8003d10 <_dtoa_r+0x4d0>
 80041dc:	9b08      	ldr	r3, [sp, #32]
 80041de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80fd 	beq.w	80043e2 <_dtoa_r+0xba2>
 80041e8:	2d00      	cmp	r5, #0
 80041ea:	dd05      	ble.n	80041f8 <_dtoa_r+0x9b8>
 80041ec:	4639      	mov	r1, r7
 80041ee:	462a      	mov	r2, r5
 80041f0:	4620      	mov	r0, r4
 80041f2:	f000 fd61 	bl	8004cb8 <__lshift>
 80041f6:	4607      	mov	r7, r0
 80041f8:	9b06      	ldr	r3, [sp, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d05c      	beq.n	80042b8 <_dtoa_r+0xa78>
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4620      	mov	r0, r4
 8004202:	f000 fb47 	bl	8004894 <_Balloc>
 8004206:	4605      	mov	r5, r0
 8004208:	b928      	cbnz	r0, 8004216 <_dtoa_r+0x9d6>
 800420a:	4b80      	ldr	r3, [pc, #512]	; (800440c <_dtoa_r+0xbcc>)
 800420c:	4602      	mov	r2, r0
 800420e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004212:	f7ff bb2e 	b.w	8003872 <_dtoa_r+0x32>
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	3202      	adds	r2, #2
 800421a:	0092      	lsls	r2, r2, #2
 800421c:	f107 010c 	add.w	r1, r7, #12
 8004220:	300c      	adds	r0, #12
 8004222:	f000 fb1d 	bl	8004860 <memcpy>
 8004226:	2201      	movs	r2, #1
 8004228:	4629      	mov	r1, r5
 800422a:	4620      	mov	r0, r4
 800422c:	f000 fd44 	bl	8004cb8 <__lshift>
 8004230:	9b00      	ldr	r3, [sp, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	9b00      	ldr	r3, [sp, #0]
 8004238:	444b      	add	r3, r9
 800423a:	9307      	str	r3, [sp, #28]
 800423c:	9b02      	ldr	r3, [sp, #8]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	46b8      	mov	r8, r7
 8004244:	9306      	str	r3, [sp, #24]
 8004246:	4607      	mov	r7, r0
 8004248:	9b01      	ldr	r3, [sp, #4]
 800424a:	4631      	mov	r1, r6
 800424c:	3b01      	subs	r3, #1
 800424e:	4658      	mov	r0, fp
 8004250:	9302      	str	r3, [sp, #8]
 8004252:	f7ff fa69 	bl	8003728 <quorem>
 8004256:	4603      	mov	r3, r0
 8004258:	3330      	adds	r3, #48	; 0x30
 800425a:	9004      	str	r0, [sp, #16]
 800425c:	4641      	mov	r1, r8
 800425e:	4658      	mov	r0, fp
 8004260:	9308      	str	r3, [sp, #32]
 8004262:	f000 fd95 	bl	8004d90 <__mcmp>
 8004266:	463a      	mov	r2, r7
 8004268:	4681      	mov	r9, r0
 800426a:	4631      	mov	r1, r6
 800426c:	4620      	mov	r0, r4
 800426e:	f000 fdab 	bl	8004dc8 <__mdiff>
 8004272:	68c2      	ldr	r2, [r0, #12]
 8004274:	9b08      	ldr	r3, [sp, #32]
 8004276:	4605      	mov	r5, r0
 8004278:	bb02      	cbnz	r2, 80042bc <_dtoa_r+0xa7c>
 800427a:	4601      	mov	r1, r0
 800427c:	4658      	mov	r0, fp
 800427e:	f000 fd87 	bl	8004d90 <__mcmp>
 8004282:	9b08      	ldr	r3, [sp, #32]
 8004284:	4602      	mov	r2, r0
 8004286:	4629      	mov	r1, r5
 8004288:	4620      	mov	r0, r4
 800428a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800428e:	f000 fb41 	bl	8004914 <_Bfree>
 8004292:	9b05      	ldr	r3, [sp, #20]
 8004294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004296:	9d01      	ldr	r5, [sp, #4]
 8004298:	ea43 0102 	orr.w	r1, r3, r2
 800429c:	9b06      	ldr	r3, [sp, #24]
 800429e:	430b      	orrs	r3, r1
 80042a0:	9b08      	ldr	r3, [sp, #32]
 80042a2:	d10d      	bne.n	80042c0 <_dtoa_r+0xa80>
 80042a4:	2b39      	cmp	r3, #57	; 0x39
 80042a6:	d029      	beq.n	80042fc <_dtoa_r+0xabc>
 80042a8:	f1b9 0f00 	cmp.w	r9, #0
 80042ac:	dd01      	ble.n	80042b2 <_dtoa_r+0xa72>
 80042ae:	9b04      	ldr	r3, [sp, #16]
 80042b0:	3331      	adds	r3, #49	; 0x31
 80042b2:	9a02      	ldr	r2, [sp, #8]
 80042b4:	7013      	strb	r3, [r2, #0]
 80042b6:	e774      	b.n	80041a2 <_dtoa_r+0x962>
 80042b8:	4638      	mov	r0, r7
 80042ba:	e7b9      	b.n	8004230 <_dtoa_r+0x9f0>
 80042bc:	2201      	movs	r2, #1
 80042be:	e7e2      	b.n	8004286 <_dtoa_r+0xa46>
 80042c0:	f1b9 0f00 	cmp.w	r9, #0
 80042c4:	db06      	blt.n	80042d4 <_dtoa_r+0xa94>
 80042c6:	9905      	ldr	r1, [sp, #20]
 80042c8:	ea41 0909 	orr.w	r9, r1, r9
 80042cc:	9906      	ldr	r1, [sp, #24]
 80042ce:	ea59 0101 	orrs.w	r1, r9, r1
 80042d2:	d120      	bne.n	8004316 <_dtoa_r+0xad6>
 80042d4:	2a00      	cmp	r2, #0
 80042d6:	ddec      	ble.n	80042b2 <_dtoa_r+0xa72>
 80042d8:	4659      	mov	r1, fp
 80042da:	2201      	movs	r2, #1
 80042dc:	4620      	mov	r0, r4
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	f000 fcea 	bl	8004cb8 <__lshift>
 80042e4:	4631      	mov	r1, r6
 80042e6:	4683      	mov	fp, r0
 80042e8:	f000 fd52 	bl	8004d90 <__mcmp>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	9b01      	ldr	r3, [sp, #4]
 80042f0:	dc02      	bgt.n	80042f8 <_dtoa_r+0xab8>
 80042f2:	d1de      	bne.n	80042b2 <_dtoa_r+0xa72>
 80042f4:	07da      	lsls	r2, r3, #31
 80042f6:	d5dc      	bpl.n	80042b2 <_dtoa_r+0xa72>
 80042f8:	2b39      	cmp	r3, #57	; 0x39
 80042fa:	d1d8      	bne.n	80042ae <_dtoa_r+0xa6e>
 80042fc:	9a02      	ldr	r2, [sp, #8]
 80042fe:	2339      	movs	r3, #57	; 0x39
 8004300:	7013      	strb	r3, [r2, #0]
 8004302:	462b      	mov	r3, r5
 8004304:	461d      	mov	r5, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800430c:	2a39      	cmp	r2, #57	; 0x39
 800430e:	d050      	beq.n	80043b2 <_dtoa_r+0xb72>
 8004310:	3201      	adds	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	e745      	b.n	80041a2 <_dtoa_r+0x962>
 8004316:	2a00      	cmp	r2, #0
 8004318:	dd03      	ble.n	8004322 <_dtoa_r+0xae2>
 800431a:	2b39      	cmp	r3, #57	; 0x39
 800431c:	d0ee      	beq.n	80042fc <_dtoa_r+0xabc>
 800431e:	3301      	adds	r3, #1
 8004320:	e7c7      	b.n	80042b2 <_dtoa_r+0xa72>
 8004322:	9a01      	ldr	r2, [sp, #4]
 8004324:	9907      	ldr	r1, [sp, #28]
 8004326:	f802 3c01 	strb.w	r3, [r2, #-1]
 800432a:	428a      	cmp	r2, r1
 800432c:	d02a      	beq.n	8004384 <_dtoa_r+0xb44>
 800432e:	4659      	mov	r1, fp
 8004330:	2300      	movs	r3, #0
 8004332:	220a      	movs	r2, #10
 8004334:	4620      	mov	r0, r4
 8004336:	f000 fb0f 	bl	8004958 <__multadd>
 800433a:	45b8      	cmp	r8, r7
 800433c:	4683      	mov	fp, r0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	f04f 020a 	mov.w	r2, #10
 8004346:	4641      	mov	r1, r8
 8004348:	4620      	mov	r0, r4
 800434a:	d107      	bne.n	800435c <_dtoa_r+0xb1c>
 800434c:	f000 fb04 	bl	8004958 <__multadd>
 8004350:	4680      	mov	r8, r0
 8004352:	4607      	mov	r7, r0
 8004354:	9b01      	ldr	r3, [sp, #4]
 8004356:	3301      	adds	r3, #1
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	e775      	b.n	8004248 <_dtoa_r+0xa08>
 800435c:	f000 fafc 	bl	8004958 <__multadd>
 8004360:	4639      	mov	r1, r7
 8004362:	4680      	mov	r8, r0
 8004364:	2300      	movs	r3, #0
 8004366:	220a      	movs	r2, #10
 8004368:	4620      	mov	r0, r4
 800436a:	f000 faf5 	bl	8004958 <__multadd>
 800436e:	4607      	mov	r7, r0
 8004370:	e7f0      	b.n	8004354 <_dtoa_r+0xb14>
 8004372:	f1b9 0f00 	cmp.w	r9, #0
 8004376:	9a00      	ldr	r2, [sp, #0]
 8004378:	bfcc      	ite	gt
 800437a:	464d      	movgt	r5, r9
 800437c:	2501      	movle	r5, #1
 800437e:	4415      	add	r5, r2
 8004380:	f04f 0800 	mov.w	r8, #0
 8004384:	4659      	mov	r1, fp
 8004386:	2201      	movs	r2, #1
 8004388:	4620      	mov	r0, r4
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	f000 fc94 	bl	8004cb8 <__lshift>
 8004390:	4631      	mov	r1, r6
 8004392:	4683      	mov	fp, r0
 8004394:	f000 fcfc 	bl	8004d90 <__mcmp>
 8004398:	2800      	cmp	r0, #0
 800439a:	dcb2      	bgt.n	8004302 <_dtoa_r+0xac2>
 800439c:	d102      	bne.n	80043a4 <_dtoa_r+0xb64>
 800439e:	9b01      	ldr	r3, [sp, #4]
 80043a0:	07db      	lsls	r3, r3, #31
 80043a2:	d4ae      	bmi.n	8004302 <_dtoa_r+0xac2>
 80043a4:	462b      	mov	r3, r5
 80043a6:	461d      	mov	r5, r3
 80043a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043ac:	2a30      	cmp	r2, #48	; 0x30
 80043ae:	d0fa      	beq.n	80043a6 <_dtoa_r+0xb66>
 80043b0:	e6f7      	b.n	80041a2 <_dtoa_r+0x962>
 80043b2:	9a00      	ldr	r2, [sp, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1a5      	bne.n	8004304 <_dtoa_r+0xac4>
 80043b8:	f10a 0a01 	add.w	sl, sl, #1
 80043bc:	2331      	movs	r3, #49	; 0x31
 80043be:	e779      	b.n	80042b4 <_dtoa_r+0xa74>
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <_dtoa_r+0xbd0>)
 80043c2:	f7ff baaf 	b.w	8003924 <_dtoa_r+0xe4>
 80043c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f47f aa86 	bne.w	80038da <_dtoa_r+0x9a>
 80043ce:	4b11      	ldr	r3, [pc, #68]	; (8004414 <_dtoa_r+0xbd4>)
 80043d0:	f7ff baa8 	b.w	8003924 <_dtoa_r+0xe4>
 80043d4:	f1b9 0f00 	cmp.w	r9, #0
 80043d8:	dc03      	bgt.n	80043e2 <_dtoa_r+0xba2>
 80043da:	9b05      	ldr	r3, [sp, #20]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	f73f aec9 	bgt.w	8004174 <_dtoa_r+0x934>
 80043e2:	9d00      	ldr	r5, [sp, #0]
 80043e4:	4631      	mov	r1, r6
 80043e6:	4658      	mov	r0, fp
 80043e8:	f7ff f99e 	bl	8003728 <quorem>
 80043ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80043f0:	f805 3b01 	strb.w	r3, [r5], #1
 80043f4:	9a00      	ldr	r2, [sp, #0]
 80043f6:	1aaa      	subs	r2, r5, r2
 80043f8:	4591      	cmp	r9, r2
 80043fa:	ddba      	ble.n	8004372 <_dtoa_r+0xb32>
 80043fc:	4659      	mov	r1, fp
 80043fe:	2300      	movs	r3, #0
 8004400:	220a      	movs	r2, #10
 8004402:	4620      	mov	r0, r4
 8004404:	f000 faa8 	bl	8004958 <__multadd>
 8004408:	4683      	mov	fp, r0
 800440a:	e7eb      	b.n	80043e4 <_dtoa_r+0xba4>
 800440c:	0800579b 	.word	0x0800579b
 8004410:	080056f4 	.word	0x080056f4
 8004414:	08005718 	.word	0x08005718

08004418 <__sflush_r>:
 8004418:	898a      	ldrh	r2, [r1, #12]
 800441a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800441e:	4605      	mov	r5, r0
 8004420:	0710      	lsls	r0, r2, #28
 8004422:	460c      	mov	r4, r1
 8004424:	d458      	bmi.n	80044d8 <__sflush_r+0xc0>
 8004426:	684b      	ldr	r3, [r1, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	dc05      	bgt.n	8004438 <__sflush_r+0x20>
 800442c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	dc02      	bgt.n	8004438 <__sflush_r+0x20>
 8004432:	2000      	movs	r0, #0
 8004434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800443a:	2e00      	cmp	r6, #0
 800443c:	d0f9      	beq.n	8004432 <__sflush_r+0x1a>
 800443e:	2300      	movs	r3, #0
 8004440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004444:	682f      	ldr	r7, [r5, #0]
 8004446:	602b      	str	r3, [r5, #0]
 8004448:	d032      	beq.n	80044b0 <__sflush_r+0x98>
 800444a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	075a      	lsls	r2, r3, #29
 8004450:	d505      	bpl.n	800445e <__sflush_r+0x46>
 8004452:	6863      	ldr	r3, [r4, #4]
 8004454:	1ac0      	subs	r0, r0, r3
 8004456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004458:	b10b      	cbz	r3, 800445e <__sflush_r+0x46>
 800445a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800445c:	1ac0      	subs	r0, r0, r3
 800445e:	2300      	movs	r3, #0
 8004460:	4602      	mov	r2, r0
 8004462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004464:	6a21      	ldr	r1, [r4, #32]
 8004466:	4628      	mov	r0, r5
 8004468:	47b0      	blx	r6
 800446a:	1c43      	adds	r3, r0, #1
 800446c:	89a3      	ldrh	r3, [r4, #12]
 800446e:	d106      	bne.n	800447e <__sflush_r+0x66>
 8004470:	6829      	ldr	r1, [r5, #0]
 8004472:	291d      	cmp	r1, #29
 8004474:	d82c      	bhi.n	80044d0 <__sflush_r+0xb8>
 8004476:	4a2a      	ldr	r2, [pc, #168]	; (8004520 <__sflush_r+0x108>)
 8004478:	40ca      	lsrs	r2, r1
 800447a:	07d6      	lsls	r6, r2, #31
 800447c:	d528      	bpl.n	80044d0 <__sflush_r+0xb8>
 800447e:	2200      	movs	r2, #0
 8004480:	6062      	str	r2, [r4, #4]
 8004482:	04d9      	lsls	r1, r3, #19
 8004484:	6922      	ldr	r2, [r4, #16]
 8004486:	6022      	str	r2, [r4, #0]
 8004488:	d504      	bpl.n	8004494 <__sflush_r+0x7c>
 800448a:	1c42      	adds	r2, r0, #1
 800448c:	d101      	bne.n	8004492 <__sflush_r+0x7a>
 800448e:	682b      	ldr	r3, [r5, #0]
 8004490:	b903      	cbnz	r3, 8004494 <__sflush_r+0x7c>
 8004492:	6560      	str	r0, [r4, #84]	; 0x54
 8004494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004496:	602f      	str	r7, [r5, #0]
 8004498:	2900      	cmp	r1, #0
 800449a:	d0ca      	beq.n	8004432 <__sflush_r+0x1a>
 800449c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044a0:	4299      	cmp	r1, r3
 80044a2:	d002      	beq.n	80044aa <__sflush_r+0x92>
 80044a4:	4628      	mov	r0, r5
 80044a6:	f7fe fb3d 	bl	8002b24 <_free_r>
 80044aa:	2000      	movs	r0, #0
 80044ac:	6360      	str	r0, [r4, #52]	; 0x34
 80044ae:	e7c1      	b.n	8004434 <__sflush_r+0x1c>
 80044b0:	6a21      	ldr	r1, [r4, #32]
 80044b2:	2301      	movs	r3, #1
 80044b4:	4628      	mov	r0, r5
 80044b6:	47b0      	blx	r6
 80044b8:	1c41      	adds	r1, r0, #1
 80044ba:	d1c7      	bne.n	800444c <__sflush_r+0x34>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0c4      	beq.n	800444c <__sflush_r+0x34>
 80044c2:	2b1d      	cmp	r3, #29
 80044c4:	d001      	beq.n	80044ca <__sflush_r+0xb2>
 80044c6:	2b16      	cmp	r3, #22
 80044c8:	d101      	bne.n	80044ce <__sflush_r+0xb6>
 80044ca:	602f      	str	r7, [r5, #0]
 80044cc:	e7b1      	b.n	8004432 <__sflush_r+0x1a>
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d4:	81a3      	strh	r3, [r4, #12]
 80044d6:	e7ad      	b.n	8004434 <__sflush_r+0x1c>
 80044d8:	690f      	ldr	r7, [r1, #16]
 80044da:	2f00      	cmp	r7, #0
 80044dc:	d0a9      	beq.n	8004432 <__sflush_r+0x1a>
 80044de:	0793      	lsls	r3, r2, #30
 80044e0:	680e      	ldr	r6, [r1, #0]
 80044e2:	bf08      	it	eq
 80044e4:	694b      	ldreq	r3, [r1, #20]
 80044e6:	600f      	str	r7, [r1, #0]
 80044e8:	bf18      	it	ne
 80044ea:	2300      	movne	r3, #0
 80044ec:	eba6 0807 	sub.w	r8, r6, r7
 80044f0:	608b      	str	r3, [r1, #8]
 80044f2:	f1b8 0f00 	cmp.w	r8, #0
 80044f6:	dd9c      	ble.n	8004432 <__sflush_r+0x1a>
 80044f8:	6a21      	ldr	r1, [r4, #32]
 80044fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044fc:	4643      	mov	r3, r8
 80044fe:	463a      	mov	r2, r7
 8004500:	4628      	mov	r0, r5
 8004502:	47b0      	blx	r6
 8004504:	2800      	cmp	r0, #0
 8004506:	dc06      	bgt.n	8004516 <__sflush_r+0xfe>
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800450e:	81a3      	strh	r3, [r4, #12]
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	e78e      	b.n	8004434 <__sflush_r+0x1c>
 8004516:	4407      	add	r7, r0
 8004518:	eba8 0800 	sub.w	r8, r8, r0
 800451c:	e7e9      	b.n	80044f2 <__sflush_r+0xda>
 800451e:	bf00      	nop
 8004520:	20400001 	.word	0x20400001

08004524 <_fflush_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	690b      	ldr	r3, [r1, #16]
 8004528:	4605      	mov	r5, r0
 800452a:	460c      	mov	r4, r1
 800452c:	b913      	cbnz	r3, 8004534 <_fflush_r+0x10>
 800452e:	2500      	movs	r5, #0
 8004530:	4628      	mov	r0, r5
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	b118      	cbz	r0, 800453e <_fflush_r+0x1a>
 8004536:	6983      	ldr	r3, [r0, #24]
 8004538:	b90b      	cbnz	r3, 800453e <_fflush_r+0x1a>
 800453a:	f000 f887 	bl	800464c <__sinit>
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <_fflush_r+0x6c>)
 8004540:	429c      	cmp	r4, r3
 8004542:	d11b      	bne.n	800457c <_fflush_r+0x58>
 8004544:	686c      	ldr	r4, [r5, #4]
 8004546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0ef      	beq.n	800452e <_fflush_r+0xa>
 800454e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004550:	07d0      	lsls	r0, r2, #31
 8004552:	d404      	bmi.n	800455e <_fflush_r+0x3a>
 8004554:	0599      	lsls	r1, r3, #22
 8004556:	d402      	bmi.n	800455e <_fflush_r+0x3a>
 8004558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800455a:	f000 f91a 	bl	8004792 <__retarget_lock_acquire_recursive>
 800455e:	4628      	mov	r0, r5
 8004560:	4621      	mov	r1, r4
 8004562:	f7ff ff59 	bl	8004418 <__sflush_r>
 8004566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004568:	07da      	lsls	r2, r3, #31
 800456a:	4605      	mov	r5, r0
 800456c:	d4e0      	bmi.n	8004530 <_fflush_r+0xc>
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	059b      	lsls	r3, r3, #22
 8004572:	d4dd      	bmi.n	8004530 <_fflush_r+0xc>
 8004574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004576:	f000 f90d 	bl	8004794 <__retarget_lock_release_recursive>
 800457a:	e7d9      	b.n	8004530 <_fflush_r+0xc>
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <_fflush_r+0x70>)
 800457e:	429c      	cmp	r4, r3
 8004580:	d101      	bne.n	8004586 <_fflush_r+0x62>
 8004582:	68ac      	ldr	r4, [r5, #8]
 8004584:	e7df      	b.n	8004546 <_fflush_r+0x22>
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <_fflush_r+0x74>)
 8004588:	429c      	cmp	r4, r3
 800458a:	bf08      	it	eq
 800458c:	68ec      	ldreq	r4, [r5, #12]
 800458e:	e7da      	b.n	8004546 <_fflush_r+0x22>
 8004590:	080057cc 	.word	0x080057cc
 8004594:	080057ec 	.word	0x080057ec
 8004598:	080057ac 	.word	0x080057ac

0800459c <std>:
 800459c:	2300      	movs	r3, #0
 800459e:	b510      	push	{r4, lr}
 80045a0:	4604      	mov	r4, r0
 80045a2:	e9c0 3300 	strd	r3, r3, [r0]
 80045a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045aa:	6083      	str	r3, [r0, #8]
 80045ac:	8181      	strh	r1, [r0, #12]
 80045ae:	6643      	str	r3, [r0, #100]	; 0x64
 80045b0:	81c2      	strh	r2, [r0, #14]
 80045b2:	6183      	str	r3, [r0, #24]
 80045b4:	4619      	mov	r1, r3
 80045b6:	2208      	movs	r2, #8
 80045b8:	305c      	adds	r0, #92	; 0x5c
 80045ba:	f7fe faab 	bl	8002b14 <memset>
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <std+0x38>)
 80045c0:	6263      	str	r3, [r4, #36]	; 0x24
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <std+0x3c>)
 80045c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <std+0x40>)
 80045c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045ca:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <std+0x44>)
 80045cc:	6224      	str	r4, [r4, #32]
 80045ce:	6323      	str	r3, [r4, #48]	; 0x30
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	bf00      	nop
 80045d4:	08005261 	.word	0x08005261
 80045d8:	08005283 	.word	0x08005283
 80045dc:	080052bb 	.word	0x080052bb
 80045e0:	080052df 	.word	0x080052df

080045e4 <_cleanup_r>:
 80045e4:	4901      	ldr	r1, [pc, #4]	; (80045ec <_cleanup_r+0x8>)
 80045e6:	f000 b8af 	b.w	8004748 <_fwalk_reent>
 80045ea:	bf00      	nop
 80045ec:	08004525 	.word	0x08004525

080045f0 <__sfmoreglue>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	1e4a      	subs	r2, r1, #1
 80045f4:	2568      	movs	r5, #104	; 0x68
 80045f6:	4355      	muls	r5, r2
 80045f8:	460e      	mov	r6, r1
 80045fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045fe:	f7fe fae1 	bl	8002bc4 <_malloc_r>
 8004602:	4604      	mov	r4, r0
 8004604:	b140      	cbz	r0, 8004618 <__sfmoreglue+0x28>
 8004606:	2100      	movs	r1, #0
 8004608:	e9c0 1600 	strd	r1, r6, [r0]
 800460c:	300c      	adds	r0, #12
 800460e:	60a0      	str	r0, [r4, #8]
 8004610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004614:	f7fe fa7e 	bl	8002b14 <memset>
 8004618:	4620      	mov	r0, r4
 800461a:	bd70      	pop	{r4, r5, r6, pc}

0800461c <__sfp_lock_acquire>:
 800461c:	4801      	ldr	r0, [pc, #4]	; (8004624 <__sfp_lock_acquire+0x8>)
 800461e:	f000 b8b8 	b.w	8004792 <__retarget_lock_acquire_recursive>
 8004622:	bf00      	nop
 8004624:	20000228 	.word	0x20000228

08004628 <__sfp_lock_release>:
 8004628:	4801      	ldr	r0, [pc, #4]	; (8004630 <__sfp_lock_release+0x8>)
 800462a:	f000 b8b3 	b.w	8004794 <__retarget_lock_release_recursive>
 800462e:	bf00      	nop
 8004630:	20000228 	.word	0x20000228

08004634 <__sinit_lock_acquire>:
 8004634:	4801      	ldr	r0, [pc, #4]	; (800463c <__sinit_lock_acquire+0x8>)
 8004636:	f000 b8ac 	b.w	8004792 <__retarget_lock_acquire_recursive>
 800463a:	bf00      	nop
 800463c:	20000223 	.word	0x20000223

08004640 <__sinit_lock_release>:
 8004640:	4801      	ldr	r0, [pc, #4]	; (8004648 <__sinit_lock_release+0x8>)
 8004642:	f000 b8a7 	b.w	8004794 <__retarget_lock_release_recursive>
 8004646:	bf00      	nop
 8004648:	20000223 	.word	0x20000223

0800464c <__sinit>:
 800464c:	b510      	push	{r4, lr}
 800464e:	4604      	mov	r4, r0
 8004650:	f7ff fff0 	bl	8004634 <__sinit_lock_acquire>
 8004654:	69a3      	ldr	r3, [r4, #24]
 8004656:	b11b      	cbz	r3, 8004660 <__sinit+0x14>
 8004658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800465c:	f7ff bff0 	b.w	8004640 <__sinit_lock_release>
 8004660:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004664:	6523      	str	r3, [r4, #80]	; 0x50
 8004666:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <__sinit+0x68>)
 8004668:	4a13      	ldr	r2, [pc, #76]	; (80046b8 <__sinit+0x6c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	62a2      	str	r2, [r4, #40]	; 0x28
 800466e:	42a3      	cmp	r3, r4
 8004670:	bf04      	itt	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	61a3      	streq	r3, [r4, #24]
 8004676:	4620      	mov	r0, r4
 8004678:	f000 f820 	bl	80046bc <__sfp>
 800467c:	6060      	str	r0, [r4, #4]
 800467e:	4620      	mov	r0, r4
 8004680:	f000 f81c 	bl	80046bc <__sfp>
 8004684:	60a0      	str	r0, [r4, #8]
 8004686:	4620      	mov	r0, r4
 8004688:	f000 f818 	bl	80046bc <__sfp>
 800468c:	2200      	movs	r2, #0
 800468e:	60e0      	str	r0, [r4, #12]
 8004690:	2104      	movs	r1, #4
 8004692:	6860      	ldr	r0, [r4, #4]
 8004694:	f7ff ff82 	bl	800459c <std>
 8004698:	68a0      	ldr	r0, [r4, #8]
 800469a:	2201      	movs	r2, #1
 800469c:	2109      	movs	r1, #9
 800469e:	f7ff ff7d 	bl	800459c <std>
 80046a2:	68e0      	ldr	r0, [r4, #12]
 80046a4:	2202      	movs	r2, #2
 80046a6:	2112      	movs	r1, #18
 80046a8:	f7ff ff78 	bl	800459c <std>
 80046ac:	2301      	movs	r3, #1
 80046ae:	61a3      	str	r3, [r4, #24]
 80046b0:	e7d2      	b.n	8004658 <__sinit+0xc>
 80046b2:	bf00      	nop
 80046b4:	080056e0 	.word	0x080056e0
 80046b8:	080045e5 	.word	0x080045e5

080046bc <__sfp>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	4607      	mov	r7, r0
 80046c0:	f7ff ffac 	bl	800461c <__sfp_lock_acquire>
 80046c4:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <__sfp+0x84>)
 80046c6:	681e      	ldr	r6, [r3, #0]
 80046c8:	69b3      	ldr	r3, [r6, #24]
 80046ca:	b913      	cbnz	r3, 80046d2 <__sfp+0x16>
 80046cc:	4630      	mov	r0, r6
 80046ce:	f7ff ffbd 	bl	800464c <__sinit>
 80046d2:	3648      	adds	r6, #72	; 0x48
 80046d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046d8:	3b01      	subs	r3, #1
 80046da:	d503      	bpl.n	80046e4 <__sfp+0x28>
 80046dc:	6833      	ldr	r3, [r6, #0]
 80046de:	b30b      	cbz	r3, 8004724 <__sfp+0x68>
 80046e0:	6836      	ldr	r6, [r6, #0]
 80046e2:	e7f7      	b.n	80046d4 <__sfp+0x18>
 80046e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046e8:	b9d5      	cbnz	r5, 8004720 <__sfp+0x64>
 80046ea:	4b16      	ldr	r3, [pc, #88]	; (8004744 <__sfp+0x88>)
 80046ec:	60e3      	str	r3, [r4, #12]
 80046ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046f2:	6665      	str	r5, [r4, #100]	; 0x64
 80046f4:	f000 f84c 	bl	8004790 <__retarget_lock_init_recursive>
 80046f8:	f7ff ff96 	bl	8004628 <__sfp_lock_release>
 80046fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004700:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004704:	6025      	str	r5, [r4, #0]
 8004706:	61a5      	str	r5, [r4, #24]
 8004708:	2208      	movs	r2, #8
 800470a:	4629      	mov	r1, r5
 800470c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004710:	f7fe fa00 	bl	8002b14 <memset>
 8004714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800471c:	4620      	mov	r0, r4
 800471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004720:	3468      	adds	r4, #104	; 0x68
 8004722:	e7d9      	b.n	80046d8 <__sfp+0x1c>
 8004724:	2104      	movs	r1, #4
 8004726:	4638      	mov	r0, r7
 8004728:	f7ff ff62 	bl	80045f0 <__sfmoreglue>
 800472c:	4604      	mov	r4, r0
 800472e:	6030      	str	r0, [r6, #0]
 8004730:	2800      	cmp	r0, #0
 8004732:	d1d5      	bne.n	80046e0 <__sfp+0x24>
 8004734:	f7ff ff78 	bl	8004628 <__sfp_lock_release>
 8004738:	230c      	movs	r3, #12
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	e7ee      	b.n	800471c <__sfp+0x60>
 800473e:	bf00      	nop
 8004740:	080056e0 	.word	0x080056e0
 8004744:	ffff0001 	.word	0xffff0001

08004748 <_fwalk_reent>:
 8004748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800474c:	4606      	mov	r6, r0
 800474e:	4688      	mov	r8, r1
 8004750:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004754:	2700      	movs	r7, #0
 8004756:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800475a:	f1b9 0901 	subs.w	r9, r9, #1
 800475e:	d505      	bpl.n	800476c <_fwalk_reent+0x24>
 8004760:	6824      	ldr	r4, [r4, #0]
 8004762:	2c00      	cmp	r4, #0
 8004764:	d1f7      	bne.n	8004756 <_fwalk_reent+0xe>
 8004766:	4638      	mov	r0, r7
 8004768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800476c:	89ab      	ldrh	r3, [r5, #12]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d907      	bls.n	8004782 <_fwalk_reent+0x3a>
 8004772:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004776:	3301      	adds	r3, #1
 8004778:	d003      	beq.n	8004782 <_fwalk_reent+0x3a>
 800477a:	4629      	mov	r1, r5
 800477c:	4630      	mov	r0, r6
 800477e:	47c0      	blx	r8
 8004780:	4307      	orrs	r7, r0
 8004782:	3568      	adds	r5, #104	; 0x68
 8004784:	e7e9      	b.n	800475a <_fwalk_reent+0x12>
	...

08004788 <_localeconv_r>:
 8004788:	4800      	ldr	r0, [pc, #0]	; (800478c <_localeconv_r+0x4>)
 800478a:	4770      	bx	lr
 800478c:	20000164 	.word	0x20000164

08004790 <__retarget_lock_init_recursive>:
 8004790:	4770      	bx	lr

08004792 <__retarget_lock_acquire_recursive>:
 8004792:	4770      	bx	lr

08004794 <__retarget_lock_release_recursive>:
 8004794:	4770      	bx	lr

08004796 <__swhatbuf_r>:
 8004796:	b570      	push	{r4, r5, r6, lr}
 8004798:	460e      	mov	r6, r1
 800479a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479e:	2900      	cmp	r1, #0
 80047a0:	b096      	sub	sp, #88	; 0x58
 80047a2:	4614      	mov	r4, r2
 80047a4:	461d      	mov	r5, r3
 80047a6:	da07      	bge.n	80047b8 <__swhatbuf_r+0x22>
 80047a8:	2300      	movs	r3, #0
 80047aa:	602b      	str	r3, [r5, #0]
 80047ac:	89b3      	ldrh	r3, [r6, #12]
 80047ae:	061a      	lsls	r2, r3, #24
 80047b0:	d410      	bmi.n	80047d4 <__swhatbuf_r+0x3e>
 80047b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b6:	e00e      	b.n	80047d6 <__swhatbuf_r+0x40>
 80047b8:	466a      	mov	r2, sp
 80047ba:	f000 fea7 	bl	800550c <_fstat_r>
 80047be:	2800      	cmp	r0, #0
 80047c0:	dbf2      	blt.n	80047a8 <__swhatbuf_r+0x12>
 80047c2:	9a01      	ldr	r2, [sp, #4]
 80047c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047cc:	425a      	negs	r2, r3
 80047ce:	415a      	adcs	r2, r3
 80047d0:	602a      	str	r2, [r5, #0]
 80047d2:	e7ee      	b.n	80047b2 <__swhatbuf_r+0x1c>
 80047d4:	2340      	movs	r3, #64	; 0x40
 80047d6:	2000      	movs	r0, #0
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	b016      	add	sp, #88	; 0x58
 80047dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080047e0 <__smakebuf_r>:
 80047e0:	898b      	ldrh	r3, [r1, #12]
 80047e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047e4:	079d      	lsls	r5, r3, #30
 80047e6:	4606      	mov	r6, r0
 80047e8:	460c      	mov	r4, r1
 80047ea:	d507      	bpl.n	80047fc <__smakebuf_r+0x1c>
 80047ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	6123      	str	r3, [r4, #16]
 80047f4:	2301      	movs	r3, #1
 80047f6:	6163      	str	r3, [r4, #20]
 80047f8:	b002      	add	sp, #8
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	ab01      	add	r3, sp, #4
 80047fe:	466a      	mov	r2, sp
 8004800:	f7ff ffc9 	bl	8004796 <__swhatbuf_r>
 8004804:	9900      	ldr	r1, [sp, #0]
 8004806:	4605      	mov	r5, r0
 8004808:	4630      	mov	r0, r6
 800480a:	f7fe f9db 	bl	8002bc4 <_malloc_r>
 800480e:	b948      	cbnz	r0, 8004824 <__smakebuf_r+0x44>
 8004810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004814:	059a      	lsls	r2, r3, #22
 8004816:	d4ef      	bmi.n	80047f8 <__smakebuf_r+0x18>
 8004818:	f023 0303 	bic.w	r3, r3, #3
 800481c:	f043 0302 	orr.w	r3, r3, #2
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	e7e3      	b.n	80047ec <__smakebuf_r+0xc>
 8004824:	4b0d      	ldr	r3, [pc, #52]	; (800485c <__smakebuf_r+0x7c>)
 8004826:	62b3      	str	r3, [r6, #40]	; 0x28
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	6020      	str	r0, [r4, #0]
 800482c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004830:	81a3      	strh	r3, [r4, #12]
 8004832:	9b00      	ldr	r3, [sp, #0]
 8004834:	6163      	str	r3, [r4, #20]
 8004836:	9b01      	ldr	r3, [sp, #4]
 8004838:	6120      	str	r0, [r4, #16]
 800483a:	b15b      	cbz	r3, 8004854 <__smakebuf_r+0x74>
 800483c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004840:	4630      	mov	r0, r6
 8004842:	f000 fe75 	bl	8005530 <_isatty_r>
 8004846:	b128      	cbz	r0, 8004854 <__smakebuf_r+0x74>
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f023 0303 	bic.w	r3, r3, #3
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	81a3      	strh	r3, [r4, #12]
 8004854:	89a0      	ldrh	r0, [r4, #12]
 8004856:	4305      	orrs	r5, r0
 8004858:	81a5      	strh	r5, [r4, #12]
 800485a:	e7cd      	b.n	80047f8 <__smakebuf_r+0x18>
 800485c:	080045e5 	.word	0x080045e5

08004860 <memcpy>:
 8004860:	440a      	add	r2, r1
 8004862:	4291      	cmp	r1, r2
 8004864:	f100 33ff 	add.w	r3, r0, #4294967295
 8004868:	d100      	bne.n	800486c <memcpy+0xc>
 800486a:	4770      	bx	lr
 800486c:	b510      	push	{r4, lr}
 800486e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004876:	4291      	cmp	r1, r2
 8004878:	d1f9      	bne.n	800486e <memcpy+0xe>
 800487a:	bd10      	pop	{r4, pc}

0800487c <__malloc_lock>:
 800487c:	4801      	ldr	r0, [pc, #4]	; (8004884 <__malloc_lock+0x8>)
 800487e:	f7ff bf88 	b.w	8004792 <__retarget_lock_acquire_recursive>
 8004882:	bf00      	nop
 8004884:	20000224 	.word	0x20000224

08004888 <__malloc_unlock>:
 8004888:	4801      	ldr	r0, [pc, #4]	; (8004890 <__malloc_unlock+0x8>)
 800488a:	f7ff bf83 	b.w	8004794 <__retarget_lock_release_recursive>
 800488e:	bf00      	nop
 8004890:	20000224 	.word	0x20000224

08004894 <_Balloc>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004898:	4604      	mov	r4, r0
 800489a:	460d      	mov	r5, r1
 800489c:	b976      	cbnz	r6, 80048bc <_Balloc+0x28>
 800489e:	2010      	movs	r0, #16
 80048a0:	f7fe f930 	bl	8002b04 <malloc>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6260      	str	r0, [r4, #36]	; 0x24
 80048a8:	b920      	cbnz	r0, 80048b4 <_Balloc+0x20>
 80048aa:	4b18      	ldr	r3, [pc, #96]	; (800490c <_Balloc+0x78>)
 80048ac:	4818      	ldr	r0, [pc, #96]	; (8004910 <_Balloc+0x7c>)
 80048ae:	2166      	movs	r1, #102	; 0x66
 80048b0:	f000 fdec 	bl	800548c <__assert_func>
 80048b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048b8:	6006      	str	r6, [r0, #0]
 80048ba:	60c6      	str	r6, [r0, #12]
 80048bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80048be:	68f3      	ldr	r3, [r6, #12]
 80048c0:	b183      	cbz	r3, 80048e4 <_Balloc+0x50>
 80048c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80048ca:	b9b8      	cbnz	r0, 80048fc <_Balloc+0x68>
 80048cc:	2101      	movs	r1, #1
 80048ce:	fa01 f605 	lsl.w	r6, r1, r5
 80048d2:	1d72      	adds	r2, r6, #5
 80048d4:	0092      	lsls	r2, r2, #2
 80048d6:	4620      	mov	r0, r4
 80048d8:	f000 fb5a 	bl	8004f90 <_calloc_r>
 80048dc:	b160      	cbz	r0, 80048f8 <_Balloc+0x64>
 80048de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80048e2:	e00e      	b.n	8004902 <_Balloc+0x6e>
 80048e4:	2221      	movs	r2, #33	; 0x21
 80048e6:	2104      	movs	r1, #4
 80048e8:	4620      	mov	r0, r4
 80048ea:	f000 fb51 	bl	8004f90 <_calloc_r>
 80048ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048f0:	60f0      	str	r0, [r6, #12]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e4      	bne.n	80048c2 <_Balloc+0x2e>
 80048f8:	2000      	movs	r0, #0
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
 80048fc:	6802      	ldr	r2, [r0, #0]
 80048fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004902:	2300      	movs	r3, #0
 8004904:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004908:	e7f7      	b.n	80048fa <_Balloc+0x66>
 800490a:	bf00      	nop
 800490c:	08005725 	.word	0x08005725
 8004910:	0800580c 	.word	0x0800580c

08004914 <_Bfree>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004918:	4605      	mov	r5, r0
 800491a:	460c      	mov	r4, r1
 800491c:	b976      	cbnz	r6, 800493c <_Bfree+0x28>
 800491e:	2010      	movs	r0, #16
 8004920:	f7fe f8f0 	bl	8002b04 <malloc>
 8004924:	4602      	mov	r2, r0
 8004926:	6268      	str	r0, [r5, #36]	; 0x24
 8004928:	b920      	cbnz	r0, 8004934 <_Bfree+0x20>
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <_Bfree+0x3c>)
 800492c:	4809      	ldr	r0, [pc, #36]	; (8004954 <_Bfree+0x40>)
 800492e:	218a      	movs	r1, #138	; 0x8a
 8004930:	f000 fdac 	bl	800548c <__assert_func>
 8004934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004938:	6006      	str	r6, [r0, #0]
 800493a:	60c6      	str	r6, [r0, #12]
 800493c:	b13c      	cbz	r4, 800494e <_Bfree+0x3a>
 800493e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004940:	6862      	ldr	r2, [r4, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004948:	6021      	str	r1, [r4, #0]
 800494a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	08005725 	.word	0x08005725
 8004954:	0800580c 	.word	0x0800580c

08004958 <__multadd>:
 8004958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800495c:	690e      	ldr	r6, [r1, #16]
 800495e:	4607      	mov	r7, r0
 8004960:	4698      	mov	r8, r3
 8004962:	460c      	mov	r4, r1
 8004964:	f101 0014 	add.w	r0, r1, #20
 8004968:	2300      	movs	r3, #0
 800496a:	6805      	ldr	r5, [r0, #0]
 800496c:	b2a9      	uxth	r1, r5
 800496e:	fb02 8101 	mla	r1, r2, r1, r8
 8004972:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004976:	0c2d      	lsrs	r5, r5, #16
 8004978:	fb02 c505 	mla	r5, r2, r5, ip
 800497c:	b289      	uxth	r1, r1
 800497e:	3301      	adds	r3, #1
 8004980:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004984:	429e      	cmp	r6, r3
 8004986:	f840 1b04 	str.w	r1, [r0], #4
 800498a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800498e:	dcec      	bgt.n	800496a <__multadd+0x12>
 8004990:	f1b8 0f00 	cmp.w	r8, #0
 8004994:	d022      	beq.n	80049dc <__multadd+0x84>
 8004996:	68a3      	ldr	r3, [r4, #8]
 8004998:	42b3      	cmp	r3, r6
 800499a:	dc19      	bgt.n	80049d0 <__multadd+0x78>
 800499c:	6861      	ldr	r1, [r4, #4]
 800499e:	4638      	mov	r0, r7
 80049a0:	3101      	adds	r1, #1
 80049a2:	f7ff ff77 	bl	8004894 <_Balloc>
 80049a6:	4605      	mov	r5, r0
 80049a8:	b928      	cbnz	r0, 80049b6 <__multadd+0x5e>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <__multadd+0x8c>)
 80049ae:	480e      	ldr	r0, [pc, #56]	; (80049e8 <__multadd+0x90>)
 80049b0:	21b5      	movs	r1, #181	; 0xb5
 80049b2:	f000 fd6b 	bl	800548c <__assert_func>
 80049b6:	6922      	ldr	r2, [r4, #16]
 80049b8:	3202      	adds	r2, #2
 80049ba:	f104 010c 	add.w	r1, r4, #12
 80049be:	0092      	lsls	r2, r2, #2
 80049c0:	300c      	adds	r0, #12
 80049c2:	f7ff ff4d 	bl	8004860 <memcpy>
 80049c6:	4621      	mov	r1, r4
 80049c8:	4638      	mov	r0, r7
 80049ca:	f7ff ffa3 	bl	8004914 <_Bfree>
 80049ce:	462c      	mov	r4, r5
 80049d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80049d4:	3601      	adds	r6, #1
 80049d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80049da:	6126      	str	r6, [r4, #16]
 80049dc:	4620      	mov	r0, r4
 80049de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e2:	bf00      	nop
 80049e4:	0800579b 	.word	0x0800579b
 80049e8:	0800580c 	.word	0x0800580c

080049ec <__hi0bits>:
 80049ec:	0c03      	lsrs	r3, r0, #16
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	b9d3      	cbnz	r3, 8004a28 <__hi0bits+0x3c>
 80049f2:	0400      	lsls	r0, r0, #16
 80049f4:	2310      	movs	r3, #16
 80049f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80049fa:	bf04      	itt	eq
 80049fc:	0200      	lsleq	r0, r0, #8
 80049fe:	3308      	addeq	r3, #8
 8004a00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004a04:	bf04      	itt	eq
 8004a06:	0100      	lsleq	r0, r0, #4
 8004a08:	3304      	addeq	r3, #4
 8004a0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004a0e:	bf04      	itt	eq
 8004a10:	0080      	lsleq	r0, r0, #2
 8004a12:	3302      	addeq	r3, #2
 8004a14:	2800      	cmp	r0, #0
 8004a16:	db05      	blt.n	8004a24 <__hi0bits+0x38>
 8004a18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004a1c:	f103 0301 	add.w	r3, r3, #1
 8004a20:	bf08      	it	eq
 8004a22:	2320      	moveq	r3, #32
 8004a24:	4618      	mov	r0, r3
 8004a26:	4770      	bx	lr
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e7e4      	b.n	80049f6 <__hi0bits+0xa>

08004a2c <__lo0bits>:
 8004a2c:	6803      	ldr	r3, [r0, #0]
 8004a2e:	f013 0207 	ands.w	r2, r3, #7
 8004a32:	4601      	mov	r1, r0
 8004a34:	d00b      	beq.n	8004a4e <__lo0bits+0x22>
 8004a36:	07da      	lsls	r2, r3, #31
 8004a38:	d424      	bmi.n	8004a84 <__lo0bits+0x58>
 8004a3a:	0798      	lsls	r0, r3, #30
 8004a3c:	bf49      	itett	mi
 8004a3e:	085b      	lsrmi	r3, r3, #1
 8004a40:	089b      	lsrpl	r3, r3, #2
 8004a42:	2001      	movmi	r0, #1
 8004a44:	600b      	strmi	r3, [r1, #0]
 8004a46:	bf5c      	itt	pl
 8004a48:	600b      	strpl	r3, [r1, #0]
 8004a4a:	2002      	movpl	r0, #2
 8004a4c:	4770      	bx	lr
 8004a4e:	b298      	uxth	r0, r3
 8004a50:	b9b0      	cbnz	r0, 8004a80 <__lo0bits+0x54>
 8004a52:	0c1b      	lsrs	r3, r3, #16
 8004a54:	2010      	movs	r0, #16
 8004a56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a5a:	bf04      	itt	eq
 8004a5c:	0a1b      	lsreq	r3, r3, #8
 8004a5e:	3008      	addeq	r0, #8
 8004a60:	071a      	lsls	r2, r3, #28
 8004a62:	bf04      	itt	eq
 8004a64:	091b      	lsreq	r3, r3, #4
 8004a66:	3004      	addeq	r0, #4
 8004a68:	079a      	lsls	r2, r3, #30
 8004a6a:	bf04      	itt	eq
 8004a6c:	089b      	lsreq	r3, r3, #2
 8004a6e:	3002      	addeq	r0, #2
 8004a70:	07da      	lsls	r2, r3, #31
 8004a72:	d403      	bmi.n	8004a7c <__lo0bits+0x50>
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	f100 0001 	add.w	r0, r0, #1
 8004a7a:	d005      	beq.n	8004a88 <__lo0bits+0x5c>
 8004a7c:	600b      	str	r3, [r1, #0]
 8004a7e:	4770      	bx	lr
 8004a80:	4610      	mov	r0, r2
 8004a82:	e7e8      	b.n	8004a56 <__lo0bits+0x2a>
 8004a84:	2000      	movs	r0, #0
 8004a86:	4770      	bx	lr
 8004a88:	2020      	movs	r0, #32
 8004a8a:	4770      	bx	lr

08004a8c <__i2b>:
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	460c      	mov	r4, r1
 8004a90:	2101      	movs	r1, #1
 8004a92:	f7ff feff 	bl	8004894 <_Balloc>
 8004a96:	4602      	mov	r2, r0
 8004a98:	b928      	cbnz	r0, 8004aa6 <__i2b+0x1a>
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <__i2b+0x24>)
 8004a9c:	4805      	ldr	r0, [pc, #20]	; (8004ab4 <__i2b+0x28>)
 8004a9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004aa2:	f000 fcf3 	bl	800548c <__assert_func>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	6144      	str	r4, [r0, #20]
 8004aaa:	6103      	str	r3, [r0, #16]
 8004aac:	bd10      	pop	{r4, pc}
 8004aae:	bf00      	nop
 8004ab0:	0800579b 	.word	0x0800579b
 8004ab4:	0800580c 	.word	0x0800580c

08004ab8 <__multiply>:
 8004ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	4614      	mov	r4, r2
 8004abe:	690a      	ldr	r2, [r1, #16]
 8004ac0:	6923      	ldr	r3, [r4, #16]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	bfb8      	it	lt
 8004ac6:	460b      	movlt	r3, r1
 8004ac8:	460d      	mov	r5, r1
 8004aca:	bfbc      	itt	lt
 8004acc:	4625      	movlt	r5, r4
 8004ace:	461c      	movlt	r4, r3
 8004ad0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004ad4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004ad8:	68ab      	ldr	r3, [r5, #8]
 8004ada:	6869      	ldr	r1, [r5, #4]
 8004adc:	eb0a 0709 	add.w	r7, sl, r9
 8004ae0:	42bb      	cmp	r3, r7
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	bfb8      	it	lt
 8004ae6:	3101      	addlt	r1, #1
 8004ae8:	f7ff fed4 	bl	8004894 <_Balloc>
 8004aec:	b930      	cbnz	r0, 8004afc <__multiply+0x44>
 8004aee:	4602      	mov	r2, r0
 8004af0:	4b42      	ldr	r3, [pc, #264]	; (8004bfc <__multiply+0x144>)
 8004af2:	4843      	ldr	r0, [pc, #268]	; (8004c00 <__multiply+0x148>)
 8004af4:	f240 115d 	movw	r1, #349	; 0x15d
 8004af8:	f000 fcc8 	bl	800548c <__assert_func>
 8004afc:	f100 0614 	add.w	r6, r0, #20
 8004b00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004b04:	4633      	mov	r3, r6
 8004b06:	2200      	movs	r2, #0
 8004b08:	4543      	cmp	r3, r8
 8004b0a:	d31e      	bcc.n	8004b4a <__multiply+0x92>
 8004b0c:	f105 0c14 	add.w	ip, r5, #20
 8004b10:	f104 0314 	add.w	r3, r4, #20
 8004b14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004b18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004b1c:	9202      	str	r2, [sp, #8]
 8004b1e:	ebac 0205 	sub.w	r2, ip, r5
 8004b22:	3a15      	subs	r2, #21
 8004b24:	f022 0203 	bic.w	r2, r2, #3
 8004b28:	3204      	adds	r2, #4
 8004b2a:	f105 0115 	add.w	r1, r5, #21
 8004b2e:	458c      	cmp	ip, r1
 8004b30:	bf38      	it	cc
 8004b32:	2204      	movcc	r2, #4
 8004b34:	9201      	str	r2, [sp, #4]
 8004b36:	9a02      	ldr	r2, [sp, #8]
 8004b38:	9303      	str	r3, [sp, #12]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d808      	bhi.n	8004b50 <__multiply+0x98>
 8004b3e:	2f00      	cmp	r7, #0
 8004b40:	dc55      	bgt.n	8004bee <__multiply+0x136>
 8004b42:	6107      	str	r7, [r0, #16]
 8004b44:	b005      	add	sp, #20
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4a:	f843 2b04 	str.w	r2, [r3], #4
 8004b4e:	e7db      	b.n	8004b08 <__multiply+0x50>
 8004b50:	f8b3 a000 	ldrh.w	sl, [r3]
 8004b54:	f1ba 0f00 	cmp.w	sl, #0
 8004b58:	d020      	beq.n	8004b9c <__multiply+0xe4>
 8004b5a:	f105 0e14 	add.w	lr, r5, #20
 8004b5e:	46b1      	mov	r9, r6
 8004b60:	2200      	movs	r2, #0
 8004b62:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004b66:	f8d9 b000 	ldr.w	fp, [r9]
 8004b6a:	b2a1      	uxth	r1, r4
 8004b6c:	fa1f fb8b 	uxth.w	fp, fp
 8004b70:	fb0a b101 	mla	r1, sl, r1, fp
 8004b74:	4411      	add	r1, r2
 8004b76:	f8d9 2000 	ldr.w	r2, [r9]
 8004b7a:	0c24      	lsrs	r4, r4, #16
 8004b7c:	0c12      	lsrs	r2, r2, #16
 8004b7e:	fb0a 2404 	mla	r4, sl, r4, r2
 8004b82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004b86:	b289      	uxth	r1, r1
 8004b88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004b8c:	45f4      	cmp	ip, lr
 8004b8e:	f849 1b04 	str.w	r1, [r9], #4
 8004b92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004b96:	d8e4      	bhi.n	8004b62 <__multiply+0xaa>
 8004b98:	9901      	ldr	r1, [sp, #4]
 8004b9a:	5072      	str	r2, [r6, r1]
 8004b9c:	9a03      	ldr	r2, [sp, #12]
 8004b9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	f1b9 0f00 	cmp.w	r9, #0
 8004ba8:	d01f      	beq.n	8004bea <__multiply+0x132>
 8004baa:	6834      	ldr	r4, [r6, #0]
 8004bac:	f105 0114 	add.w	r1, r5, #20
 8004bb0:	46b6      	mov	lr, r6
 8004bb2:	f04f 0a00 	mov.w	sl, #0
 8004bb6:	880a      	ldrh	r2, [r1, #0]
 8004bb8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004bbc:	fb09 b202 	mla	r2, r9, r2, fp
 8004bc0:	4492      	add	sl, r2
 8004bc2:	b2a4      	uxth	r4, r4
 8004bc4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004bc8:	f84e 4b04 	str.w	r4, [lr], #4
 8004bcc:	f851 4b04 	ldr.w	r4, [r1], #4
 8004bd0:	f8be 2000 	ldrh.w	r2, [lr]
 8004bd4:	0c24      	lsrs	r4, r4, #16
 8004bd6:	fb09 2404 	mla	r4, r9, r4, r2
 8004bda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004bde:	458c      	cmp	ip, r1
 8004be0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004be4:	d8e7      	bhi.n	8004bb6 <__multiply+0xfe>
 8004be6:	9a01      	ldr	r2, [sp, #4]
 8004be8:	50b4      	str	r4, [r6, r2]
 8004bea:	3604      	adds	r6, #4
 8004bec:	e7a3      	b.n	8004b36 <__multiply+0x7e>
 8004bee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1a5      	bne.n	8004b42 <__multiply+0x8a>
 8004bf6:	3f01      	subs	r7, #1
 8004bf8:	e7a1      	b.n	8004b3e <__multiply+0x86>
 8004bfa:	bf00      	nop
 8004bfc:	0800579b 	.word	0x0800579b
 8004c00:	0800580c 	.word	0x0800580c

08004c04 <__pow5mult>:
 8004c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c08:	4615      	mov	r5, r2
 8004c0a:	f012 0203 	ands.w	r2, r2, #3
 8004c0e:	4606      	mov	r6, r0
 8004c10:	460f      	mov	r7, r1
 8004c12:	d007      	beq.n	8004c24 <__pow5mult+0x20>
 8004c14:	4c25      	ldr	r4, [pc, #148]	; (8004cac <__pow5mult+0xa8>)
 8004c16:	3a01      	subs	r2, #1
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c1e:	f7ff fe9b 	bl	8004958 <__multadd>
 8004c22:	4607      	mov	r7, r0
 8004c24:	10ad      	asrs	r5, r5, #2
 8004c26:	d03d      	beq.n	8004ca4 <__pow5mult+0xa0>
 8004c28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004c2a:	b97c      	cbnz	r4, 8004c4c <__pow5mult+0x48>
 8004c2c:	2010      	movs	r0, #16
 8004c2e:	f7fd ff69 	bl	8002b04 <malloc>
 8004c32:	4602      	mov	r2, r0
 8004c34:	6270      	str	r0, [r6, #36]	; 0x24
 8004c36:	b928      	cbnz	r0, 8004c44 <__pow5mult+0x40>
 8004c38:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <__pow5mult+0xac>)
 8004c3a:	481e      	ldr	r0, [pc, #120]	; (8004cb4 <__pow5mult+0xb0>)
 8004c3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004c40:	f000 fc24 	bl	800548c <__assert_func>
 8004c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c48:	6004      	str	r4, [r0, #0]
 8004c4a:	60c4      	str	r4, [r0, #12]
 8004c4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c54:	b94c      	cbnz	r4, 8004c6a <__pow5mult+0x66>
 8004c56:	f240 2171 	movw	r1, #625	; 0x271
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f7ff ff16 	bl	8004a8c <__i2b>
 8004c60:	2300      	movs	r3, #0
 8004c62:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c66:	4604      	mov	r4, r0
 8004c68:	6003      	str	r3, [r0, #0]
 8004c6a:	f04f 0900 	mov.w	r9, #0
 8004c6e:	07eb      	lsls	r3, r5, #31
 8004c70:	d50a      	bpl.n	8004c88 <__pow5mult+0x84>
 8004c72:	4639      	mov	r1, r7
 8004c74:	4622      	mov	r2, r4
 8004c76:	4630      	mov	r0, r6
 8004c78:	f7ff ff1e 	bl	8004ab8 <__multiply>
 8004c7c:	4639      	mov	r1, r7
 8004c7e:	4680      	mov	r8, r0
 8004c80:	4630      	mov	r0, r6
 8004c82:	f7ff fe47 	bl	8004914 <_Bfree>
 8004c86:	4647      	mov	r7, r8
 8004c88:	106d      	asrs	r5, r5, #1
 8004c8a:	d00b      	beq.n	8004ca4 <__pow5mult+0xa0>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	b938      	cbnz	r0, 8004ca0 <__pow5mult+0x9c>
 8004c90:	4622      	mov	r2, r4
 8004c92:	4621      	mov	r1, r4
 8004c94:	4630      	mov	r0, r6
 8004c96:	f7ff ff0f 	bl	8004ab8 <__multiply>
 8004c9a:	6020      	str	r0, [r4, #0]
 8004c9c:	f8c0 9000 	str.w	r9, [r0]
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	e7e4      	b.n	8004c6e <__pow5mult+0x6a>
 8004ca4:	4638      	mov	r0, r7
 8004ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004caa:	bf00      	nop
 8004cac:	08005960 	.word	0x08005960
 8004cb0:	08005725 	.word	0x08005725
 8004cb4:	0800580c 	.word	0x0800580c

08004cb8 <__lshift>:
 8004cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	6849      	ldr	r1, [r1, #4]
 8004cc0:	6923      	ldr	r3, [r4, #16]
 8004cc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004cc6:	68a3      	ldr	r3, [r4, #8]
 8004cc8:	4607      	mov	r7, r0
 8004cca:	4691      	mov	r9, r2
 8004ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004cd0:	f108 0601 	add.w	r6, r8, #1
 8004cd4:	42b3      	cmp	r3, r6
 8004cd6:	db0b      	blt.n	8004cf0 <__lshift+0x38>
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f7ff fddb 	bl	8004894 <_Balloc>
 8004cde:	4605      	mov	r5, r0
 8004ce0:	b948      	cbnz	r0, 8004cf6 <__lshift+0x3e>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	4b28      	ldr	r3, [pc, #160]	; (8004d88 <__lshift+0xd0>)
 8004ce6:	4829      	ldr	r0, [pc, #164]	; (8004d8c <__lshift+0xd4>)
 8004ce8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004cec:	f000 fbce 	bl	800548c <__assert_func>
 8004cf0:	3101      	adds	r1, #1
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__lshift+0x1c>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f100 0114 	add.w	r1, r0, #20
 8004cfc:	f100 0210 	add.w	r2, r0, #16
 8004d00:	4618      	mov	r0, r3
 8004d02:	4553      	cmp	r3, sl
 8004d04:	db33      	blt.n	8004d6e <__lshift+0xb6>
 8004d06:	6920      	ldr	r0, [r4, #16]
 8004d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d0c:	f104 0314 	add.w	r3, r4, #20
 8004d10:	f019 091f 	ands.w	r9, r9, #31
 8004d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d1c:	d02b      	beq.n	8004d76 <__lshift+0xbe>
 8004d1e:	f1c9 0e20 	rsb	lr, r9, #32
 8004d22:	468a      	mov	sl, r1
 8004d24:	2200      	movs	r2, #0
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	fa00 f009 	lsl.w	r0, r0, r9
 8004d2c:	4302      	orrs	r2, r0
 8004d2e:	f84a 2b04 	str.w	r2, [sl], #4
 8004d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d36:	459c      	cmp	ip, r3
 8004d38:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d3c:	d8f3      	bhi.n	8004d26 <__lshift+0x6e>
 8004d3e:	ebac 0304 	sub.w	r3, ip, r4
 8004d42:	3b15      	subs	r3, #21
 8004d44:	f023 0303 	bic.w	r3, r3, #3
 8004d48:	3304      	adds	r3, #4
 8004d4a:	f104 0015 	add.w	r0, r4, #21
 8004d4e:	4584      	cmp	ip, r0
 8004d50:	bf38      	it	cc
 8004d52:	2304      	movcc	r3, #4
 8004d54:	50ca      	str	r2, [r1, r3]
 8004d56:	b10a      	cbz	r2, 8004d5c <__lshift+0xa4>
 8004d58:	f108 0602 	add.w	r6, r8, #2
 8004d5c:	3e01      	subs	r6, #1
 8004d5e:	4638      	mov	r0, r7
 8004d60:	612e      	str	r6, [r5, #16]
 8004d62:	4621      	mov	r1, r4
 8004d64:	f7ff fdd6 	bl	8004914 <_Bfree>
 8004d68:	4628      	mov	r0, r5
 8004d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d72:	3301      	adds	r3, #1
 8004d74:	e7c5      	b.n	8004d02 <__lshift+0x4a>
 8004d76:	3904      	subs	r1, #4
 8004d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d80:	459c      	cmp	ip, r3
 8004d82:	d8f9      	bhi.n	8004d78 <__lshift+0xc0>
 8004d84:	e7ea      	b.n	8004d5c <__lshift+0xa4>
 8004d86:	bf00      	nop
 8004d88:	0800579b 	.word	0x0800579b
 8004d8c:	0800580c 	.word	0x0800580c

08004d90 <__mcmp>:
 8004d90:	b530      	push	{r4, r5, lr}
 8004d92:	6902      	ldr	r2, [r0, #16]
 8004d94:	690c      	ldr	r4, [r1, #16]
 8004d96:	1b12      	subs	r2, r2, r4
 8004d98:	d10e      	bne.n	8004db8 <__mcmp+0x28>
 8004d9a:	f100 0314 	add.w	r3, r0, #20
 8004d9e:	3114      	adds	r1, #20
 8004da0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004da4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004da8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004dac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004db0:	42a5      	cmp	r5, r4
 8004db2:	d003      	beq.n	8004dbc <__mcmp+0x2c>
 8004db4:	d305      	bcc.n	8004dc2 <__mcmp+0x32>
 8004db6:	2201      	movs	r2, #1
 8004db8:	4610      	mov	r0, r2
 8004dba:	bd30      	pop	{r4, r5, pc}
 8004dbc:	4283      	cmp	r3, r0
 8004dbe:	d3f3      	bcc.n	8004da8 <__mcmp+0x18>
 8004dc0:	e7fa      	b.n	8004db8 <__mcmp+0x28>
 8004dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc6:	e7f7      	b.n	8004db8 <__mcmp+0x28>

08004dc8 <__mdiff>:
 8004dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	460c      	mov	r4, r1
 8004dce:	4606      	mov	r6, r0
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	4617      	mov	r7, r2
 8004dd6:	f7ff ffdb 	bl	8004d90 <__mcmp>
 8004dda:	1e05      	subs	r5, r0, #0
 8004ddc:	d110      	bne.n	8004e00 <__mdiff+0x38>
 8004dde:	4629      	mov	r1, r5
 8004de0:	4630      	mov	r0, r6
 8004de2:	f7ff fd57 	bl	8004894 <_Balloc>
 8004de6:	b930      	cbnz	r0, 8004df6 <__mdiff+0x2e>
 8004de8:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <__mdiff+0x108>)
 8004dea:	4602      	mov	r2, r0
 8004dec:	f240 2132 	movw	r1, #562	; 0x232
 8004df0:	4838      	ldr	r0, [pc, #224]	; (8004ed4 <__mdiff+0x10c>)
 8004df2:	f000 fb4b 	bl	800548c <__assert_func>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004dfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e00:	bfa4      	itt	ge
 8004e02:	463b      	movge	r3, r7
 8004e04:	4627      	movge	r7, r4
 8004e06:	4630      	mov	r0, r6
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	bfa6      	itte	ge
 8004e0c:	461c      	movge	r4, r3
 8004e0e:	2500      	movge	r5, #0
 8004e10:	2501      	movlt	r5, #1
 8004e12:	f7ff fd3f 	bl	8004894 <_Balloc>
 8004e16:	b920      	cbnz	r0, 8004e22 <__mdiff+0x5a>
 8004e18:	4b2d      	ldr	r3, [pc, #180]	; (8004ed0 <__mdiff+0x108>)
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004e20:	e7e6      	b.n	8004df0 <__mdiff+0x28>
 8004e22:	693e      	ldr	r6, [r7, #16]
 8004e24:	60c5      	str	r5, [r0, #12]
 8004e26:	6925      	ldr	r5, [r4, #16]
 8004e28:	f107 0114 	add.w	r1, r7, #20
 8004e2c:	f104 0914 	add.w	r9, r4, #20
 8004e30:	f100 0e14 	add.w	lr, r0, #20
 8004e34:	f107 0210 	add.w	r2, r7, #16
 8004e38:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004e3c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004e40:	46f2      	mov	sl, lr
 8004e42:	2700      	movs	r7, #0
 8004e44:	f859 3b04 	ldr.w	r3, [r9], #4
 8004e48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004e4c:	fa1f f883 	uxth.w	r8, r3
 8004e50:	fa17 f78b 	uxtah	r7, r7, fp
 8004e54:	0c1b      	lsrs	r3, r3, #16
 8004e56:	eba7 0808 	sub.w	r8, r7, r8
 8004e5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004e5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004e62:	fa1f f888 	uxth.w	r8, r8
 8004e66:	141f      	asrs	r7, r3, #16
 8004e68:	454d      	cmp	r5, r9
 8004e6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004e6e:	f84a 3b04 	str.w	r3, [sl], #4
 8004e72:	d8e7      	bhi.n	8004e44 <__mdiff+0x7c>
 8004e74:	1b2b      	subs	r3, r5, r4
 8004e76:	3b15      	subs	r3, #21
 8004e78:	f023 0303 	bic.w	r3, r3, #3
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	3415      	adds	r4, #21
 8004e80:	42a5      	cmp	r5, r4
 8004e82:	bf38      	it	cc
 8004e84:	2304      	movcc	r3, #4
 8004e86:	4419      	add	r1, r3
 8004e88:	4473      	add	r3, lr
 8004e8a:	469e      	mov	lr, r3
 8004e8c:	460d      	mov	r5, r1
 8004e8e:	4565      	cmp	r5, ip
 8004e90:	d30e      	bcc.n	8004eb0 <__mdiff+0xe8>
 8004e92:	f10c 0203 	add.w	r2, ip, #3
 8004e96:	1a52      	subs	r2, r2, r1
 8004e98:	f022 0203 	bic.w	r2, r2, #3
 8004e9c:	3903      	subs	r1, #3
 8004e9e:	458c      	cmp	ip, r1
 8004ea0:	bf38      	it	cc
 8004ea2:	2200      	movcc	r2, #0
 8004ea4:	441a      	add	r2, r3
 8004ea6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004eaa:	b17b      	cbz	r3, 8004ecc <__mdiff+0x104>
 8004eac:	6106      	str	r6, [r0, #16]
 8004eae:	e7a5      	b.n	8004dfc <__mdiff+0x34>
 8004eb0:	f855 8b04 	ldr.w	r8, [r5], #4
 8004eb4:	fa17 f488 	uxtah	r4, r7, r8
 8004eb8:	1422      	asrs	r2, r4, #16
 8004eba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004ebe:	b2a4      	uxth	r4, r4
 8004ec0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004ec4:	f84e 4b04 	str.w	r4, [lr], #4
 8004ec8:	1417      	asrs	r7, r2, #16
 8004eca:	e7e0      	b.n	8004e8e <__mdiff+0xc6>
 8004ecc:	3e01      	subs	r6, #1
 8004ece:	e7ea      	b.n	8004ea6 <__mdiff+0xde>
 8004ed0:	0800579b 	.word	0x0800579b
 8004ed4:	0800580c 	.word	0x0800580c

08004ed8 <__d2b>:
 8004ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004edc:	4689      	mov	r9, r1
 8004ede:	2101      	movs	r1, #1
 8004ee0:	ec57 6b10 	vmov	r6, r7, d0
 8004ee4:	4690      	mov	r8, r2
 8004ee6:	f7ff fcd5 	bl	8004894 <_Balloc>
 8004eea:	4604      	mov	r4, r0
 8004eec:	b930      	cbnz	r0, 8004efc <__d2b+0x24>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	4b25      	ldr	r3, [pc, #148]	; (8004f88 <__d2b+0xb0>)
 8004ef2:	4826      	ldr	r0, [pc, #152]	; (8004f8c <__d2b+0xb4>)
 8004ef4:	f240 310a 	movw	r1, #778	; 0x30a
 8004ef8:	f000 fac8 	bl	800548c <__assert_func>
 8004efc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004f00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004f04:	bb35      	cbnz	r5, 8004f54 <__d2b+0x7c>
 8004f06:	2e00      	cmp	r6, #0
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	d028      	beq.n	8004f5e <__d2b+0x86>
 8004f0c:	4668      	mov	r0, sp
 8004f0e:	9600      	str	r6, [sp, #0]
 8004f10:	f7ff fd8c 	bl	8004a2c <__lo0bits>
 8004f14:	9900      	ldr	r1, [sp, #0]
 8004f16:	b300      	cbz	r0, 8004f5a <__d2b+0x82>
 8004f18:	9a01      	ldr	r2, [sp, #4]
 8004f1a:	f1c0 0320 	rsb	r3, r0, #32
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	430b      	orrs	r3, r1
 8004f24:	40c2      	lsrs	r2, r0
 8004f26:	6163      	str	r3, [r4, #20]
 8004f28:	9201      	str	r2, [sp, #4]
 8004f2a:	9b01      	ldr	r3, [sp, #4]
 8004f2c:	61a3      	str	r3, [r4, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	bf14      	ite	ne
 8004f32:	2202      	movne	r2, #2
 8004f34:	2201      	moveq	r2, #1
 8004f36:	6122      	str	r2, [r4, #16]
 8004f38:	b1d5      	cbz	r5, 8004f70 <__d2b+0x98>
 8004f3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004f3e:	4405      	add	r5, r0
 8004f40:	f8c9 5000 	str.w	r5, [r9]
 8004f44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004f48:	f8c8 0000 	str.w	r0, [r8]
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	b003      	add	sp, #12
 8004f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f58:	e7d5      	b.n	8004f06 <__d2b+0x2e>
 8004f5a:	6161      	str	r1, [r4, #20]
 8004f5c:	e7e5      	b.n	8004f2a <__d2b+0x52>
 8004f5e:	a801      	add	r0, sp, #4
 8004f60:	f7ff fd64 	bl	8004a2c <__lo0bits>
 8004f64:	9b01      	ldr	r3, [sp, #4]
 8004f66:	6163      	str	r3, [r4, #20]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	6122      	str	r2, [r4, #16]
 8004f6c:	3020      	adds	r0, #32
 8004f6e:	e7e3      	b.n	8004f38 <__d2b+0x60>
 8004f70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004f74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004f78:	f8c9 0000 	str.w	r0, [r9]
 8004f7c:	6918      	ldr	r0, [r3, #16]
 8004f7e:	f7ff fd35 	bl	80049ec <__hi0bits>
 8004f82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004f86:	e7df      	b.n	8004f48 <__d2b+0x70>
 8004f88:	0800579b 	.word	0x0800579b
 8004f8c:	0800580c 	.word	0x0800580c

08004f90 <_calloc_r>:
 8004f90:	b513      	push	{r0, r1, r4, lr}
 8004f92:	434a      	muls	r2, r1
 8004f94:	4611      	mov	r1, r2
 8004f96:	9201      	str	r2, [sp, #4]
 8004f98:	f7fd fe14 	bl	8002bc4 <_malloc_r>
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	b118      	cbz	r0, 8004fa8 <_calloc_r+0x18>
 8004fa0:	9a01      	ldr	r2, [sp, #4]
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	f7fd fdb6 	bl	8002b14 <memset>
 8004fa8:	4620      	mov	r0, r4
 8004faa:	b002      	add	sp, #8
 8004fac:	bd10      	pop	{r4, pc}

08004fae <__sfputc_r>:
 8004fae:	6893      	ldr	r3, [r2, #8]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	b410      	push	{r4}
 8004fb6:	6093      	str	r3, [r2, #8]
 8004fb8:	da08      	bge.n	8004fcc <__sfputc_r+0x1e>
 8004fba:	6994      	ldr	r4, [r2, #24]
 8004fbc:	42a3      	cmp	r3, r4
 8004fbe:	db01      	blt.n	8004fc4 <__sfputc_r+0x16>
 8004fc0:	290a      	cmp	r1, #10
 8004fc2:	d103      	bne.n	8004fcc <__sfputc_r+0x1e>
 8004fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fc8:	f000 b98e 	b.w	80052e8 <__swbuf_r>
 8004fcc:	6813      	ldr	r3, [r2, #0]
 8004fce:	1c58      	adds	r0, r3, #1
 8004fd0:	6010      	str	r0, [r2, #0]
 8004fd2:	7019      	strb	r1, [r3, #0]
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <__sfputs_r>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	4606      	mov	r6, r0
 8004fe0:	460f      	mov	r7, r1
 8004fe2:	4614      	mov	r4, r2
 8004fe4:	18d5      	adds	r5, r2, r3
 8004fe6:	42ac      	cmp	r4, r5
 8004fe8:	d101      	bne.n	8004fee <__sfputs_r+0x12>
 8004fea:	2000      	movs	r0, #0
 8004fec:	e007      	b.n	8004ffe <__sfputs_r+0x22>
 8004fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff2:	463a      	mov	r2, r7
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	f7ff ffda 	bl	8004fae <__sfputc_r>
 8004ffa:	1c43      	adds	r3, r0, #1
 8004ffc:	d1f3      	bne.n	8004fe6 <__sfputs_r+0xa>
 8004ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005000 <_vfiprintf_r>:
 8005000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005004:	460d      	mov	r5, r1
 8005006:	b09d      	sub	sp, #116	; 0x74
 8005008:	4614      	mov	r4, r2
 800500a:	4698      	mov	r8, r3
 800500c:	4606      	mov	r6, r0
 800500e:	b118      	cbz	r0, 8005018 <_vfiprintf_r+0x18>
 8005010:	6983      	ldr	r3, [r0, #24]
 8005012:	b90b      	cbnz	r3, 8005018 <_vfiprintf_r+0x18>
 8005014:	f7ff fb1a 	bl	800464c <__sinit>
 8005018:	4b89      	ldr	r3, [pc, #548]	; (8005240 <_vfiprintf_r+0x240>)
 800501a:	429d      	cmp	r5, r3
 800501c:	d11b      	bne.n	8005056 <_vfiprintf_r+0x56>
 800501e:	6875      	ldr	r5, [r6, #4]
 8005020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005022:	07d9      	lsls	r1, r3, #31
 8005024:	d405      	bmi.n	8005032 <_vfiprintf_r+0x32>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	059a      	lsls	r2, r3, #22
 800502a:	d402      	bmi.n	8005032 <_vfiprintf_r+0x32>
 800502c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800502e:	f7ff fbb0 	bl	8004792 <__retarget_lock_acquire_recursive>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	d501      	bpl.n	800503c <_vfiprintf_r+0x3c>
 8005038:	692b      	ldr	r3, [r5, #16]
 800503a:	b9eb      	cbnz	r3, 8005078 <_vfiprintf_r+0x78>
 800503c:	4629      	mov	r1, r5
 800503e:	4630      	mov	r0, r6
 8005040:	f000 f9b6 	bl	80053b0 <__swsetup_r>
 8005044:	b1c0      	cbz	r0, 8005078 <_vfiprintf_r+0x78>
 8005046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005048:	07dc      	lsls	r4, r3, #31
 800504a:	d50e      	bpl.n	800506a <_vfiprintf_r+0x6a>
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	b01d      	add	sp, #116	; 0x74
 8005052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005056:	4b7b      	ldr	r3, [pc, #492]	; (8005244 <_vfiprintf_r+0x244>)
 8005058:	429d      	cmp	r5, r3
 800505a:	d101      	bne.n	8005060 <_vfiprintf_r+0x60>
 800505c:	68b5      	ldr	r5, [r6, #8]
 800505e:	e7df      	b.n	8005020 <_vfiprintf_r+0x20>
 8005060:	4b79      	ldr	r3, [pc, #484]	; (8005248 <_vfiprintf_r+0x248>)
 8005062:	429d      	cmp	r5, r3
 8005064:	bf08      	it	eq
 8005066:	68f5      	ldreq	r5, [r6, #12]
 8005068:	e7da      	b.n	8005020 <_vfiprintf_r+0x20>
 800506a:	89ab      	ldrh	r3, [r5, #12]
 800506c:	0598      	lsls	r0, r3, #22
 800506e:	d4ed      	bmi.n	800504c <_vfiprintf_r+0x4c>
 8005070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005072:	f7ff fb8f 	bl	8004794 <__retarget_lock_release_recursive>
 8005076:	e7e9      	b.n	800504c <_vfiprintf_r+0x4c>
 8005078:	2300      	movs	r3, #0
 800507a:	9309      	str	r3, [sp, #36]	; 0x24
 800507c:	2320      	movs	r3, #32
 800507e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005082:	f8cd 800c 	str.w	r8, [sp, #12]
 8005086:	2330      	movs	r3, #48	; 0x30
 8005088:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800524c <_vfiprintf_r+0x24c>
 800508c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005090:	f04f 0901 	mov.w	r9, #1
 8005094:	4623      	mov	r3, r4
 8005096:	469a      	mov	sl, r3
 8005098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800509c:	b10a      	cbz	r2, 80050a2 <_vfiprintf_r+0xa2>
 800509e:	2a25      	cmp	r2, #37	; 0x25
 80050a0:	d1f9      	bne.n	8005096 <_vfiprintf_r+0x96>
 80050a2:	ebba 0b04 	subs.w	fp, sl, r4
 80050a6:	d00b      	beq.n	80050c0 <_vfiprintf_r+0xc0>
 80050a8:	465b      	mov	r3, fp
 80050aa:	4622      	mov	r2, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	4630      	mov	r0, r6
 80050b0:	f7ff ff94 	bl	8004fdc <__sfputs_r>
 80050b4:	3001      	adds	r0, #1
 80050b6:	f000 80aa 	beq.w	800520e <_vfiprintf_r+0x20e>
 80050ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050bc:	445a      	add	r2, fp
 80050be:	9209      	str	r2, [sp, #36]	; 0x24
 80050c0:	f89a 3000 	ldrb.w	r3, [sl]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 80a2 	beq.w	800520e <_vfiprintf_r+0x20e>
 80050ca:	2300      	movs	r3, #0
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295
 80050d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050d4:	f10a 0a01 	add.w	sl, sl, #1
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	9307      	str	r3, [sp, #28]
 80050dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050e0:	931a      	str	r3, [sp, #104]	; 0x68
 80050e2:	4654      	mov	r4, sl
 80050e4:	2205      	movs	r2, #5
 80050e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ea:	4858      	ldr	r0, [pc, #352]	; (800524c <_vfiprintf_r+0x24c>)
 80050ec:	f7fb f880 	bl	80001f0 <memchr>
 80050f0:	9a04      	ldr	r2, [sp, #16]
 80050f2:	b9d8      	cbnz	r0, 800512c <_vfiprintf_r+0x12c>
 80050f4:	06d1      	lsls	r1, r2, #27
 80050f6:	bf44      	itt	mi
 80050f8:	2320      	movmi	r3, #32
 80050fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050fe:	0713      	lsls	r3, r2, #28
 8005100:	bf44      	itt	mi
 8005102:	232b      	movmi	r3, #43	; 0x2b
 8005104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005108:	f89a 3000 	ldrb.w	r3, [sl]
 800510c:	2b2a      	cmp	r3, #42	; 0x2a
 800510e:	d015      	beq.n	800513c <_vfiprintf_r+0x13c>
 8005110:	9a07      	ldr	r2, [sp, #28]
 8005112:	4654      	mov	r4, sl
 8005114:	2000      	movs	r0, #0
 8005116:	f04f 0c0a 	mov.w	ip, #10
 800511a:	4621      	mov	r1, r4
 800511c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005120:	3b30      	subs	r3, #48	; 0x30
 8005122:	2b09      	cmp	r3, #9
 8005124:	d94e      	bls.n	80051c4 <_vfiprintf_r+0x1c4>
 8005126:	b1b0      	cbz	r0, 8005156 <_vfiprintf_r+0x156>
 8005128:	9207      	str	r2, [sp, #28]
 800512a:	e014      	b.n	8005156 <_vfiprintf_r+0x156>
 800512c:	eba0 0308 	sub.w	r3, r0, r8
 8005130:	fa09 f303 	lsl.w	r3, r9, r3
 8005134:	4313      	orrs	r3, r2
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	46a2      	mov	sl, r4
 800513a:	e7d2      	b.n	80050e2 <_vfiprintf_r+0xe2>
 800513c:	9b03      	ldr	r3, [sp, #12]
 800513e:	1d19      	adds	r1, r3, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	9103      	str	r1, [sp, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	bfbb      	ittet	lt
 8005148:	425b      	neglt	r3, r3
 800514a:	f042 0202 	orrlt.w	r2, r2, #2
 800514e:	9307      	strge	r3, [sp, #28]
 8005150:	9307      	strlt	r3, [sp, #28]
 8005152:	bfb8      	it	lt
 8005154:	9204      	strlt	r2, [sp, #16]
 8005156:	7823      	ldrb	r3, [r4, #0]
 8005158:	2b2e      	cmp	r3, #46	; 0x2e
 800515a:	d10c      	bne.n	8005176 <_vfiprintf_r+0x176>
 800515c:	7863      	ldrb	r3, [r4, #1]
 800515e:	2b2a      	cmp	r3, #42	; 0x2a
 8005160:	d135      	bne.n	80051ce <_vfiprintf_r+0x1ce>
 8005162:	9b03      	ldr	r3, [sp, #12]
 8005164:	1d1a      	adds	r2, r3, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	9203      	str	r2, [sp, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	bfb8      	it	lt
 800516e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005172:	3402      	adds	r4, #2
 8005174:	9305      	str	r3, [sp, #20]
 8005176:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800525c <_vfiprintf_r+0x25c>
 800517a:	7821      	ldrb	r1, [r4, #0]
 800517c:	2203      	movs	r2, #3
 800517e:	4650      	mov	r0, sl
 8005180:	f7fb f836 	bl	80001f0 <memchr>
 8005184:	b140      	cbz	r0, 8005198 <_vfiprintf_r+0x198>
 8005186:	2340      	movs	r3, #64	; 0x40
 8005188:	eba0 000a 	sub.w	r0, r0, sl
 800518c:	fa03 f000 	lsl.w	r0, r3, r0
 8005190:	9b04      	ldr	r3, [sp, #16]
 8005192:	4303      	orrs	r3, r0
 8005194:	3401      	adds	r4, #1
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519c:	482c      	ldr	r0, [pc, #176]	; (8005250 <_vfiprintf_r+0x250>)
 800519e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051a2:	2206      	movs	r2, #6
 80051a4:	f7fb f824 	bl	80001f0 <memchr>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d03f      	beq.n	800522c <_vfiprintf_r+0x22c>
 80051ac:	4b29      	ldr	r3, [pc, #164]	; (8005254 <_vfiprintf_r+0x254>)
 80051ae:	bb1b      	cbnz	r3, 80051f8 <_vfiprintf_r+0x1f8>
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	3307      	adds	r3, #7
 80051b4:	f023 0307 	bic.w	r3, r3, #7
 80051b8:	3308      	adds	r3, #8
 80051ba:	9303      	str	r3, [sp, #12]
 80051bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051be:	443b      	add	r3, r7
 80051c0:	9309      	str	r3, [sp, #36]	; 0x24
 80051c2:	e767      	b.n	8005094 <_vfiprintf_r+0x94>
 80051c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80051c8:	460c      	mov	r4, r1
 80051ca:	2001      	movs	r0, #1
 80051cc:	e7a5      	b.n	800511a <_vfiprintf_r+0x11a>
 80051ce:	2300      	movs	r3, #0
 80051d0:	3401      	adds	r4, #1
 80051d2:	9305      	str	r3, [sp, #20]
 80051d4:	4619      	mov	r1, r3
 80051d6:	f04f 0c0a 	mov.w	ip, #10
 80051da:	4620      	mov	r0, r4
 80051dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051e0:	3a30      	subs	r2, #48	; 0x30
 80051e2:	2a09      	cmp	r2, #9
 80051e4:	d903      	bls.n	80051ee <_vfiprintf_r+0x1ee>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0c5      	beq.n	8005176 <_vfiprintf_r+0x176>
 80051ea:	9105      	str	r1, [sp, #20]
 80051ec:	e7c3      	b.n	8005176 <_vfiprintf_r+0x176>
 80051ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80051f2:	4604      	mov	r4, r0
 80051f4:	2301      	movs	r3, #1
 80051f6:	e7f0      	b.n	80051da <_vfiprintf_r+0x1da>
 80051f8:	ab03      	add	r3, sp, #12
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	462a      	mov	r2, r5
 80051fe:	4b16      	ldr	r3, [pc, #88]	; (8005258 <_vfiprintf_r+0x258>)
 8005200:	a904      	add	r1, sp, #16
 8005202:	4630      	mov	r0, r6
 8005204:	f7fd fdd8 	bl	8002db8 <_printf_float>
 8005208:	4607      	mov	r7, r0
 800520a:	1c78      	adds	r0, r7, #1
 800520c:	d1d6      	bne.n	80051bc <_vfiprintf_r+0x1bc>
 800520e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005210:	07d9      	lsls	r1, r3, #31
 8005212:	d405      	bmi.n	8005220 <_vfiprintf_r+0x220>
 8005214:	89ab      	ldrh	r3, [r5, #12]
 8005216:	059a      	lsls	r2, r3, #22
 8005218:	d402      	bmi.n	8005220 <_vfiprintf_r+0x220>
 800521a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800521c:	f7ff faba 	bl	8004794 <__retarget_lock_release_recursive>
 8005220:	89ab      	ldrh	r3, [r5, #12]
 8005222:	065b      	lsls	r3, r3, #25
 8005224:	f53f af12 	bmi.w	800504c <_vfiprintf_r+0x4c>
 8005228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800522a:	e711      	b.n	8005050 <_vfiprintf_r+0x50>
 800522c:	ab03      	add	r3, sp, #12
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	462a      	mov	r2, r5
 8005232:	4b09      	ldr	r3, [pc, #36]	; (8005258 <_vfiprintf_r+0x258>)
 8005234:	a904      	add	r1, sp, #16
 8005236:	4630      	mov	r0, r6
 8005238:	f7fe f862 	bl	8003300 <_printf_i>
 800523c:	e7e4      	b.n	8005208 <_vfiprintf_r+0x208>
 800523e:	bf00      	nop
 8005240:	080057cc 	.word	0x080057cc
 8005244:	080057ec 	.word	0x080057ec
 8005248:	080057ac 	.word	0x080057ac
 800524c:	0800596c 	.word	0x0800596c
 8005250:	08005976 	.word	0x08005976
 8005254:	08002db9 	.word	0x08002db9
 8005258:	08004fdd 	.word	0x08004fdd
 800525c:	08005972 	.word	0x08005972

08005260 <__sread>:
 8005260:	b510      	push	{r4, lr}
 8005262:	460c      	mov	r4, r1
 8005264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005268:	f000 f996 	bl	8005598 <_read_r>
 800526c:	2800      	cmp	r0, #0
 800526e:	bfab      	itete	ge
 8005270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005272:	89a3      	ldrhlt	r3, [r4, #12]
 8005274:	181b      	addge	r3, r3, r0
 8005276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800527a:	bfac      	ite	ge
 800527c:	6563      	strge	r3, [r4, #84]	; 0x54
 800527e:	81a3      	strhlt	r3, [r4, #12]
 8005280:	bd10      	pop	{r4, pc}

08005282 <__swrite>:
 8005282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005286:	461f      	mov	r7, r3
 8005288:	898b      	ldrh	r3, [r1, #12]
 800528a:	05db      	lsls	r3, r3, #23
 800528c:	4605      	mov	r5, r0
 800528e:	460c      	mov	r4, r1
 8005290:	4616      	mov	r6, r2
 8005292:	d505      	bpl.n	80052a0 <__swrite+0x1e>
 8005294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005298:	2302      	movs	r3, #2
 800529a:	2200      	movs	r2, #0
 800529c:	f000 f958 	bl	8005550 <_lseek_r>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052aa:	81a3      	strh	r3, [r4, #12]
 80052ac:	4632      	mov	r2, r6
 80052ae:	463b      	mov	r3, r7
 80052b0:	4628      	mov	r0, r5
 80052b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052b6:	f000 b869 	b.w	800538c <_write_r>

080052ba <__sseek>:
 80052ba:	b510      	push	{r4, lr}
 80052bc:	460c      	mov	r4, r1
 80052be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c2:	f000 f945 	bl	8005550 <_lseek_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	bf15      	itete	ne
 80052cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80052ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052d6:	81a3      	strheq	r3, [r4, #12]
 80052d8:	bf18      	it	ne
 80052da:	81a3      	strhne	r3, [r4, #12]
 80052dc:	bd10      	pop	{r4, pc}

080052de <__sclose>:
 80052de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e2:	f000 b8f1 	b.w	80054c8 <_close_r>
	...

080052e8 <__swbuf_r>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	460e      	mov	r6, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	4605      	mov	r5, r0
 80052f0:	b118      	cbz	r0, 80052fa <__swbuf_r+0x12>
 80052f2:	6983      	ldr	r3, [r0, #24]
 80052f4:	b90b      	cbnz	r3, 80052fa <__swbuf_r+0x12>
 80052f6:	f7ff f9a9 	bl	800464c <__sinit>
 80052fa:	4b21      	ldr	r3, [pc, #132]	; (8005380 <__swbuf_r+0x98>)
 80052fc:	429c      	cmp	r4, r3
 80052fe:	d12b      	bne.n	8005358 <__swbuf_r+0x70>
 8005300:	686c      	ldr	r4, [r5, #4]
 8005302:	69a3      	ldr	r3, [r4, #24]
 8005304:	60a3      	str	r3, [r4, #8]
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	071a      	lsls	r2, r3, #28
 800530a:	d52f      	bpl.n	800536c <__swbuf_r+0x84>
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	b36b      	cbz	r3, 800536c <__swbuf_r+0x84>
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	6820      	ldr	r0, [r4, #0]
 8005314:	1ac0      	subs	r0, r0, r3
 8005316:	6963      	ldr	r3, [r4, #20]
 8005318:	b2f6      	uxtb	r6, r6
 800531a:	4283      	cmp	r3, r0
 800531c:	4637      	mov	r7, r6
 800531e:	dc04      	bgt.n	800532a <__swbuf_r+0x42>
 8005320:	4621      	mov	r1, r4
 8005322:	4628      	mov	r0, r5
 8005324:	f7ff f8fe 	bl	8004524 <_fflush_r>
 8005328:	bb30      	cbnz	r0, 8005378 <__swbuf_r+0x90>
 800532a:	68a3      	ldr	r3, [r4, #8]
 800532c:	3b01      	subs	r3, #1
 800532e:	60a3      	str	r3, [r4, #8]
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	6022      	str	r2, [r4, #0]
 8005336:	701e      	strb	r6, [r3, #0]
 8005338:	6963      	ldr	r3, [r4, #20]
 800533a:	3001      	adds	r0, #1
 800533c:	4283      	cmp	r3, r0
 800533e:	d004      	beq.n	800534a <__swbuf_r+0x62>
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	07db      	lsls	r3, r3, #31
 8005344:	d506      	bpl.n	8005354 <__swbuf_r+0x6c>
 8005346:	2e0a      	cmp	r6, #10
 8005348:	d104      	bne.n	8005354 <__swbuf_r+0x6c>
 800534a:	4621      	mov	r1, r4
 800534c:	4628      	mov	r0, r5
 800534e:	f7ff f8e9 	bl	8004524 <_fflush_r>
 8005352:	b988      	cbnz	r0, 8005378 <__swbuf_r+0x90>
 8005354:	4638      	mov	r0, r7
 8005356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <__swbuf_r+0x9c>)
 800535a:	429c      	cmp	r4, r3
 800535c:	d101      	bne.n	8005362 <__swbuf_r+0x7a>
 800535e:	68ac      	ldr	r4, [r5, #8]
 8005360:	e7cf      	b.n	8005302 <__swbuf_r+0x1a>
 8005362:	4b09      	ldr	r3, [pc, #36]	; (8005388 <__swbuf_r+0xa0>)
 8005364:	429c      	cmp	r4, r3
 8005366:	bf08      	it	eq
 8005368:	68ec      	ldreq	r4, [r5, #12]
 800536a:	e7ca      	b.n	8005302 <__swbuf_r+0x1a>
 800536c:	4621      	mov	r1, r4
 800536e:	4628      	mov	r0, r5
 8005370:	f000 f81e 	bl	80053b0 <__swsetup_r>
 8005374:	2800      	cmp	r0, #0
 8005376:	d0cb      	beq.n	8005310 <__swbuf_r+0x28>
 8005378:	f04f 37ff 	mov.w	r7, #4294967295
 800537c:	e7ea      	b.n	8005354 <__swbuf_r+0x6c>
 800537e:	bf00      	nop
 8005380:	080057cc 	.word	0x080057cc
 8005384:	080057ec 	.word	0x080057ec
 8005388:	080057ac 	.word	0x080057ac

0800538c <_write_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4d07      	ldr	r5, [pc, #28]	; (80053ac <_write_r+0x20>)
 8005390:	4604      	mov	r4, r0
 8005392:	4608      	mov	r0, r1
 8005394:	4611      	mov	r1, r2
 8005396:	2200      	movs	r2, #0
 8005398:	602a      	str	r2, [r5, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	f7fc fc92 	bl	8001cc4 <_write>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_write_r+0x1e>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_write_r+0x1e>
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	2000022c 	.word	0x2000022c

080053b0 <__swsetup_r>:
 80053b0:	4b32      	ldr	r3, [pc, #200]	; (800547c <__swsetup_r+0xcc>)
 80053b2:	b570      	push	{r4, r5, r6, lr}
 80053b4:	681d      	ldr	r5, [r3, #0]
 80053b6:	4606      	mov	r6, r0
 80053b8:	460c      	mov	r4, r1
 80053ba:	b125      	cbz	r5, 80053c6 <__swsetup_r+0x16>
 80053bc:	69ab      	ldr	r3, [r5, #24]
 80053be:	b913      	cbnz	r3, 80053c6 <__swsetup_r+0x16>
 80053c0:	4628      	mov	r0, r5
 80053c2:	f7ff f943 	bl	800464c <__sinit>
 80053c6:	4b2e      	ldr	r3, [pc, #184]	; (8005480 <__swsetup_r+0xd0>)
 80053c8:	429c      	cmp	r4, r3
 80053ca:	d10f      	bne.n	80053ec <__swsetup_r+0x3c>
 80053cc:	686c      	ldr	r4, [r5, #4]
 80053ce:	89a3      	ldrh	r3, [r4, #12]
 80053d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053d4:	0719      	lsls	r1, r3, #28
 80053d6:	d42c      	bmi.n	8005432 <__swsetup_r+0x82>
 80053d8:	06dd      	lsls	r5, r3, #27
 80053da:	d411      	bmi.n	8005400 <__swsetup_r+0x50>
 80053dc:	2309      	movs	r3, #9
 80053de:	6033      	str	r3, [r6, #0]
 80053e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053e4:	81a3      	strh	r3, [r4, #12]
 80053e6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ea:	e03e      	b.n	800546a <__swsetup_r+0xba>
 80053ec:	4b25      	ldr	r3, [pc, #148]	; (8005484 <__swsetup_r+0xd4>)
 80053ee:	429c      	cmp	r4, r3
 80053f0:	d101      	bne.n	80053f6 <__swsetup_r+0x46>
 80053f2:	68ac      	ldr	r4, [r5, #8]
 80053f4:	e7eb      	b.n	80053ce <__swsetup_r+0x1e>
 80053f6:	4b24      	ldr	r3, [pc, #144]	; (8005488 <__swsetup_r+0xd8>)
 80053f8:	429c      	cmp	r4, r3
 80053fa:	bf08      	it	eq
 80053fc:	68ec      	ldreq	r4, [r5, #12]
 80053fe:	e7e6      	b.n	80053ce <__swsetup_r+0x1e>
 8005400:	0758      	lsls	r0, r3, #29
 8005402:	d512      	bpl.n	800542a <__swsetup_r+0x7a>
 8005404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005406:	b141      	cbz	r1, 800541a <__swsetup_r+0x6a>
 8005408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800540c:	4299      	cmp	r1, r3
 800540e:	d002      	beq.n	8005416 <__swsetup_r+0x66>
 8005410:	4630      	mov	r0, r6
 8005412:	f7fd fb87 	bl	8002b24 <_free_r>
 8005416:	2300      	movs	r3, #0
 8005418:	6363      	str	r3, [r4, #52]	; 0x34
 800541a:	89a3      	ldrh	r3, [r4, #12]
 800541c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	2300      	movs	r3, #0
 8005424:	6063      	str	r3, [r4, #4]
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	f043 0308 	orr.w	r3, r3, #8
 8005430:	81a3      	strh	r3, [r4, #12]
 8005432:	6923      	ldr	r3, [r4, #16]
 8005434:	b94b      	cbnz	r3, 800544a <__swsetup_r+0x9a>
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800543c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005440:	d003      	beq.n	800544a <__swsetup_r+0x9a>
 8005442:	4621      	mov	r1, r4
 8005444:	4630      	mov	r0, r6
 8005446:	f7ff f9cb 	bl	80047e0 <__smakebuf_r>
 800544a:	89a0      	ldrh	r0, [r4, #12]
 800544c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005450:	f010 0301 	ands.w	r3, r0, #1
 8005454:	d00a      	beq.n	800546c <__swsetup_r+0xbc>
 8005456:	2300      	movs	r3, #0
 8005458:	60a3      	str	r3, [r4, #8]
 800545a:	6963      	ldr	r3, [r4, #20]
 800545c:	425b      	negs	r3, r3
 800545e:	61a3      	str	r3, [r4, #24]
 8005460:	6923      	ldr	r3, [r4, #16]
 8005462:	b943      	cbnz	r3, 8005476 <__swsetup_r+0xc6>
 8005464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005468:	d1ba      	bne.n	80053e0 <__swsetup_r+0x30>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	0781      	lsls	r1, r0, #30
 800546e:	bf58      	it	pl
 8005470:	6963      	ldrpl	r3, [r4, #20]
 8005472:	60a3      	str	r3, [r4, #8]
 8005474:	e7f4      	b.n	8005460 <__swsetup_r+0xb0>
 8005476:	2000      	movs	r0, #0
 8005478:	e7f7      	b.n	800546a <__swsetup_r+0xba>
 800547a:	bf00      	nop
 800547c:	20000010 	.word	0x20000010
 8005480:	080057cc 	.word	0x080057cc
 8005484:	080057ec 	.word	0x080057ec
 8005488:	080057ac 	.word	0x080057ac

0800548c <__assert_func>:
 800548c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800548e:	4614      	mov	r4, r2
 8005490:	461a      	mov	r2, r3
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <__assert_func+0x2c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4605      	mov	r5, r0
 8005498:	68d8      	ldr	r0, [r3, #12]
 800549a:	b14c      	cbz	r4, 80054b0 <__assert_func+0x24>
 800549c:	4b07      	ldr	r3, [pc, #28]	; (80054bc <__assert_func+0x30>)
 800549e:	9100      	str	r1, [sp, #0]
 80054a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054a4:	4906      	ldr	r1, [pc, #24]	; (80054c0 <__assert_func+0x34>)
 80054a6:	462b      	mov	r3, r5
 80054a8:	f000 f81e 	bl	80054e8 <fiprintf>
 80054ac:	f000 f893 	bl	80055d6 <abort>
 80054b0:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <__assert_func+0x38>)
 80054b2:	461c      	mov	r4, r3
 80054b4:	e7f3      	b.n	800549e <__assert_func+0x12>
 80054b6:	bf00      	nop
 80054b8:	20000010 	.word	0x20000010
 80054bc:	0800597d 	.word	0x0800597d
 80054c0:	0800598a 	.word	0x0800598a
 80054c4:	080059b8 	.word	0x080059b8

080054c8 <_close_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d06      	ldr	r5, [pc, #24]	; (80054e4 <_close_r+0x1c>)
 80054cc:	2300      	movs	r3, #0
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	f7fc fc1e 	bl	8001d14 <_close>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_close_r+0x1a>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_close_r+0x1a>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	2000022c 	.word	0x2000022c

080054e8 <fiprintf>:
 80054e8:	b40e      	push	{r1, r2, r3}
 80054ea:	b503      	push	{r0, r1, lr}
 80054ec:	4601      	mov	r1, r0
 80054ee:	ab03      	add	r3, sp, #12
 80054f0:	4805      	ldr	r0, [pc, #20]	; (8005508 <fiprintf+0x20>)
 80054f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f6:	6800      	ldr	r0, [r0, #0]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	f7ff fd81 	bl	8005000 <_vfiprintf_r>
 80054fe:	b002      	add	sp, #8
 8005500:	f85d eb04 	ldr.w	lr, [sp], #4
 8005504:	b003      	add	sp, #12
 8005506:	4770      	bx	lr
 8005508:	20000010 	.word	0x20000010

0800550c <_fstat_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4d07      	ldr	r5, [pc, #28]	; (800552c <_fstat_r+0x20>)
 8005510:	2300      	movs	r3, #0
 8005512:	4604      	mov	r4, r0
 8005514:	4608      	mov	r0, r1
 8005516:	4611      	mov	r1, r2
 8005518:	602b      	str	r3, [r5, #0]
 800551a:	f7fc fc49 	bl	8001db0 <_fstat>
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	d102      	bne.n	8005528 <_fstat_r+0x1c>
 8005522:	682b      	ldr	r3, [r5, #0]
 8005524:	b103      	cbz	r3, 8005528 <_fstat_r+0x1c>
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	bd38      	pop	{r3, r4, r5, pc}
 800552a:	bf00      	nop
 800552c:	2000022c 	.word	0x2000022c

08005530 <_isatty_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4d06      	ldr	r5, [pc, #24]	; (800554c <_isatty_r+0x1c>)
 8005534:	2300      	movs	r3, #0
 8005536:	4604      	mov	r4, r0
 8005538:	4608      	mov	r0, r1
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	f7fc fbac 	bl	8001c98 <_isatty>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_isatty_r+0x1a>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	b103      	cbz	r3, 800554a <_isatty_r+0x1a>
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	2000022c 	.word	0x2000022c

08005550 <_lseek_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4d07      	ldr	r5, [pc, #28]	; (8005570 <_lseek_r+0x20>)
 8005554:	4604      	mov	r4, r0
 8005556:	4608      	mov	r0, r1
 8005558:	4611      	mov	r1, r2
 800555a:	2200      	movs	r2, #0
 800555c:	602a      	str	r2, [r5, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	f7fc fbef 	bl	8001d42 <_lseek>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_lseek_r+0x1e>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_lseek_r+0x1e>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	2000022c 	.word	0x2000022c

08005574 <__ascii_mbtowc>:
 8005574:	b082      	sub	sp, #8
 8005576:	b901      	cbnz	r1, 800557a <__ascii_mbtowc+0x6>
 8005578:	a901      	add	r1, sp, #4
 800557a:	b142      	cbz	r2, 800558e <__ascii_mbtowc+0x1a>
 800557c:	b14b      	cbz	r3, 8005592 <__ascii_mbtowc+0x1e>
 800557e:	7813      	ldrb	r3, [r2, #0]
 8005580:	600b      	str	r3, [r1, #0]
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	1e10      	subs	r0, r2, #0
 8005586:	bf18      	it	ne
 8005588:	2001      	movne	r0, #1
 800558a:	b002      	add	sp, #8
 800558c:	4770      	bx	lr
 800558e:	4610      	mov	r0, r2
 8005590:	e7fb      	b.n	800558a <__ascii_mbtowc+0x16>
 8005592:	f06f 0001 	mvn.w	r0, #1
 8005596:	e7f8      	b.n	800558a <__ascii_mbtowc+0x16>

08005598 <_read_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d07      	ldr	r5, [pc, #28]	; (80055b8 <_read_r+0x20>)
 800559c:	4604      	mov	r4, r0
 800559e:	4608      	mov	r0, r1
 80055a0:	4611      	mov	r1, r2
 80055a2:	2200      	movs	r2, #0
 80055a4:	602a      	str	r2, [r5, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f7fc fbdc 	bl	8001d64 <_read>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_read_r+0x1e>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_read_r+0x1e>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	2000022c 	.word	0x2000022c

080055bc <__ascii_wctomb>:
 80055bc:	b149      	cbz	r1, 80055d2 <__ascii_wctomb+0x16>
 80055be:	2aff      	cmp	r2, #255	; 0xff
 80055c0:	bf85      	ittet	hi
 80055c2:	238a      	movhi	r3, #138	; 0x8a
 80055c4:	6003      	strhi	r3, [r0, #0]
 80055c6:	700a      	strbls	r2, [r1, #0]
 80055c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80055cc:	bf98      	it	ls
 80055ce:	2001      	movls	r0, #1
 80055d0:	4770      	bx	lr
 80055d2:	4608      	mov	r0, r1
 80055d4:	4770      	bx	lr

080055d6 <abort>:
 80055d6:	b508      	push	{r3, lr}
 80055d8:	2006      	movs	r0, #6
 80055da:	f000 f82b 	bl	8005634 <raise>
 80055de:	2001      	movs	r0, #1
 80055e0:	f000 f854 	bl	800568c <_exit>

080055e4 <_raise_r>:
 80055e4:	291f      	cmp	r1, #31
 80055e6:	b538      	push	{r3, r4, r5, lr}
 80055e8:	4604      	mov	r4, r0
 80055ea:	460d      	mov	r5, r1
 80055ec:	d904      	bls.n	80055f8 <_raise_r+0x14>
 80055ee:	2316      	movs	r3, #22
 80055f0:	6003      	str	r3, [r0, #0]
 80055f2:	f04f 30ff 	mov.w	r0, #4294967295
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80055fa:	b112      	cbz	r2, 8005602 <_raise_r+0x1e>
 80055fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005600:	b94b      	cbnz	r3, 8005616 <_raise_r+0x32>
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f830 	bl	8005668 <_getpid_r>
 8005608:	462a      	mov	r2, r5
 800560a:	4601      	mov	r1, r0
 800560c:	4620      	mov	r0, r4
 800560e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005612:	f000 b817 	b.w	8005644 <_kill_r>
 8005616:	2b01      	cmp	r3, #1
 8005618:	d00a      	beq.n	8005630 <_raise_r+0x4c>
 800561a:	1c59      	adds	r1, r3, #1
 800561c:	d103      	bne.n	8005626 <_raise_r+0x42>
 800561e:	2316      	movs	r3, #22
 8005620:	6003      	str	r3, [r0, #0]
 8005622:	2001      	movs	r0, #1
 8005624:	e7e7      	b.n	80055f6 <_raise_r+0x12>
 8005626:	2400      	movs	r4, #0
 8005628:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800562c:	4628      	mov	r0, r5
 800562e:	4798      	blx	r3
 8005630:	2000      	movs	r0, #0
 8005632:	e7e0      	b.n	80055f6 <_raise_r+0x12>

08005634 <raise>:
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <raise+0xc>)
 8005636:	4601      	mov	r1, r0
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f7ff bfd3 	b.w	80055e4 <_raise_r>
 800563e:	bf00      	nop
 8005640:	20000010 	.word	0x20000010

08005644 <_kill_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4d07      	ldr	r5, [pc, #28]	; (8005664 <_kill_r+0x20>)
 8005648:	2300      	movs	r3, #0
 800564a:	4604      	mov	r4, r0
 800564c:	4608      	mov	r0, r1
 800564e:	4611      	mov	r1, r2
 8005650:	602b      	str	r3, [r5, #0]
 8005652:	f000 f813 	bl	800567c <_kill>
 8005656:	1c43      	adds	r3, r0, #1
 8005658:	d102      	bne.n	8005660 <_kill_r+0x1c>
 800565a:	682b      	ldr	r3, [r5, #0]
 800565c:	b103      	cbz	r3, 8005660 <_kill_r+0x1c>
 800565e:	6023      	str	r3, [r4, #0]
 8005660:	bd38      	pop	{r3, r4, r5, pc}
 8005662:	bf00      	nop
 8005664:	2000022c 	.word	0x2000022c

08005668 <_getpid_r>:
 8005668:	f000 b800 	b.w	800566c <_getpid>

0800566c <_getpid>:
 800566c:	4b02      	ldr	r3, [pc, #8]	; (8005678 <_getpid+0xc>)
 800566e:	2258      	movs	r2, #88	; 0x58
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f04f 30ff 	mov.w	r0, #4294967295
 8005676:	4770      	bx	lr
 8005678:	2000022c 	.word	0x2000022c

0800567c <_kill>:
 800567c:	4b02      	ldr	r3, [pc, #8]	; (8005688 <_kill+0xc>)
 800567e:	2258      	movs	r2, #88	; 0x58
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f04f 30ff 	mov.w	r0, #4294967295
 8005686:	4770      	bx	lr
 8005688:	2000022c 	.word	0x2000022c

0800568c <_exit>:
 800568c:	e7fe      	b.n	800568c <_exit>
	...

08005690 <_init>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	bf00      	nop
 8005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005696:	bc08      	pop	{r3}
 8005698:	469e      	mov	lr, r3
 800569a:	4770      	bx	lr

0800569c <_fini>:
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569e:	bf00      	nop
 80056a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a2:	bc08      	pop	{r3}
 80056a4:	469e      	mov	lr, r3
 80056a6:	4770      	bx	lr
